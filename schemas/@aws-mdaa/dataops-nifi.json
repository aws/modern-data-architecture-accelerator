{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
        "AwsManagedPolicySpec": {
            "additionalProperties": false,
            "properties": {
                "policyName": {
                    "description": "Name of the AWS Managed Policy",
                    "type": "string"
                },
                "suppressionReason": {
                    "description": "A suppression reason to be recorded in order to suppress AWSSolutions-IAM4",
                    "type": "string"
                }
            },
            "required": [
                "policyName",
                "suppressionReason"
            ],
            "type": "object"
        },
        "CfnParameterProps": {
            "additionalProperties": false,
            "properties": {
                "allowedPattern": {
                    "default": "- No constraints on patterns allowed for parameter.",
                    "description": "A regular expression that represents the patterns to allow for String types.",
                    "type": "string"
                },
                "allowedValues": {
                    "default": "- No constraints on values allowed for parameter.",
                    "description": "An array containing the list of values allowed for the parameter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "constraintDescription": {
                    "default": "- No description with customized error message when user specifies invalid values.",
                    "description": "A string that explains a constraint when the constraint is violated.\nFor example, without a constraint description, a parameter that has an allowed\npattern of [A-Za-z0-9]+ displays the following error message when the user specifies\nan invalid value:",
                    "type": "string"
                },
                "default": {
                    "default": "- No default value for parameter.",
                    "description": "A value of the appropriate type for the template to use if no value is specified\nwhen a stack is created. If you define constraints for the parameter, you must specify\na value that adheres to those constraints."
                },
                "description": {
                    "default": "- No description for the parameter.",
                    "description": "A string of up to 4000 characters that describes the parameter.",
                    "type": "string"
                },
                "maxLength": {
                    "default": "- None.",
                    "description": "An integer value that determines the largest number of characters you want to allow for String types.",
                    "type": "number"
                },
                "maxValue": {
                    "default": "- None.",
                    "description": "A numeric value that determines the largest numeric value you want to allow for Number types.",
                    "type": "number"
                },
                "minLength": {
                    "default": "- None.",
                    "description": "An integer value that determines the smallest number of characters you want to allow for String types.",
                    "type": "number"
                },
                "minValue": {
                    "default": "- None.",
                    "description": "A numeric value that determines the smallest numeric value you want to allow for Number types.",
                    "type": "number"
                },
                "noEcho": {
                    "default": "- Parameter values are not masked.",
                    "description": "Whether to mask the parameter value when anyone makes a call that describes the stack.\nIf you set the value to ``true``, the parameter value is masked with asterisks (``*****``).",
                    "type": "boolean"
                },
                "type": {
                    "default": "String",
                    "description": "The data type for the parameter (DataType).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Conditions": {
            "additionalProperties": false,
            "description": "Conditions for when an IAM Policy is in effect, specified in the following structure:\n\n`{ \"Operator\": { \"keyInRequestContext\": \"value\" } }`\n\nThe value can be either a single string value or an array of string values.\n\nFor more information, including which operators are supported, see [the IAM\ndocumentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html).",
            "type": "object"
        },
        "Effect": {
            "description": "The Effect element of an IAM policy",
            "enum": [
                "Allow",
                "Deny"
            ],
            "type": "string"
        },
        "IPrincipal": {
            "additionalProperties": false,
            "description": "Represents a logical IAM principal.\n\nAn IPrincipal describes a logical entity that can perform AWS API calls\nagainst sets of resources, optionally under certain conditions.\n\nExamples of simple principals are IAM objects that you create, such\nas Users or Roles.\n\nAn example of a more complex principals is a `ServicePrincipal` (such as\n`new ServicePrincipal(\"sns.amazonaws.com\")`, which represents the Simple\nNotifications Service).\n\nA single logical Principal may also map to a set of physical principals.\nFor example, `new OrganizationPrincipal('o-12345abcde')` represents all\nidentities that are part of the given AWS Organization.",
            "properties": {
                "assumeRoleAction": {
                    "description": "When this Principal is used in an AssumeRole policy, the action to use.",
                    "type": "string"
                },
                "grantPrincipal": {
                    "$ref": "#/definitions/IPrincipal",
                    "description": "The principal to grant permissions to"
                },
                "policyFragment": {
                    "$ref": "#/definitions/PrincipalPolicyFragment",
                    "description": "Return the policy fragment that identifies this principal in a Policy."
                },
                "principalAccount": {
                    "description": "The AWS account ID of this principal.\nCan be undefined when the account is not known\n(for example, for service principals).\nCan be a Token - in that case,\nit's assumed to be AWS::AccountId.",
                    "type": "string"
                }
            },
            "required": [
                "assumeRoleAction",
                "grantPrincipal",
                "policyFragment"
            ],
            "type": "object"
        },
        "InstanceArchitecture": {
            "description": "Identifies an instance's CPU architecture",
            "enum": [
                "arm64",
                "x86_64"
            ],
            "type": "string"
        },
        "InstanceType": {
            "additionalProperties": false,
            "description": "Instance type for EC2 instances\n\nThis class takes a literal string, good if you already\nknow the identifier of the type you want.",
            "properties": {
                "architecture": {
                    "$ref": "#/definitions/InstanceArchitecture",
                    "description": "The instance's CPU architecture"
                },
                "instanceTypeIdentifier": {}
            },
            "required": [
                "architecture",
                "instanceTypeIdentifier"
            ],
            "type": "object"
        },
        "MdaaCidrPeer": {
            "additionalProperties": false,
            "properties": {
                "cidr": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "port": {
                    "type": "number"
                },
                "protocol": {
                    "type": "string"
                },
                "suppressions": {
                    "items": {
                        "$ref": "#/definitions/NagPackSuppression"
                    },
                    "type": "array"
                },
                "toPort": {
                    "type": "number"
                }
            },
            "required": [
                "cidr",
                "protocol"
            ],
            "type": "object"
        },
        "MdaaNagSuppressionByPath": {
            "additionalProperties": false,
            "properties": {
                "path": {
                    "type": "string"
                },
                "suppressions": {
                    "items": {
                        "additionalProperties": false,
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "reason": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "reason"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "path",
                "suppressions"
            ],
            "type": "object"
        },
        "MdaaNagSuppressionConfigs": {
            "additionalProperties": false,
            "properties": {
                "by_path": {
                    "items": {
                        "$ref": "#/definitions/MdaaNagSuppressionByPath"
                    },
                    "type": "array"
                }
            },
            "required": [
                "by_path"
            ],
            "type": "object"
        },
        "MdaaPrefixListPeer": {
            "additionalProperties": false,
            "properties": {
                "description": {
                    "type": "string"
                },
                "port": {
                    "type": "number"
                },
                "prefixList": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "suppressions": {
                    "items": {
                        "$ref": "#/definitions/NagPackSuppression"
                    },
                    "type": "array"
                },
                "toPort": {
                    "type": "number"
                }
            },
            "required": [
                "prefixList",
                "protocol"
            ],
            "type": "object"
        },
        "MdaaRoleRef": {
            "additionalProperties": false,
            "description": "A reference to an IAM role. Roles can be referenced by name, arn, and/or id.",
            "properties": {
                "arn": {
                    "description": "Reference role by arn",
                    "type": "string"
                },
                "id": {
                    "description": "Reference role by id",
                    "type": "string"
                },
                "immutable": {
                    "description": "Indicates whether the role should be considered immutable (defaults false)",
                    "type": "boolean"
                },
                "name": {
                    "description": "Reference role by name",
                    "type": "string"
                },
                "refId": {
                    "description": "A string which uniquely identifies the MdaaRoleRef within a scope.",
                    "type": "string"
                },
                "sso": {
                    "description": "If true, role name will be resolved to an SSO auto-generated role. Also implies immutability.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "MdaaSecurityGroupPeer": {
            "additionalProperties": false,
            "properties": {
                "description": {
                    "type": "string"
                },
                "port": {
                    "type": "number"
                },
                "protocol": {
                    "type": "string"
                },
                "sgId": {
                    "type": "string"
                },
                "suppressions": {
                    "items": {
                        "$ref": "#/definitions/NagPackSuppression"
                    },
                    "type": "array"
                },
                "toPort": {
                    "type": "number"
                }
            },
            "required": [
                "protocol",
                "sgId"
            ],
            "type": "object"
        },
        "MdaaSecurityGroupRuleProps": {
            "additionalProperties": false,
            "properties": {
                "ipv4": {
                    "items": {
                        "$ref": "#/definitions/MdaaCidrPeer"
                    },
                    "type": "array"
                },
                "prefixList": {
                    "items": {
                        "$ref": "#/definitions/MdaaPrefixListPeer"
                    },
                    "type": "array"
                },
                "sg": {
                    "items": {
                        "$ref": "#/definitions/MdaaSecurityGroupPeer"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "MdaaServiceCatalogConstraintConfig": {
            "additionalProperties": false,
            "properties": {
                "description": {
                    "type": "string"
                },
                "rules": {
                    "additionalProperties": {
                        "$ref": "#/definitions/MdaaServiceCatalogConstraintRuleConfig"
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "rules"
            ],
            "type": "object"
        },
        "MdaaServiceCatalogConstraintRuleAssertionConfig": {
            "additionalProperties": false,
            "properties": {
                "assert": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            },
            "required": [
                "assert",
                "description"
            ],
            "type": "object"
        },
        "MdaaServiceCatalogConstraintRuleCondititionConfig": {
            "additionalProperties": false,
            "type": "object"
        },
        "MdaaServiceCatalogConstraintRuleConfig": {
            "additionalProperties": false,
            "properties": {
                "assertions": {
                    "items": {
                        "$ref": "#/definitions/MdaaServiceCatalogConstraintRuleAssertionConfig"
                    },
                    "type": "array"
                },
                "condition": {
                    "$ref": "#/definitions/MdaaServiceCatalogConstraintRuleCondititionConfig"
                }
            },
            "required": [
                "assertions",
                "condition"
            ],
            "type": "object"
        },
        "MdaaServiceCatalogParameterConfig": {
            "additionalProperties": false,
            "properties": {
                "constraints": {
                    "$ref": "#/definitions/MdaaServiceCatalogConstraintConfig"
                },
                "props": {
                    "$ref": "#/definitions/CfnParameterProps"
                }
            },
            "required": [
                "props"
            ],
            "type": "object"
        },
        "MdaaServiceCatalogProductConfig": {
            "additionalProperties": false,
            "properties": {
                "launch_role_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "parameters": {
                    "additionalProperties": {
                        "$ref": "#/definitions/MdaaServiceCatalogParameterConfig"
                    },
                    "type": "object"
                },
                "portfolio_arn": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "owner",
                "portfolio_arn"
            ],
            "type": "object"
        },
        "MgmtInstanceProps": {
            "additionalProperties": false,
            "properties": {
                "availabilityZone": {
                    "type": "string"
                },
                "instanceType": {
                    "$ref": "#/definitions/InstanceType",
                    "description": "Instance type for EC2 instances\n\nThis class takes a literal string, good if you already\nknow the identifier of the type you want."
                },
                "keyPairName": {
                    "type": "string"
                },
                "mgmtPolicyStatements": {
                    "items": {
                        "$ref": "#/definitions/PolicyStatement"
                    },
                    "type": "array"
                },
                "subnetId": {
                    "type": "string"
                },
                "userDataCommands": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "availabilityZone",
                "subnetId"
            ],
            "type": "object"
        },
        "NagPackSuppression": {
            "additionalProperties": false,
            "description": "Interface for creating a rule suppression",
            "properties": {
                "appliesTo": {
                    "description": "Rule specific granular suppressions",
                    "items": {
                        "$ref": "#/definitions/NagPackSuppressionAppliesTo"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "The id of the rule to ignore",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason to ignore the rule (minimum 10 characters)",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "reason"
            ],
            "type": "object"
        },
        "NagPackSuppressionAppliesTo": {
            "anyOf": [
                {
                    "$ref": "#/definitions/RegexAppliesTo"
                },
                {
                    "type": "string"
                }
            ],
            "description": "A granular suppression"
        },
        "NamedNifiClusterOptions": {
            "additionalProperties": {
                "$ref": "#/definitions/NifiClusterOptionsWithPeers"
            },
            "type": "object"
        },
        "NamedNifiRegistryClientProps": {
            "additionalProperties": {
                "$ref": "#/definitions/NifiRegistryClientProps"
            },
            "type": "object"
        },
        "NifiAuthorization": {
            "additionalProperties": false,
            "properties": {
                "actions": {
                    "items": {
                        "$ref": "#/definitions/PolicyAction"
                    },
                    "type": "array"
                },
                "groups": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "identities": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "policyResourcePattern": {
                    "type": "string"
                }
            },
            "required": [
                "actions",
                "policyResourcePattern"
            ],
            "type": "object"
        },
        "NifiClusterOptionsWithPeers": {
            "additionalProperties": false,
            "properties": {
                "additionalEfsIngressSecurityGroupIds": {
                    "description": "Security groups which will be provided ingress access to the Nifi cluster EFS security group.\nThese may also be specified globally.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "adminIdentities": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "authorizations": {
                    "items": {
                        "$ref": "#/definitions/NifiAuthorization"
                    },
                    "type": "array"
                },
                "clusterPort": {
                    "description": "The port on which the internal cluster communications will occur",
                    "type": "number"
                },
                "clusterRoleAwsManagedPolicies": {
                    "description": "AWS managed policies which will be granted to the Nifi cluster role for access to AWS services.",
                    "items": {
                        "$ref": "#/definitions/AwsManagedPolicySpec"
                    },
                    "type": "array"
                },
                "clusterRoleManagedPolicies": {
                    "description": "Customer managed policies which will be granted to the Nifi cluster role for access to AWS services.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "externalNodeIdentities": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "groups": {
                    "additionalProperties": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": "object"
                },
                "httpsPort": {
                    "description": "The port on which the cluster HTTPS interfaces will listen",
                    "type": "number"
                },
                "identities": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nifiImageTag": {
                    "description": "The tag of the Nifi docker image to use. If not specified,\ndefaults to the latest tested version (currently 1.25.0). Specify 'latest' to pull\nthe latest version (might be untested).",
                    "type": "string"
                },
                "nodeCount": {
                    "description": "Initial number of nodes in the cluster.\nDefaults to 1.",
                    "type": "number"
                },
                "nodeSize": {
                    "description": "Size of the Nifi cluster nodes.\nDefaults to SMALL.",
                    "enum": [
                        "2XLARGE",
                        "LARGE",
                        "MEDIUM",
                        "SMALL",
                        "XLARGE"
                    ],
                    "type": "string"
                },
                "peerClusters": {
                    "description": "Other clusters within this module which will be provided SecurityGroup and Node remote access to this cluster.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "policies": {
                    "items": {
                        "$ref": "#/definitions/NifiPolicy"
                    },
                    "type": "array"
                },
                "registryClients": {
                    "$ref": "#/definitions/NamedNifiRegistryClientProps"
                },
                "remotePort": {
                    "description": "The port on which the cluster remote RAW interfaces will listen",
                    "type": "number"
                },
                "saml": {
                    "$ref": "#/definitions/NifiSamlProps",
                    "description": "The configuration required to configure the Nifi cluster to use a SAML identity provider"
                },
                "securityGroupEgressRules": {
                    "$ref": "#/definitions/MdaaSecurityGroupRuleProps",
                    "description": "Egress rules to be added to all Nifi cluster security groups.\nThese may also be specified globally."
                },
                "securityGroupIngressIPv4s": {
                    "description": "IPv4 CIDRs which will be provided ingress access to the Nifi cluster security group.\nThese may also be specified globally.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "securityGroupIngressSGs": {
                    "description": "Security groups which will be provided ingress access to the Nifi cluster security group.\nThese may also be specified globally.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "adminIdentities",
                "saml"
            ],
            "type": "object"
        },
        "NifiPolicy": {
            "additionalProperties": false,
            "properties": {
                "action": {
                    "$ref": "#/definitions/PolicyAction"
                },
                "resource": {
                    "type": "string"
                }
            },
            "required": [
                "action",
                "resource"
            ],
            "type": "object"
        },
        "NifiProps": {
            "additionalProperties": false,
            "properties": {
                "additionalEfsIngressSecurityGroupIds": {
                    "description": "Security groups which will be provided ingress access to all Nifi cluster EFS security groups.\nThese may also be specified for each cluster.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "adminRoles": {
                    "description": "List of admin roles which will be provided access to EKS cluster resources",
                    "items": {
                        "$ref": "#/definitions/MdaaRoleRef"
                    },
                    "type": "array"
                },
                "caCertDuration": {
                    "description": "The certificate validity period for the internal CA cert. If using an ACM Private CA with short-term certificates,\nthis should be set to less than 7 days. Defaults to 6 days.",
                    "type": "string"
                },
                "caCertRenewBefore": {
                    "description": "The time before CA cert expiration at which point the internal CA cert will be renewed.\nDefaults to 12 hours.",
                    "type": "string"
                },
                "certKeyAlg": {
                    "type": "string"
                },
                "certKeySize": {
                    "type": "number"
                },
                "clusters": {
                    "$ref": "#/definitions/NamedNifiClusterOptions",
                    "description": "Nifi cluster configurations to be created."
                },
                "eksSecurityGroupIngressRules": {
                    "$ref": "#/definitions/MdaaSecurityGroupRuleProps",
                    "description": "Ingress rules to be added to the EKS control plane security group"
                },
                "existingPrivateCaArn": {
                    "description": "(Optional) If specified, this ACM Private CA will be used to sign the internal CA running\nwithin EKS. If not specified, an ACM Private CA will be created.",
                    "type": "string"
                },
                "mgmtInstance": {
                    "$ref": "#/definitions/MgmtInstanceProps",
                    "description": "If defined, an EC2 instance will be created with connectivity, permissions, and tooling to manage the EKS cluster"
                },
                "nodeCertDuration": {
                    "description": "The certificate validity period for the Zookeeper and Nifi Node certs. If using an ACM Private CA with short-term certificates,\nthis should be set to less than 6 days. Defaults to 5 days.",
                    "type": "string"
                },
                "nodeCertRenewBefore": {
                    "description": "The time before CA cert expiration at which point the Zookeeper and Nifi Node certs will be renewed.\nDefaults to 12 hours.",
                    "type": "string"
                },
                "registry": {
                    "$ref": "#/definitions/NifiRegistryProps"
                },
                "securityGroupEgressRules": {
                    "$ref": "#/definitions/MdaaSecurityGroupRuleProps",
                    "description": "Egress rules to be added to all Nifi cluster security groups.\nThese may also be specified for each cluster."
                },
                "securityGroupIngressIPv4s": {
                    "description": "IPv4 CIDRs which will be provided ingress access to all Nifi cluster security groups.\nThese may also be specified for each cluster.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "securityGroupIngressSGs": {
                    "description": "Security groups which will be provided ingress access to all Nifi cluster security groups.\nThese may also be specified for each cluster.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subnetIds": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Subnets on which EKS and Nifi clusters will be deployed",
                    "type": "object"
                },
                "vpcId": {
                    "description": "VPC on which EKS and Nifi clusters will be deployed",
                    "type": "string"
                }
            },
            "required": [
                "adminRoles",
                "subnetIds",
                "vpcId"
            ],
            "type": "object"
        },
        "NifiRegistryBucketProps": {
            "additionalProperties": false,
            "properties": {
                "DELETE": {
                    "additionalProperties": false,
                    "properties": {
                        "groups": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "identities": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "READ": {
                    "additionalProperties": false,
                    "properties": {
                        "groups": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "identities": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "WRITE": {
                    "additionalProperties": false,
                    "properties": {
                        "groups": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "identities": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "NifiRegistryClientProps": {
            "additionalProperties": false,
            "properties": {
                "url": {
                    "type": "string"
                }
            },
            "required": [
                "url"
            ],
            "type": "object"
        },
        "NifiRegistryProps": {
            "additionalProperties": false,
            "properties": {
                "additionalEfsIngressSecurityGroupIds": {
                    "description": "Security groups which will be provided ingress access to the Nifi cluster EFS security group.\nThese may also be specified globally.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "adminIdentities": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "authorizations": {
                    "items": {
                        "$ref": "#/definitions/NifiAuthorization"
                    },
                    "type": "array"
                },
                "buckets": {
                    "additionalProperties": {
                        "$ref": "#/definitions/NifiRegistryBucketProps"
                    },
                    "type": "object"
                },
                "externalNodeIdentities": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "groups": {
                    "additionalProperties": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": "object"
                },
                "httpsPort": {
                    "description": "The port on which the cluster HTTPS interfaces will listen",
                    "type": "number"
                },
                "identities": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "policies": {
                    "items": {
                        "$ref": "#/definitions/NifiPolicy"
                    },
                    "type": "array"
                },
                "registryImageTag": {
                    "description": "The tag of the Nifi docker image to use. If not specified,\ndefaults to the latest tested version (currently 1.25.0). Specify 'latest' to pull\nthe latest version (might be untested).",
                    "type": "string"
                },
                "registryRoleAwsManagedPolicies": {
                    "description": "AWS managed policies which will be granted to the Nifi cluster role for access to AWS services.",
                    "items": {
                        "$ref": "#/definitions/AwsManagedPolicySpec"
                    },
                    "type": "array"
                },
                "registryRoleManagedPolicies": {
                    "description": "Customer managed policies which will be granted to the Nifi cluster role for access to AWS services.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "securityGroupIngressIPv4s": {
                    "description": "IPv4 CIDRs which will be provided ingress access to the Nifi cluster security group.\nThese may also be specified globally.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "securityGroupIngressSGs": {
                    "description": "Security groups which will be provided ingress access to the Nifi cluster security group.\nThese may also be specified globally.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "adminIdentities"
            ],
            "type": "object"
        },
        "NifiSamlProps": {
            "additionalProperties": false,
            "properties": {
                "idpMetadataUrl": {
                    "description": "URL from which the IDP SAML Metadata is available.",
                    "type": "string"
                }
            },
            "required": [
                "idpMetadataUrl"
            ],
            "type": "object"
        },
        "PolicyAction": {
            "enum": [
                "DELETE",
                "READ",
                "WRITE"
            ],
            "type": "string"
        },
        "PolicyStatement": {
            "additionalProperties": false,
            "description": "Represents a statement in an IAM policy document.",
            "properties": {
                "_action": {},
                "_condition": {},
                "_effect": {},
                "_frozen": {},
                "_notAction": {},
                "_notPrincipal": {},
                "_notPrincipals": {},
                "_notResource": {},
                "_principal": {},
                "_principals": {},
                "_resource": {},
                "_sid": {},
                "actions": {
                    "description": "The Actions added to this statement",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "addPrincipalConditions": {
                    "description": "Add a principal's conditions\n\nFor convenience, principals have been modeled as both a principal\nand a set of conditions. This makes it possible to have a single\nobject represent e.g. an \"SNS Topic\" (SNS service principal + aws:SourcArn\ncondition) or an Organization member (* + aws:OrgId condition).\n\nHowever, when using multiple principals in the same policy statement,\nthey must all have the same conditions or the OR samentics\nimplied by a list of principals cannot be guaranteed (user needs to\nadd multiple statements in that case)."
                },
                "assertNotFrozen": {
                    "description": "Throw an exception when the object is frozen"
                },
                "conditions": {
                    "description": "The conditions added to this statement"
                },
                "effect": {
                    "$ref": "#/definitions/Effect",
                    "description": "Whether to allow or deny the actions in this statement\nSet effect for this statement"
                },
                "frozen": {
                    "description": "Whether the PolicyStatement has been frozen\n\nThe statement object is frozen when `freeze()` is called.",
                    "type": "boolean"
                },
                "hasPrincipal": {
                    "description": "Indicates if this permission has a \"Principal\" section.",
                    "type": "boolean"
                },
                "hasResource": {
                    "description": "Indicates if this permission has at least one resource associated with it.",
                    "type": "boolean"
                },
                "notActions": {
                    "description": "The NotActions added to this statement",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "notPrincipals": {
                    "description": "The NotPrincipals added to this statement",
                    "items": {
                        "$ref": "#/definitions/IPrincipal"
                    },
                    "type": "array"
                },
                "notResources": {
                    "description": "The NotResources added to this statement",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "principalConditionsJson": {},
                "principals": {
                    "description": "The Principals added to this statement",
                    "items": {
                        "$ref": "#/definitions/IPrincipal"
                    },
                    "type": "array"
                },
                "resources": {
                    "description": "The Resources added to this statement",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sid": {
                    "description": "Statement ID for this statement\nSet Statement ID for this statement",
                    "type": "string"
                },
                "validatePolicyActions": {},
                "validatePolicyPrincipal": {}
            },
            "required": [
                "_action",
                "_condition",
                "_effect",
                "_frozen",
                "_notAction",
                "_notPrincipal",
                "_notPrincipals",
                "_notResource",
                "_principal",
                "_principals",
                "_resource",
                "actions",
                "addPrincipalConditions",
                "assertNotFrozen",
                "conditions",
                "effect",
                "frozen",
                "hasPrincipal",
                "hasResource",
                "notActions",
                "notPrincipals",
                "notResources",
                "principals",
                "resources",
                "validatePolicyActions",
                "validatePolicyPrincipal"
            ],
            "type": "object"
        },
        "PrincipalPolicyFragment": {
            "additionalProperties": false,
            "description": "A collection of the fields in a PolicyStatement that can be used to identify a principal.\n\nThis consists of the JSON used in the \"Principal\" field, and optionally a\nset of \"Condition\"s that need to be applied to the policy.\n\nGenerally, a principal looks like:\n\n    { '<TYPE>': ['ID', 'ID', ...] }\n\nAnd this is also the type of the field `principalJson`.  However, there is a\nspecial type of principal that is just the string '*', which is treated\ndifferently by some services. To represent that principal, `principalJson`\nshould contain `{ 'LiteralString': ['*'] }`.",
            "properties": {
                "conditions": {
                    "$ref": "#/definitions/Conditions",
                    "description": "The conditions under which the policy is in effect.\nSee [the IAM documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html)."
                },
                "principalJson": {
                    "additionalProperties": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": "object"
                }
            },
            "required": [
                "conditions",
                "principalJson"
            ],
            "type": "object"
        },
        "RegexAppliesTo": {
            "additionalProperties": false,
            "description": "A regular expression to apply to matching findings",
            "properties": {
                "regex": {
                    "description": "An ECMA-262 regex string",
                    "type": "string"
                }
            },
            "required": [
                "regex"
            ],
            "type": "object"
        }
    },
    "properties": {
        "deploymentRole": {
            "type": "string"
        },
        "kmsArn": {
            "type": "string"
        },
        "nag_suppressions": {
            "$ref": "#/definitions/MdaaNagSuppressionConfigs",
            "description": "Nag suppressions"
        },
        "nifi": {
            "$ref": "#/definitions/NifiProps"
        },
        "projectBucket": {
            "type": "string"
        },
        "projectName": {
            "description": "Name of the DataOps Project",
            "type": "string"
        },
        "projectTopicArn": {
            "type": "string"
        },
        "securityConfigurationName": {
            "type": "string"
        },
        "service_catalog_product_config": {
            "$ref": "#/definitions/MdaaServiceCatalogProductConfig",
            "description": "Service Catalog Config\nIf specified, the configured module will be deployed as a Service Catalog product instead of directly to the environment"
        }
    },
    "required": [
        "deploymentRole",
        "kmsArn",
        "nifi",
        "projectBucket",
        "projectName",
        "projectTopicArn",
        "securityConfigurationName"
    ],
    "type": "object"
}

