{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
        "CfnParameterProps": {
            "additionalProperties": false,
            "properties": {
                "allowedPattern": {
                    "default": "- No constraints on patterns allowed for parameter.",
                    "description": "A regular expression that represents the patterns to allow for String types.",
                    "type": "string"
                },
                "allowedValues": {
                    "default": "- No constraints on values allowed for parameter.",
                    "description": "An array containing the list of values allowed for the parameter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "constraintDescription": {
                    "default": "- No description with customized error message when user specifies invalid values.",
                    "description": "A string that explains a constraint when the constraint is violated.\nFor example, without a constraint description, a parameter that has an allowed\npattern of [A-Za-z0-9]+ displays the following error message when the user specifies\nan invalid value:",
                    "type": "string"
                },
                "default": {
                    "default": "- No default value for parameter.",
                    "description": "A value of the appropriate type for the template to use if no value is specified\nwhen a stack is created. If you define constraints for the parameter, you must specify\na value that adheres to those constraints."
                },
                "description": {
                    "default": "- No description for the parameter.",
                    "description": "A string of up to 4000 characters that describes the parameter.",
                    "type": "string"
                },
                "maxLength": {
                    "default": "- None.",
                    "description": "An integer value that determines the largest number of characters you want to allow for String types.",
                    "type": "number"
                },
                "maxValue": {
                    "default": "- None.",
                    "description": "A numeric value that determines the largest numeric value you want to allow for Number types.",
                    "type": "number"
                },
                "minLength": {
                    "default": "- None.",
                    "description": "An integer value that determines the smallest number of characters you want to allow for String types.",
                    "type": "number"
                },
                "minValue": {
                    "default": "- None.",
                    "description": "A numeric value that determines the smallest numeric value you want to allow for Number types.",
                    "type": "number"
                },
                "noEcho": {
                    "default": "- Parameter values are not masked.",
                    "description": "Whether to mask the parameter value when anyone makes a call that describes the stack.\nIf you set the value to ``true``, the parameter value is masked with asterisks (``*****``).",
                    "type": "boolean"
                },
                "type": {
                    "default": "String",
                    "description": "The data type for the parameter (DataType).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DatabaseUsersProps": {
            "additionalProperties": false,
            "properties": {
                "dbName": {
                    "description": "The DB to which the user will be added",
                    "type": "string"
                },
                "excludeCharacters": {
                    "description": "Characters to exclude in the password",
                    "type": "string"
                },
                "secretAccessRoles": {
                    "description": "List of roles that need redshift secret access",
                    "items": {
                        "$ref": "#/definitions/MdaaRoleRef"
                    },
                    "type": "array"
                },
                "secretRotationDays": {
                    "description": "Number of days between secret rotation",
                    "type": "number"
                },
                "userName": {
                    "description": "Name of the execution role",
                    "type": "string"
                }
            },
            "required": [
                "dbName",
                "secretRotationDays",
                "userName"
            ],
            "type": "object"
        },
        "EventCategories": {
            "enum": [
                "configuration",
                "management",
                "monitoring",
                "pending",
                "security"
            ],
            "type": "string"
        },
        "EventNotificationsProps": {
            "additionalProperties": false,
            "properties": {
                "email": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "eventCategories": {
                    "items": {
                        "$ref": "#/definitions/EventCategories"
                    },
                    "type": "array"
                },
                "severity": {
                    "enum": [
                        "ERROR",
                        "INFO"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FederationProps": {
            "additionalProperties": false,
            "properties": {
                "federationName": {
                    "description": "Name of the federation for reference elsewhere in the config.",
                    "type": "string"
                },
                "providerArn": {
                    "description": "Arn of the IAM Identity Provider through which federation will occur",
                    "type": "string"
                },
                "url": {
                    "description": "Deprecated. No Longer used.",
                    "type": "string"
                }
            },
            "required": [
                "federationName",
                "providerArn"
            ],
            "type": "object"
        },
        "MdaaNagSuppressionByPath": {
            "additionalProperties": false,
            "properties": {
                "path": {
                    "type": "string"
                },
                "suppressions": {
                    "items": {
                        "additionalProperties": false,
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "reason": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "reason"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "path",
                "suppressions"
            ],
            "type": "object"
        },
        "MdaaNagSuppressionConfigs": {
            "additionalProperties": false,
            "properties": {
                "by_path": {
                    "items": {
                        "$ref": "#/definitions/MdaaNagSuppressionByPath"
                    },
                    "type": "array"
                }
            },
            "required": [
                "by_path"
            ],
            "type": "object"
        },
        "MdaaRoleRef": {
            "additionalProperties": false,
            "description": "A reference to an IAM role. Roles can be referenced by name, arn, and/or id.",
            "properties": {
                "arn": {
                    "description": "Reference role by arn",
                    "type": "string"
                },
                "id": {
                    "description": "Reference role by id",
                    "type": "string"
                },
                "immutable": {
                    "description": "Indicates whether the role should be considered immutable (defaults false)",
                    "type": "boolean"
                },
                "name": {
                    "description": "Reference role by name",
                    "type": "string"
                },
                "refId": {
                    "description": "A string which uniquely identifies the MdaaRoleRef within a scope.",
                    "type": "string"
                },
                "sso": {
                    "description": "If true, role name will be resolved to an SSO auto-generated role. Also implies immutability.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "MdaaServiceCatalogConstraintConfig": {
            "additionalProperties": false,
            "properties": {
                "description": {
                    "type": "string"
                },
                "rules": {
                    "additionalProperties": {
                        "$ref": "#/definitions/MdaaServiceCatalogConstraintRuleConfig"
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "rules"
            ],
            "type": "object"
        },
        "MdaaServiceCatalogConstraintRuleAssertionConfig": {
            "additionalProperties": false,
            "properties": {
                "assert": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            },
            "required": [
                "assert",
                "description"
            ],
            "type": "object"
        },
        "MdaaServiceCatalogConstraintRuleCondititionConfig": {
            "additionalProperties": false,
            "type": "object"
        },
        "MdaaServiceCatalogConstraintRuleConfig": {
            "additionalProperties": false,
            "properties": {
                "assertions": {
                    "items": {
                        "$ref": "#/definitions/MdaaServiceCatalogConstraintRuleAssertionConfig"
                    },
                    "type": "array"
                },
                "condition": {
                    "$ref": "#/definitions/MdaaServiceCatalogConstraintRuleCondititionConfig"
                }
            },
            "required": [
                "assertions",
                "condition"
            ],
            "type": "object"
        },
        "MdaaServiceCatalogParameterConfig": {
            "additionalProperties": false,
            "properties": {
                "constraints": {
                    "$ref": "#/definitions/MdaaServiceCatalogConstraintConfig"
                },
                "props": {
                    "$ref": "#/definitions/CfnParameterProps"
                }
            },
            "required": [
                "props"
            ],
            "type": "object"
        },
        "MdaaServiceCatalogProductConfig": {
            "additionalProperties": false,
            "properties": {
                "launch_role_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "parameters": {
                    "additionalProperties": {
                        "$ref": "#/definitions/MdaaServiceCatalogParameterConfig"
                    },
                    "type": "object"
                },
                "portfolio_arn": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "owner",
                "portfolio_arn"
            ],
            "type": "object"
        },
        "Record<string,string>": {
            "additionalProperties": false,
            "type": "object"
        },
        "ScheduledActionProps": {
            "additionalProperties": false,
            "properties": {
                "enable": {
                    "description": "Scheduled action is enabled if true",
                    "type": "boolean"
                },
                "endTime": {
                    "description": "The scheduled action Start Date & Time in UTC format till when the scheduled action is effective.",
                    "type": "string"
                },
                "name": {
                    "description": "Named of the scheduled action",
                    "type": "string"
                },
                "schedule": {
                    "description": "The scheduled action schedule in cron format",
                    "type": "string"
                },
                "startTime": {
                    "description": "The scheduled action Start Date & Time in UTC format from when the scheduled action is effective.",
                    "type": "string"
                },
                "targetAction": {
                    "description": "One of \"pauseCluster\", \"resumeCluster\"",
                    "type": "string"
                }
            },
            "required": [
                "enable",
                "name",
                "schedule",
                "targetAction"
            ],
            "type": "object"
        }
    },
    "properties": {
        "additionalBucketKmsKeyArns": {
            "description": "Additional KMS keys which can be used to write to the cluster bucket",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "adminPasswordRotationDays": {
            "description": "Set the number of days between admin password rotations",
            "type": "number"
        },
        "adminUsername": {
            "description": "Set the admin username for the cluster",
            "type": "string"
        },
        "automatedSnapshotRetentionDays": {
            "description": "Number of days that automated snapshots are retained",
            "type": "number"
        },
        "clusterPort": {
            "description": "The cluster port (default: 54390)",
            "type": "number"
        },
        "createWarehouseBucket": {
            "description": "If true(default), a Data Warehouse bucket will be created",
            "type": "boolean"
        },
        "dataAdminRoles": {
            "description": "List of admin roles which will be provided access to cluster resources (like KMS/Bucket)",
            "items": {
                "$ref": "#/definitions/MdaaRoleRef"
            },
            "type": "array"
        },
        "databaseUsers": {
            "description": "List of Users to be created in Redshift Database, then stored & rotated in secrets manager -> ssm",
            "items": {
                "$ref": "#/definitions/DatabaseUsersProps"
            },
            "type": "array"
        },
        "dbName": {
            "description": "database name for the db to be created. defaults to \"default_db\"",
            "type": "string"
        },
        "enableAuditLoggingToS3": {
            "description": "If enabled, cluster audit logging will be written to an S3 bucket created for this purpose.\nNote that Redshift supports audit logging only to SSE-S3 encrypted buckets, so this audit bucket\nwill not be created with SSE-KMS or use a customer master key.",
            "type": "boolean"
        },
        "eventNotifications": {
            "$ref": "#/definitions/EventNotificationsProps",
            "description": "Configuration of cluster and scheduled action event notifications"
        },
        "executionRoles": {
            "description": "List of external roles which will be associated to the redshift cluster\nIf a role requires access to datawarehouse bucket, then role should be added to 'warehouseBucketUserRoles' in application config",
            "items": {
                "$ref": "#/definitions/MdaaRoleRef"
            },
            "type": "array"
        },
        "federations": {
            "description": "List of federations/roles to be created for federated access to the cluster",
            "items": {
                "$ref": "#/definitions/FederationProps"
            },
            "type": "array"
        },
        "multiNode": {
            "description": "If true, cluster will be of type MULTI_NODE, otherwise SINGLE_NODE",
            "type": "boolean"
        },
        "nag_suppressions": {
            "$ref": "#/definitions/MdaaNagSuppressionConfigs",
            "description": "Nag suppressions"
        },
        "nodeType": {
            "description": "Node type of the cluster.",
            "type": "string"
        },
        "numberOfNodes": {
            "description": "Number of cluster nodes",
            "type": "number"
        },
        "parameterGroupParams": {
            "$ref": "#/definitions/Record<string,string>",
            "description": "Additional parameters for the cluster parameter group. Certain security-sensitive values will be overridden."
        },
        "preferredMaintenanceWindow": {
            "description": "The preferred maintenance window for the cluster\nExample: 'Sun:23:45-Mon:00:15'",
            "type": "string"
        },
        "redshiftManageMasterPassword": {
            "type": "boolean"
        },
        "scheduledActions": {
            "description": "List of scheduled actions (pause,resume) which can be applied to the cluster",
            "items": {
                "$ref": "#/definitions/ScheduledActionProps"
            },
            "type": "array"
        },
        "securityGroupIngress": {
            "additionalProperties": false,
            "description": "Additional ingress rules to be added to the cluster security group, permitting tcp traffic on the cluster port",
            "properties": {
                "ipv4": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sg": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "service_catalog_product_config": {
            "$ref": "#/definitions/MdaaServiceCatalogProductConfig",
            "description": "Service Catalog Config\nIf specified, the configured module will be deployed as a Service Catalog product instead of directly to the environment"
        },
        "snapshotIdentifier": {
            "description": "SnapshotIdentifier id, if restoring the cluster from snapshot\nOptional - only provide this if restoring from snapshot",
            "type": "string"
        },
        "snapshotOwnerAccount": {
            "description": "ownerAccount Refers to snapshot owner account. Applicable if restoring the cluster from snapshot and snapshot belongs to another account\nOptional - By default, snapshots are searched within current account",
            "type": "number"
        },
        "subnetIds": {
            "description": "The ID of the subnets on which the cluster will be deployed.",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "vpcId": {
            "description": "The ID of the VPC on which the cluster will be deployed.",
            "type": "string"
        },
        "warehouseBucketUserRoles": {
            "description": "List of user roles which will be provided access to cluster resources (like KMS/Bucket)",
            "items": {
                "$ref": "#/definitions/MdaaRoleRef"
            },
            "type": "array"
        },
        "workloadManagement": {
            "description": "The cluster workload management configuration.",
            "items": {
                "additionalProperties": {},
                "type": "object"
            },
            "type": "array"
        }
    },
    "required": [
        "adminPasswordRotationDays",
        "adminUsername",
        "dataAdminRoles",
        "enableAuditLoggingToS3",
        "nodeType",
        "numberOfNodes",
        "preferredMaintenanceWindow",
        "securityGroupIngress",
        "subnetIds",
        "vpcId"
    ],
    "type": "object"
}

