{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
        "BlockDeviceProps": {
            "additionalProperties": false,
            "properties": {
                "deviceName": {
                    "description": "Name of dievice to be mapped\nfor Linux",
                    "type": "string"
                },
                "ebsType": {
                    "description": "Type of EBS to use for root volume.\nPossible choices below",
                    "enum": [
                        "gp2",
                        "gp3",
                        "io1",
                        "io2",
                        "sc1",
                        "st1",
                        "standard"
                    ],
                    "type": "string"
                },
                "iops": {
                    "description": "The number of I/O operations per second (IOPS). \nThis parameter is required for io1 and io2 volumes.",
                    "type": "number"
                },
                "volumeSizeInGb": {
                    "description": "Size of ebs volume",
                    "type": "number"
                }
            },
            "required": [
                "deviceName",
                "volumeSizeInGb"
            ],
            "type": "object"
        },
        "CaefCidrPeer": {
            "additionalProperties": false,
            "properties": {
                "cidr": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "port": {
                    "type": "number"
                },
                "protocol": {
                    "type": "string"
                },
                "suppressions": {
                    "items": {
                        "$ref": "#/definitions/NagSuppressionProps"
                    },
                    "type": "array"
                },
                "toPort": {
                    "type": "number"
                }
            },
            "required": [
                "cidr",
                "protocol"
            ],
            "type": "object"
        },
        "CaefNagSuppressionByPath": {
            "additionalProperties": false,
            "properties": {
                "path": {
                    "type": "string"
                },
                "suppressions": {
                    "items": {
                        "additionalProperties": false,
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "reason": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "reason"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "path",
                "suppressions"
            ],
            "type": "object"
        },
        "CaefNagSuppressions": {
            "additionalProperties": false,
            "properties": {
                "by_path": {
                    "items": {
                        "$ref": "#/definitions/CaefNagSuppressionByPath"
                    },
                    "type": "array"
                }
            },
            "required": [
                "by_path"
            ],
            "type": "object"
        },
        "CaefPrefixListPeer": {
            "additionalProperties": false,
            "properties": {
                "description": {
                    "type": "string"
                },
                "port": {
                    "type": "number"
                },
                "prefixList": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "suppressions": {
                    "items": {
                        "$ref": "#/definitions/NagSuppressionProps"
                    },
                    "type": "array"
                },
                "toPort": {
                    "type": "number"
                }
            },
            "required": [
                "prefixList",
                "protocol"
            ],
            "type": "object"
        },
        "CaefRoleRef": {
            "additionalProperties": false,
            "description": "A reference to an IAM role. Roles can be referenced by name, arn, and/or id.",
            "properties": {
                "arn": {
                    "description": "Reference role by arn",
                    "type": "string"
                },
                "id": {
                    "description": "Reference role by id",
                    "type": "string"
                },
                "immutable": {
                    "description": "Indicates whether the role should be considered immutable (defaults false)",
                    "type": "boolean"
                },
                "name": {
                    "description": "Reference role by name",
                    "type": "string"
                },
                "refId": {
                    "description": "A string which uniquely identifies the CaefRoleRef within a scope.",
                    "type": "string"
                },
                "sso": {
                    "description": "If true, role name will be resolved to an SSO auto-generated role. Also implies immutability.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CaefSecurityGroupPeer": {
            "additionalProperties": false,
            "properties": {
                "description": {
                    "type": "string"
                },
                "port": {
                    "type": "number"
                },
                "protocol": {
                    "type": "string"
                },
                "sgId": {
                    "type": "string"
                },
                "suppressions": {
                    "items": {
                        "$ref": "#/definitions/NagSuppressionProps"
                    },
                    "type": "array"
                },
                "toPort": {
                    "type": "number"
                }
            },
            "required": [
                "protocol",
                "sgId"
            ],
            "type": "object"
        },
        "CaefSecurityGroupRuleProps": {
            "additionalProperties": false,
            "properties": {
                "ipv4": {
                    "items": {
                        "$ref": "#/definitions/CaefCidrPeer"
                    },
                    "type": "array"
                },
                "prefixList": {
                    "items": {
                        "$ref": "#/definitions/CaefPrefixListPeer"
                    },
                    "type": "array"
                },
                "sg": {
                    "items": {
                        "$ref": "#/definitions/CaefSecurityGroupPeer"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "CaefServiceCatalogConstraintConfig": {
            "additionalProperties": false,
            "properties": {
                "description": {
                    "type": "string"
                },
                "rules": {
                    "additionalProperties": {
                        "$ref": "#/definitions/CaefServiceCatalogConstraintRuleConfig"
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "rules"
            ],
            "type": "object"
        },
        "CaefServiceCatalogConstraintRuleAssertionConfig": {
            "additionalProperties": false,
            "properties": {
                "assert": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            },
            "required": [
                "assert",
                "description"
            ],
            "type": "object"
        },
        "CaefServiceCatalogConstraintRuleCondititionConfig": {
            "additionalProperties": false,
            "type": "object"
        },
        "CaefServiceCatalogConstraintRuleConfig": {
            "additionalProperties": false,
            "properties": {
                "assertions": {
                    "items": {
                        "$ref": "#/definitions/CaefServiceCatalogConstraintRuleAssertionConfig"
                    },
                    "type": "array"
                },
                "condition": {
                    "$ref": "#/definitions/CaefServiceCatalogConstraintRuleCondititionConfig"
                }
            },
            "required": [
                "assertions",
                "condition"
            ],
            "type": "object"
        },
        "CaefServiceCatalogParameterConfig": {
            "additionalProperties": false,
            "properties": {
                "constraints": {
                    "$ref": "#/definitions/CaefServiceCatalogConstraintConfig"
                },
                "props": {
                    "$ref": "#/definitions/CfnParameterProps"
                }
            },
            "required": [
                "props"
            ],
            "type": "object"
        },
        "CaefServiceCatalogProductConfig": {
            "additionalProperties": false,
            "properties": {
                "launch_role_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "parameters": {
                    "additionalProperties": {
                        "$ref": "#/definitions/CaefServiceCatalogParameterConfig"
                    },
                    "type": "object"
                },
                "portfolio_arn": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "owner",
                "portfolio_arn"
            ],
            "type": "object"
        },
        "CfnParameterProps": {
            "additionalProperties": false,
            "properties": {
                "allowedPattern": {
                    "default": "- No constraints on patterns allowed for parameter.",
                    "description": "A regular expression that represents the patterns to allow for String types.",
                    "type": "string"
                },
                "allowedValues": {
                    "default": "- No constraints on values allowed for parameter.",
                    "description": "An array containing the list of values allowed for the parameter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "constraintDescription": {
                    "default": "- No description with customized error message when user specifies invalid values.",
                    "description": "A string that explains a constraint when the constraint is violated.\nFor example, without a constraint description, a parameter that has an allowed\npattern of [A-Za-z0-9]+ displays the following error message when the user specifies\nan invalid value:",
                    "type": "string"
                },
                "default": {
                    "default": "- No default value for parameter.",
                    "description": "A value of the appropriate type for the template to use if no value is specified\nwhen a stack is created. If you define constraints for the parameter, you must specify\na value that adheres to those constraints."
                },
                "description": {
                    "default": "- No description for the parameter.",
                    "description": "A string of up to 4000 characters that describes the parameter.",
                    "type": "string"
                },
                "maxLength": {
                    "default": "- None.",
                    "description": "An integer value that determines the largest number of characters you want to allow for String types.",
                    "type": "number"
                },
                "maxValue": {
                    "default": "- None.",
                    "description": "A numeric value that determines the largest numeric value you want to allow for Number types.",
                    "type": "number"
                },
                "minLength": {
                    "default": "- None.",
                    "description": "An integer value that determines the smallest number of characters you want to allow for String types.",
                    "type": "number"
                },
                "minValue": {
                    "default": "- None.",
                    "description": "A numeric value that determines the smallest numeric value you want to allow for Number types.",
                    "type": "number"
                },
                "noEcho": {
                    "default": "- Parameter values are not masked.",
                    "description": "Whether to mask the parameter value when anyone makes a call that describes the stack.\nIf you set the value to ``true``, the parameter value is masked with asterisks (``*****``).",
                    "type": "boolean"
                },
                "type": {
                    "default": "String",
                    "description": "The data type for the parameter (DataType).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CommandProps": {
            "additionalProperties": false,
            "properties": {
                "argvs": {
                    "description": "list of args that needs to be run as argvs, either shell command or argvs should be provided.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "env": {
                    "$ref": "#/definitions/NamedEnvProps",
                    "description": "Sets environment variables for the command.\nThis property overwrites, rather than appends, the existing environment."
                },
                "ignoreErrors": {
                    "description": "Continue running if this command fails. default is false",
                    "type": "boolean"
                },
                "restartRequired": {
                    "description": "Restart the given service(s) after this command has run, default: Do not restart any service",
                    "type": "boolean"
                },
                "shellCommand": {
                    "description": "Shell command that needs to be run, either shell command or argvs should be provided.",
                    "type": "string"
                },
                "testCommand": {
                    "description": "Command to determine whether this command should be run.\nIf the test passes (exits with error code of 0), the command is run.",
                    "type": "string"
                },
                "waitAfterCompletion": {
                    "description": "The duration in minutes to wait after a command has finished in case the command causes a reboot.\nSet this value to InitCommandWaitDuration.none() if you do not want to wait for every command; InitCommandWaitDuration.forever() directs cfn-init to exit and resume only after the reboot is complete.\nFor Windows systems only.\nDefault is 1 minute",
                    "type": "number"
                },
                "waitForever": {
                    "description": "cfn-init will exit and resume only after a reboot.\nChoose either waitAfterCompletion waitForever or waitNone, If choose none of these >> default wait time will be 1 minute",
                    "type": "boolean"
                },
                "waitNone": {
                    "description": "Do not wait for this command.\nChoose either waitAfterCompletion waitForever or waitNone, If choose none of these >> default wait time will be 1 minute",
                    "type": "boolean"
                },
                "workingDir": {
                    "description": "dir where command needs to be run.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ConfigProps": {
            "additionalProperties": false,
            "properties": {
                "commands": {
                    "$ref": "#/definitions/NamedCommandProps",
                    "description": "You can use the commands key to run commands on the EC2 instance. \nThe commands are processed in alphabetical order by name."
                },
                "files": {
                    "$ref": "#/definitions/NamedFileProps",
                    "description": "You can use the files key to create files on the EC2 instance. \nContent is pulled from a given file"
                },
                "groups": {
                    "$ref": "#/definitions/NamedGroupProps",
                    "description": "You can use the groups key to create Linux/UNIX groups and to assign group IDs. The groups key isn't supported for Windows systems."
                },
                "packages": {
                    "$ref": "#/definitions/NamedPackageProps",
                    "description": "You can use the packages key to download and install pre-packaged applications and components. On Windows systems, the packages key supports only the MSI installer.\nThe cfn-init script currently supports the following package formats: apt, msi, python, rpm, rubygems, yum, and Zypper."
                },
                "services": {
                    "$ref": "#/definitions/NamedServiceProps",
                    "description": "You can use the services key to define which services should be enabled or disabled when the instance is launched.\nOn Linux systems, this key is supported by using sysvinit or systemd.\nOn Windows systems, it's supported by using the Windows service manager."
                },
                "sources": {
                    "$ref": "#/definitions/NamedSourceProps",
                    "description": "You can use the sources key to download an archive file and unpack it in a target directory on the EC2 instance.\nThis key is fully supported for both Linux and Windows systems."
                },
                "users": {
                    "$ref": "#/definitions/NamedUserProps",
                    "description": "You can use the users key to create Linux/UNIX users on the EC2 instance. The users key isn't supported for Windows systems."
                }
            },
            "type": "object"
        },
        "ConfigSetsProps": {
            "additionalProperties": false,
            "properties": {
                "configs": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "configs"
            ],
            "type": "object"
        },
        "FileProps": {
            "additionalProperties": false,
            "properties": {
                "filePath": {
                    "description": "source file path",
                    "type": "string"
                },
                "restartRequired": {
                    "description": "Restart the given service(s) after this command has run, default: Do not restart any service",
                    "type": "boolean"
                }
            },
            "required": [
                "filePath"
            ],
            "type": "object"
        },
        "GroupProps": {
            "additionalProperties": false,
            "properties": {
                "gid": {
                    "description": "A group ID number\nIf a group ID is specified, and the group already exists by name, the group creation will fail. \nIf another group has the specified group ID, the OS may reject the group creation.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "InitOptionsProps": {
            "additionalProperties": false,
            "properties": {
                "configSets": {
                    "description": "ConfigSet to activate.\ndefault value is ['default']",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "embedFingerprint": {
                    "description": "Force instance replacement by embedding a config fingerprint.\nIf true (the default), a hash of the config will be embedded into the UserData, so that if the config changes, the UserData changes.\nIf the EC2 instance is instance-store backed or userDataCausesReplacement is set, this will cause the instance to be replaced and the new configuration to be applied.\nIf the instance is EBS-backed and userDataCausesReplacement is not set, the change of UserData will make the instance restart but not be replaced, and the configuration will not be applied automatically.\nIf false, no hash will be embedded, and if the CloudFormation Init config changes nothing will happen to the running instance. If a config update introduces errors, you will not notice until after the CloudFormation deployment successfully finishes and the next instance fails to launch.",
                    "type": "boolean"
                },
                "ignoreFailures": {
                    "description": "Don't fail the instance creation when cfn-init fails.\nYou can use this to prevent CloudFormation from rolling back when instances fail to start up, to help in debugging.",
                    "type": "boolean"
                },
                "includeRole": {
                    "description": "Include --role argument when running cfn-init and cfn-signal commands.\nThis will be the IAM instance profile attached to the EC2 instance",
                    "type": "boolean"
                },
                "includeUrl": {
                    "description": "Include --url argument when running cfn-init and cfn-signal commands.\nThis will be the cloudformation endpoint in the deployed region",
                    "type": "boolean"
                },
                "printLog": {
                    "description": "Print the results of running cfn-init to the Instance System Log.\nBy default, the output of running cfn-init is written to a log file on the instance.\nSet this to true to print it to the System Log (visible from the EC2 Console), false to not print it.\n(Be aware that the system log is refreshed at certain points in time of the instance life cycle, and successful execution may not always show up).",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "Timeout waiting for the configuration to be applied.\nin minutes\ndefault is 5 mins",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "InitProps": {
            "additionalProperties": false,
            "properties": {
                "configSets": {
                    "$ref": "#/definitions/NamedConfigSetsProps",
                    "description": "Set of configs in order they need to run"
                },
                "configs": {
                    "$ref": "#/definitions/NamedConfigProps",
                    "description": "list of configs"
                }
            },
            "required": [
                "configSets",
                "configs"
            ],
            "type": "object"
        },
        "InstanceProps": {
            "additionalProperties": false,
            "properties": {
                "amiId": {
                    "description": "AMI to launch.",
                    "type": "string"
                },
                "availabilityZone": {
                    "description": "In which AZ to place the instance within the VPC.",
                    "type": "string"
                },
                "blockDevices": {
                    "description": "list of configs for block device to be mapped to instance",
                    "items": {
                        "$ref": "#/definitions/BlockDeviceProps"
                    },
                    "type": "array"
                },
                "creationTimeOut": {
                    "description": "Timeout for creation policy .",
                    "type": "string"
                },
                "existingKeyPairName": {
                    "description": "Name of existing SSH keypair to grant access to instance.",
                    "type": "string"
                },
                "init": {
                    "$ref": "#/definitions/InitProps",
                    "description": "Apply the given CloudFormation Init configuration to the instance at startup.\nFor Linux"
                },
                "initName": {
                    "description": "Name of init to be implemented , name can be referred from init object in config",
                    "type": "string"
                },
                "initOptions": {
                    "$ref": "#/definitions/InitOptionsProps",
                    "description": "Use the given options for applying CloudFormation Init."
                },
                "instanceRole": {
                    "$ref": "#/definitions/CaefRoleRef",
                    "description": "Role used by instance"
                },
                "instanceType": {
                    "description": "Type of instance to launch.",
                    "type": "string"
                },
                "keyPairName": {
                    "description": "Name of SSH keypair (created by this construct) to grant access to instance.",
                    "type": "string"
                },
                "kmsKeyArn": {
                    "description": "Specific key to use.",
                    "type": "string"
                },
                "osType": {
                    "description": "Type of OS for the AMI.",
                    "enum": [
                        "linux",
                        "unknown",
                        "windows"
                    ],
                    "type": "string"
                },
                "securityGroup": {
                    "type": "string"
                },
                "securityGroupId": {
                    "type": "string"
                },
                "signalCount": {
                    "description": "count of Successful signals required for creation policy .",
                    "type": "number"
                },
                "sourceDestCheck": {
                    "description": "Specifies whether to enable an instance launched in a VPC to perform NAT.",
                    "type": "boolean"
                },
                "subnetId": {
                    "description": "Where to place the instance within the VPC.",
                    "type": "string"
                },
                "userDataCausesReplacement": {
                    "description": "Changes to the UserData force replacement.\nDepending the EC2 instance type, changing UserData either restarts the instance or replaces the instance.\nInstance store-backed instances are replaced.\nEBS-backed instances are restarted.\nBy default, restarting does not execute the new UserData so you will need a different mechanism to ensure the instance is restarted.\nSetting this to true will make the instance's Logical ID depend on the UserData, which will cause CloudFormation to replace it if the UserData changes.\ndefault: true iff initOptions is specified, false otherwise.",
                    "type": "boolean"
                },
                "userDataScriptPath": {
                    "description": "Specific UserData to use.",
                    "type": "string"
                },
                "vpcId": {
                    "description": "id of VPC to launch the instance in.",
                    "type": "string"
                }
            },
            "required": [
                "amiId",
                "availabilityZone",
                "blockDevices",
                "instanceRole",
                "instanceType",
                "osType",
                "subnetId",
                "vpcId"
            ],
            "type": "object"
        },
        "KeyPairProps": {
            "additionalProperties": false,
            "properties": {
                "kmsKeyArn": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NagSuppressionProps": {
            "additionalProperties": false,
            "properties": {
                "id": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            },
            "required": [
                "id",
                "reason"
            ],
            "type": "object"
        },
        "NamedCommandProps": {
            "additionalProperties": {
                "$ref": "#/definitions/CommandProps"
            },
            "type": "object"
        },
        "NamedConfigProps": {
            "additionalProperties": {
                "$ref": "#/definitions/ConfigProps"
            },
            "type": "object"
        },
        "NamedConfigSetsProps": {
            "additionalProperties": {
                "$ref": "#/definitions/ConfigSetsProps"
            },
            "type": "object"
        },
        "NamedEnvProps": {
            "additionalProperties": {
                "type": "string"
            },
            "type": "object"
        },
        "NamedFileProps": {
            "additionalProperties": {
                "$ref": "#/definitions/FileProps"
            },
            "type": "object"
        },
        "NamedGroupProps": {
            "additionalProperties": {
                "$ref": "#/definitions/GroupProps"
            },
            "type": "object"
        },
        "NamedInitProps": {
            "additionalProperties": {
                "$ref": "#/definitions/InitProps"
            },
            "type": "object"
        },
        "NamedInstanceProps": {
            "additionalProperties": {
                "$ref": "#/definitions/InstanceProps"
            },
            "type": "object"
        },
        "NamedKeyPairProps": {
            "additionalProperties": {
                "$ref": "#/definitions/KeyPairProps"
            },
            "type": "object"
        },
        "NamedPackageProps": {
            "additionalProperties": {
                "$ref": "#/definitions/PackageProps"
            },
            "type": "object"
        },
        "NamedSecurityGroupProps": {
            "additionalProperties": {
                "$ref": "#/definitions/SecurityGroupProps"
            },
            "type": "object"
        },
        "NamedServiceProps": {
            "additionalProperties": {
                "$ref": "#/definitions/ServiceProps"
            },
            "type": "object"
        },
        "NamedSourceProps": {
            "additionalProperties": {
                "$ref": "#/definitions/SourceProps"
            },
            "type": "object"
        },
        "NamedUserProps": {
            "additionalProperties": {
                "$ref": "#/definitions/UserProps"
            },
            "type": "object"
        },
        "PackageProps": {
            "additionalProperties": false,
            "properties": {
                "key": {
                    "description": "Identifier key for this package. part of LocationPackageOptions, for msi and rpm packages",
                    "type": "string"
                },
                "packageLocation": {
                    "description": "Package location\nto be provided for msi & rpm packages",
                    "type": "string"
                },
                "packageManager": {
                    "description": "Package Manager to be used\nAvailable package manager values: msi, rpm, gem, yum, python, apt",
                    "type": "string"
                },
                "packageName": {
                    "description": "Package name\nto be provided for gem, yum, python, apt packages",
                    "type": "string"
                },
                "packageVersions": {
                    "description": "Empty list if latest version is required\ndefault is latest",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "restartRequired": {
                    "description": "Restart the given service after this package is installed.",
                    "type": "boolean"
                }
            },
            "required": [
                "packageManager"
            ],
            "type": "object"
        },
        "SecurityGroupProps": {
            "additionalProperties": false,
            "properties": {
                "addSelfReferenceRule": {
                    "description": "If true, the SG will allow traffic to and from itself",
                    "type": "boolean"
                },
                "egressRules": {
                    "$ref": "#/definitions/CaefSecurityGroupRuleProps",
                    "description": "List of egress rules to be added to the function SG"
                },
                "ingressRules": {
                    "$ref": "#/definitions/CaefSecurityGroupRuleProps",
                    "description": "List of ingress rules to be added to the function SG"
                },
                "vpcId": {
                    "description": "id of VPC to launch the instance in.",
                    "type": "string"
                }
            },
            "required": [
                "vpcId"
            ],
            "type": "object"
        },
        "ServiceProps": {
            "additionalProperties": false,
            "properties": {
                "disabled": {
                    "description": "Disable and stop the given service",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "Set to true to ensure that the service will be started automatically upon boot.\nSet to false to ensure that the service won't be started automatically upon boot.\nOmit this key to make no changes to this property.",
                    "type": "boolean"
                },
                "ensureRunning": {
                    "description": "Set to true to ensure that the service is running after cfn-init finishes.\nSet to false to ensure that the service isn't running after cfn-init finishes.\nOmit this key to make no changes to the service state.",
                    "type": "boolean"
                },
                "restartRequired": {
                    "description": "Restart the given service(s) after this command has run, default: Do not restart any service",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SourceProps": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "description": "source location url",
                    "type": "string"
                }
            },
            "required": [
                "source"
            ],
            "type": "object"
        },
        "UserProps": {
            "additionalProperties": false,
            "properties": {
                "groups": {
                    "description": "A list of group names. The user will be added to each group in the list.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "homeDir": {
                    "description": "The user's home directory.",
                    "type": "string"
                },
                "uid": {
                    "description": "A user ID. \nThe creation process fails if the user name exists with a different user ID.\nIf the user ID is already assigned to an existing user the operating system may reject the creation request.",
                    "type": "string"
                }
            },
            "required": [
                "groups",
                "homeDir"
            ],
            "type": "object"
        }
    },
    "properties": {
        "adminRoles": {
            "description": "List of roles which will be granted access to the EC2 KMS Key\nand KeyPair Secrets",
            "items": {
                "$ref": "#/definitions/CaefRoleRef"
            },
            "type": "array"
        },
        "cfnInit": {
            "$ref": "#/definitions/NamedInitProps",
            "description": "List of  init objects to be created."
        },
        "instances": {
            "$ref": "#/definitions/NamedInstanceProps",
            "description": "List of ec2 instances to be launched."
        },
        "keyPairs": {
            "$ref": "#/definitions/NamedKeyPairProps",
            "description": "List of ec2 key pairs to be created."
        },
        "nag_suppressions": {
            "$ref": "#/definitions/CaefNagSuppressions",
            "description": "Nag suppressions"
        },
        "securityGroups": {
            "$ref": "#/definitions/NamedSecurityGroupProps",
            "description": "List of ec2 security groups to be created."
        },
        "service_catalog_product_config": {
            "$ref": "#/definitions/CaefServiceCatalogProductConfig",
            "description": "Service Catalog Config\nIf specified, the configured module will be deployed as a Service Catalog product instead of directly to the environment"
        }
    },
    "required": [
        "adminRoles"
    ],
    "type": "object"
}

