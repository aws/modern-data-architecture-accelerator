/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import { MdaaBucket } from '@aws-mdaa/s3-constructs';
import { Database } from '@aws-cdk/aws-glue-alpha';
import { CfnTable, CfnTableProps } from 'aws-cdk-lib/aws-glue';
import { Effect, PolicyStatement } from 'aws-cdk-lib/aws-iam';
import { IBucket, Inventory, InventoryFormat, InventoryFrequency, InventoryObjectVersion } from 'aws-cdk-lib/aws-s3';
import { Construct } from 'constructs';

export interface BucketInventory {
  bucketName: string;
  inventoryName: string;
}

/** Helper class for creating S3 Inventories and associated Glue/Athena resources for querying these inventories. */
export class InventoryHelper {
  /**
   * Helper method for creating an S3 inventory.
   * @param destinationBucket The bucket where S3 inventory data will be written
   * @param inventoryId The S3 inventory ID
   * @param objectsPrefix The object prefix from which inventory will be produced (on the bucket to which the inventory config is applied)
   * @param destinationPrefix The object prefix under which inventory will be written on the destination bucket.
   * @returns An S3 Inventory Config which can be applied to a bucket in order to produce periodic inventory data.
   */
  public static createInvConfig(
    destinationBucket: IBucket,
    inventoryId: string,
    objectsPrefix?: string,
    destinationPrefix?: string,
    destinationAccount?: string,
  ): Inventory {
    const bucketOwner = destinationAccount ? `${destinationAccount}` : destinationAccount;

    return {
      destination: {
        bucket: destinationBucket,
        prefix: MdaaBucket.formatS3Prefix(destinationPrefix),
        bucketOwner: bucketOwner,
      },
      format: InventoryFormat.PARQUET,
      frequency: InventoryFrequency.DAILY,
      includeObjectVersions: InventoryObjectVersion.ALL,
      inventoryId: inventoryId,
      objectsPrefix: MdaaBucket.formatS3Prefix(objectsPrefix, false, true),
      optionalFields: [
        'Size',
        'LastModifiedDate',
        'StorageClass',
        'ETag',
        'IsMultipartUploaded',
        'ReplicationStatus',
        'EncryptionStatus',
        'ObjectLockRetainUntilDate',
        'ObjectLockMode',
        'ObjectLockLegalHoldStatus',
        'IntelligentTieringAccessTier',
      ],
    };
  }

  /**
   * Helper method for creating a Glue table which can be used to query inventory data generated by an S3 Inventory config
   * @param scope Stack in which the table will be created
   * @param tableNamePrefix Will be used to prefix the table name.
   * @param locationBucketName The bucket where the inventory data is stored.
   * @param inventoryBucket The bucket for which inventory data has been generated
   * @param database The Glue database in which the table will be created
   * @param inventoryName The name of the S3 Inventory config
   * @param locationPrefix The S3 Prefix on the location bucket where the inventory is stored.
   * @returns A Glue table which can be used to query S3 inventory data in an S3 bucket.
   */
  public static createGlueInvTable(
    scope: Construct,
    catalogId: string,
    tableNamePrefix: string,
    database: Database,
    locationBucketName: string,
    bucketInventories: BucketInventory[],
    locationPrefix?: string,
  ): CfnTable {
    const location = locationPrefix
      ? `s3://${locationBucketName}/${MdaaBucket.formatS3Prefix(locationPrefix)}/`
      : `s3://${locationBucketName}/`;
    const tableInput = {
      name: `${tableNamePrefix}_inv`.replace(/-/gi, '_'),
      parameters: {
        EXTERNAL: 'TRUE',
        'projection.enabled': 'true',
        'projection.dt.type': 'date',
        'projection.dt.range': '2022-01-01-00-00,NOW',
        'projection.dt.format': 'yyyy-MM-dd-HH-mm',
        'projection.dt.interval': '1',
        'projection.dt.interval.unit': 'HOURS',
        'projection.bucket_inventory.type': 'enum',
        'projection.bucket_inventory.values': bucketInventories
          .map(x => `${x.bucketName}/${x.inventoryName}`)
          .join(','),
        'storage.location.template': location + '${bucket_inventory}/hive/dt=${dt}',
      },
      tableType: 'EXTERNAL_TABLE',
      partitionKeys: [
        {
          name: 'bucket_inventory',
          type: 'string',
        },
        {
          name: 'dt',
          type: 'string',
        },
      ],
      storageDescriptor: {
        columns: [
          {
            name: 'bucket',
            type: 'string',
          },
          {
            name: 'key',
            type: 'string',
          },
          {
            name: 'version_id',
            type: 'string',
          },
          {
            name: 'is_latest',
            type: 'boolean',
          },
          {
            name: 'is_delete_marker',
            type: 'boolean',
          },
          {
            name: 'size',
            type: 'bigint',
          },
          {
            name: 'last_modified_date',
            type: 'timestamp',
          },
          {
            name: 'e_tag',
            type: 'string',
          },
          {
            name: 'storage_class',
            type: 'string',
          },
          {
            name: 'is_multipart_uploaded',
            type: 'boolean',
          },
          {
            name: 'replication_status',
            type: 'string',
          },
          {
            name: 'encryption_status',
            type: 'string',
          },
          {
            name: 'intelligent_tiering_tier',
            type: 'string',
          },
          // ,
          // {
          //     name: "object_lock_retain_until_date",
          //     type: "timestamp"
          // },
          // {
          //     name: "object_lock_mode",
          //     type: "string"
          // },
          // {
          //     name: "object_lock_legal_hold_status",
          //     type: "string"
          // }
        ],
        location: location,
        inputFormat: 'org.apache.hadoop.hive.ql.io.SymlinkTextInputFormat',
        outputFormat: 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat',
        compressed: false,
        numberOfBuckets: -1,
        serdeInfo: {
          serializationLibrary: 'org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe',
          parameters: {
            'serialization.format': '1',
          },
        },
      },
    };

    const tableProps: CfnTableProps = {
      catalogId: catalogId,
      databaseName: database.databaseName,
      tableInput: tableInput,
    };
    return new CfnTable(scope, `inv-table-${tableNamePrefix}`, tableProps);
  }

  /**
   * Helper method to generate an S3 Bucket Policy Statement allowing S3 service to write inventories to a bucket.
   * @param sourceBucketArn The bucket arn for which inventory data is being produced
   * @param bucketArn  The bucket arn where inventory will be stored
   * @param srcAccount The account which owns the source bucket from which inventory is being produced.
   * @param inventoryPrefix The prefix on the destination bucket where inventory data will be stored.
   * @returns A policy statement which permits the S3 service principal to write inventory for the source bucket/account to the destination bucket.
   */
  public static createInventoryBucketPolicyStatement(
    bucketArn: string,
    srcAccount: string,
    sourceBucketArn?: string,
    inventoryPrefix?: string,
  ): PolicyStatement {
    const resource = inventoryPrefix
      ? `${bucketArn}/${MdaaBucket.formatS3Prefix(inventoryPrefix)}/*`
      : `${bucketArn}/*`;
    const allowS3Inventory = new PolicyStatement({
      sid: 'AllowS3Inventory',
      effect: Effect.ALLOW,
      resources: [resource],
      actions: ['s3:PutObject'],
    });
    allowS3Inventory.addCondition('StringEquals', {
      'aws:SourceAccount': srcAccount,
      's3:x-amz-acl': 'bucket-owner-full-control',
    });
    if (sourceBucketArn) {
      allowS3Inventory.addCondition('ArnLike', {
        'aws:SourceArn': sourceBucketArn,
      });
    }
    allowS3Inventory.addServicePrincipal('s3.amazonaws.com');
    return allowS3Inventory;
  }
}
