/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import { IMdaaKmsKey } from '@aws-mdaa/kms-constructs';
import { IMdaaResourceNaming } from '@aws-mdaa/naming';
import { IMdaaBucket } from '@aws-mdaa/s3-constructs';
import { DataFormat, IDatabase, Schema, S3Table } from '@aws-cdk/aws-glue-alpha';
import { ReadWriteType, Trail } from 'aws-cdk-lib/aws-cloudtrail';
import { CfnTable } from 'aws-cdk-lib/aws-glue';
import { IBucket } from 'aws-cdk-lib/aws-s3';
import { Construct } from 'constructs';

/** Helper class for generating CloudTrail audit resources for use with S3 data events. */
export class AuditHelper {
  /**
   * Helper method which creates an S3 Data Events CloudTrail.
   * @param scope The CDK scope in which the Trail resource will be created.
   * @param destinationBucket The destination bucket where the Trail will be written
   * @param encryptionKey The KMS CMK with which the trail data will be encrypted when written to S3
   * @param naming The MDAA Naming implementation which will be used to name the CloudTrail resources
   * @param trailName The name the CloudTrail. The full name will be generated by the MDAA Naming implementation
   * @param eventSelectors The set of bucket names and prefixes for which S3 data events will be captured. If not specified, the Trail will capture all S3 Data Events in the account.
   * @returns A CloudTrail which captures S3 Data Events.
   */
  public static createCloudTrail(
    scope: Construct,
    destinationBucket: IMdaaBucket,
    encryptionKey: IMdaaKmsKey,
    naming: IMdaaResourceNaming,
    trailName: string,
    includeManagementEvents?: boolean,
    eventSelectors?: { bucket: IBucket; objectPrefix?: string }[],
  ): Trail {
    //Create the trail
    const trail = new Trail(scope, `audit-trail-${trailName}`, {
      trailName: naming.resourceName(trailName),
      bucket: destinationBucket,
      encryptionKey: encryptionKey,
      isMultiRegionTrail: false,
      includeGlobalServiceEvents: false,
    });

    if (eventSelectors) {
      //Add the S3 Event selectors to the Trail
      eventSelectors.forEach(selector => {
        trail.addS3EventSelector(
          [
            {
              bucket: selector.bucket,
              objectPrefix: selector.objectPrefix,
            },
          ],
          {
            includeManagementEvents: includeManagementEvents != undefined && includeManagementEvents,
            readWriteType: ReadWriteType.ALL,
          },
        );
      });
    } else {
      trail.logAllS3DataEvents({
        includeManagementEvents: includeManagementEvents != undefined && includeManagementEvents,
        readWriteType: ReadWriteType.ALL,
      });
    }

    return trail;
  }

  /**
   * A helper method for generating a Glue table for querying CloudTrail audit events from an S3 bucket.
   * @param scope The scope in which the table will be created.
   * @param bucket The bucket where the CloudTrail data is stored
   * @param database The database where the table will be created
   * @param accounts The accounts for which CloudTrail data has been produced in the bucket.
   * @param regions The regions for which CloudTrail data has been produced in the bucket.
   * @returns A Glue Table which can be used to query CloudTrail data.
   */
  public static createGlueAuditTable(
    scope: Construct,
    bucket: IMdaaBucket,
    database: IDatabase,
    accounts: string[],
    regions: string[],
  ): S3Table {
    const location = `s3://${bucket.bucketName}/AWSLogs`;
    const cloudTrailTable = new S3Table(scope, 'CloudTrailGlueTable', {
      columns: [
        { name: 'eventversion', type: Schema.STRING },
        {
          name: 'useridentity',
          type: Schema.struct([
            { name: 'type', type: Schema.STRING },
            { name: 'principalid', type: Schema.STRING },
            { name: 'arn', type: Schema.STRING },
            { name: 'accountid', type: Schema.STRING },
            { name: 'invokedby', type: Schema.STRING },
            { name: 'accesskeyid', type: Schema.STRING },
            { name: 'userName', type: Schema.STRING },
            {
              name: 'sessioncontext',
              type: Schema.struct([
                {
                  name: 'attributes',
                  type: Schema.struct([
                    { name: 'mfaauthenticated', type: Schema.STRING },
                    { name: 'creationdate', type: Schema.STRING },
                  ]),
                },
                {
                  name: 'sessionissuer',
                  type: Schema.struct([
                    { name: 'type', type: Schema.STRING },
                    { name: 'principalId', type: Schema.STRING },
                    { name: 'arn', type: Schema.STRING },
                    { name: 'accountId', type: Schema.STRING },
                    { name: 'userName', type: Schema.STRING },
                  ]),
                },
              ]),
            },
          ]),
        },
        { name: 'eventtime', type: Schema.STRING },
        { name: 'eventsource', type: Schema.STRING },
        { name: 'eventname', type: Schema.STRING },
        { name: 'awsregion', type: Schema.STRING },
        { name: 'sourceipaddress', type: Schema.STRING },
        { name: 'useragent', type: Schema.STRING },
        { name: 'errorcode', type: Schema.STRING },
        { name: 'errormessage', type: Schema.STRING },
        { name: 'requestparameters', type: Schema.STRING },
        { name: 'responseelements', type: Schema.STRING },
        { name: 'additionaleventdata', type: Schema.STRING },
        { name: 'requestid', type: Schema.STRING },
        { name: 'eventid', type: Schema.STRING },
        {
          name: 'resources',
          type: Schema.array(
            Schema.struct([
              { name: 'ARN', type: Schema.STRING },
              { name: 'accountId', type: Schema.STRING },
              { name: 'type', type: Schema.STRING },
            ]),
          ),
        },
        { name: 'eventtype', type: Schema.STRING },
        { name: 'apiversion', type: Schema.STRING },
        { name: 'readonly', type: Schema.STRING },
        { name: 'recipientaccountid', type: Schema.STRING },
        { name: 'serviceeventdetails', type: Schema.STRING },
        { name: 'sharedeventid', type: Schema.STRING },
        { name: 'vpcendpointid', type: Schema.STRING },
      ],
      dataFormat: DataFormat.CLOUDTRAIL_LOGS,
      database: database,
      tableName: 'cloudtrail_audit',
      bucket: bucket,
      description: 'CloudTrail Glue table',
      s3Prefix: `AWSLogs`,
      partitionKeys: [
        { name: 'timestamp', type: Schema.STRING },
        { name: 'region', type: Schema.STRING },
        { name: 'account', type: Schema.STRING },
      ],
    });
    const cfnTable = cloudTrailTable.node.defaultChild as CfnTable;
    cfnTable.addOverride('Properties.TableInput.Parameters', {
      EXTERNAL: 'TRUE',
      'projection.enabled': 'true',
      'projection.timestamp.type': 'date',
      'projection.timestamp.range': '2021/01/01,NOW',
      'projection.timestamp.format': 'yyyy/MM/dd',
      'projection.timestamp.interval': '1',
      'projection.timestamp.interval.unit': 'DAYS',
      'projection.account.type': 'enum',
      'projection.account.values': accounts.join(','),
      'projection.region.type': 'enum',
      'projection.region.values': regions.join(','),
      'storage.location.template': location + '/${account}/CloudTrail/${region}/${timestamp}',
    });
    return cloudTrailTable;
  }
}
