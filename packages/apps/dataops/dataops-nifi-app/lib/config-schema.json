{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
        "AwsManagedPolicySpec": {
            "additionalProperties": false,
            "properties": {
                "policyName": {
                    "description": "Name of the AWS Managed Policy",
                    "type": "string"
                },
                "suppressionReason": {
                    "description": "A suppression reason to be recorded in order to suppress AWSSolutions-IAM4",
                    "type": "string"
                }
            },
            "required": [
                "policyName",
                "suppressionReason"
            ],
            "type": "object"
        },
        "CaefCidrPeer": {
            "additionalProperties": false,
            "properties": {
                "cidr": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "port": {
                    "type": "number"
                },
                "protocol": {
                    "type": "string"
                },
                "suppressions": {
                    "items": {
                        "$ref": "#/definitions/NagSuppressionProps"
                    },
                    "type": "array"
                },
                "toPort": {
                    "type": "number"
                }
            },
            "required": [
                "cidr",
                "protocol"
            ],
            "type": "object"
        },
        "CaefNagSuppressionByPath": {
            "additionalProperties": false,
            "properties": {
                "path": {
                    "type": "string"
                },
                "suppressions": {
                    "items": {
                        "additionalProperties": false,
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "reason": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "reason"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "path",
                "suppressions"
            ],
            "type": "object"
        },
        "CaefNagSuppressions": {
            "additionalProperties": false,
            "properties": {
                "by_path": {
                    "items": {
                        "$ref": "#/definitions/CaefNagSuppressionByPath"
                    },
                    "type": "array"
                }
            },
            "required": [
                "by_path"
            ],
            "type": "object"
        },
        "CaefPrefixListPeer": {
            "additionalProperties": false,
            "properties": {
                "description": {
                    "type": "string"
                },
                "port": {
                    "type": "number"
                },
                "prefixList": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "suppressions": {
                    "items": {
                        "$ref": "#/definitions/NagSuppressionProps"
                    },
                    "type": "array"
                },
                "toPort": {
                    "type": "number"
                }
            },
            "required": [
                "prefixList",
                "protocol"
            ],
            "type": "object"
        },
        "CaefRoleRef": {
            "additionalProperties": false,
            "description": "A reference to an IAM role. Roles can be referenced by name, arn, and/or id.",
            "properties": {
                "arn": {
                    "description": "Reference role by arn",
                    "type": "string"
                },
                "id": {
                    "description": "Reference role by id",
                    "type": "string"
                },
                "immutable": {
                    "description": "Indicates whether the role should be considered immutable (defaults false)",
                    "type": "boolean"
                },
                "name": {
                    "description": "Reference role by name",
                    "type": "string"
                },
                "refId": {
                    "description": "A string which uniquely identifies the CaefRoleRef within a scope.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CaefSecurityGroupPeer": {
            "additionalProperties": false,
            "properties": {
                "description": {
                    "type": "string"
                },
                "port": {
                    "type": "number"
                },
                "protocol": {
                    "type": "string"
                },
                "sgId": {
                    "type": "string"
                },
                "suppressions": {
                    "items": {
                        "$ref": "#/definitions/NagSuppressionProps"
                    },
                    "type": "array"
                },
                "toPort": {
                    "type": "number"
                }
            },
            "required": [
                "protocol",
                "sgId"
            ],
            "type": "object"
        },
        "CaefSecurityGroupRuleProps": {
            "additionalProperties": false,
            "properties": {
                "ipv4": {
                    "items": {
                        "$ref": "#/definitions/CaefCidrPeer"
                    },
                    "type": "array"
                },
                "prefixList": {
                    "items": {
                        "$ref": "#/definitions/CaefPrefixListPeer"
                    },
                    "type": "array"
                },
                "sg": {
                    "items": {
                        "$ref": "#/definitions/CaefSecurityGroupPeer"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "CaefServiceCatalogConstraintConfig": {
            "additionalProperties": false,
            "properties": {
                "description": {
                    "type": "string"
                },
                "rules": {
                    "additionalProperties": {
                        "$ref": "#/definitions/CaefServiceCatalogConstraintRuleConfig"
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "rules"
            ],
            "type": "object"
        },
        "CaefServiceCatalogConstraintRuleAssertionConfig": {
            "additionalProperties": false,
            "properties": {
                "assert": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            },
            "required": [
                "assert",
                "description"
            ],
            "type": "object"
        },
        "CaefServiceCatalogConstraintRuleCondititionConfig": {
            "additionalProperties": false,
            "type": "object"
        },
        "CaefServiceCatalogConstraintRuleConfig": {
            "additionalProperties": false,
            "properties": {
                "assertions": {
                    "items": {
                        "$ref": "#/definitions/CaefServiceCatalogConstraintRuleAssertionConfig"
                    },
                    "type": "array"
                },
                "condition": {
                    "$ref": "#/definitions/CaefServiceCatalogConstraintRuleCondititionConfig"
                }
            },
            "required": [
                "assertions",
                "condition"
            ],
            "type": "object"
        },
        "CaefServiceCatalogParameterConfig": {
            "additionalProperties": false,
            "properties": {
                "constraints": {
                    "$ref": "#/definitions/CaefServiceCatalogConstraintConfig"
                },
                "props": {
                    "$ref": "#/definitions/CfnParameterProps"
                }
            },
            "required": [
                "props"
            ],
            "type": "object"
        },
        "CaefServiceCatalogProductConfig": {
            "additionalProperties": false,
            "properties": {
                "launch_role_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "parameters": {
                    "additionalProperties": {
                        "$ref": "#/definitions/CaefServiceCatalogParameterConfig"
                    },
                    "type": "object"
                },
                "portfolio_arn": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "owner",
                "portfolio_arn"
            ],
            "type": "object"
        },
        "CfnParameterProps": {
            "additionalProperties": false,
            "properties": {
                "allowedPattern": {
                    "default": "- No constraints on patterns allowed for parameter.",
                    "description": "A regular expression that represents the patterns to allow for String types.",
                    "type": "string"
                },
                "allowedValues": {
                    "default": "- No constraints on values allowed for parameter.",
                    "description": "An array containing the list of values allowed for the parameter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "constraintDescription": {
                    "default": "- No description with customized error message when user specifies invalid values.",
                    "description": "A string that explains a constraint when the constraint is violated.\nFor example, without a constraint description, a parameter that has an allowed\npattern of [A-Za-z0-9]+ displays the following error message when the user specifies\nan invalid value:",
                    "type": "string"
                },
                "default": {
                    "default": "- No default value for parameter.",
                    "description": "A value of the appropriate type for the template to use if no value is specified\nwhen a stack is created. If you define constraints for the parameter, you must specify\na value that adheres to those constraints."
                },
                "description": {
                    "default": "- No description for the parameter.",
                    "description": "A string of up to 4000 characters that describes the parameter.",
                    "type": "string"
                },
                "maxLength": {
                    "default": "- None.",
                    "description": "An integer value that determines the largest number of characters you want to allow for String types.",
                    "type": "number"
                },
                "maxValue": {
                    "default": "- None.",
                    "description": "A numeric value that determines the largest numeric value you want to allow for Number types.",
                    "type": "number"
                },
                "minLength": {
                    "default": "- None.",
                    "description": "An integer value that determines the smallest number of characters you want to allow for String types.",
                    "type": "number"
                },
                "minValue": {
                    "default": "- None.",
                    "description": "A numeric value that determines the smallest numeric value you want to allow for Number types.",
                    "type": "number"
                },
                "noEcho": {
                    "default": "- Parameter values are not masked.",
                    "description": "Whether to mask the parameter value when anyone makes a call that describes the stack.\nIf you set the value to ``true``, the parameter value is masked with asterisks (``*****``).",
                    "type": "boolean"
                },
                "type": {
                    "default": "String",
                    "description": "The data type for the parameter (DataType).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NagSuppressionProps": {
            "additionalProperties": false,
            "properties": {
                "id": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            },
            "required": [
                "id",
                "reason"
            ],
            "type": "object"
        },
        "NamedNifiClusterOptions": {
            "additionalProperties": {
                "$ref": "#/definitions/NifiClusterOptionsWithPeers"
            },
            "type": "object"
        },
        "NifiClusterOptionsWithPeers": {
            "additionalProperties": false,
            "properties": {
                "additionalEfsIngressSecurityGroupIds": {
                    "description": "Security groups which will be provided ingress access to the Nifi cluster EFS security group.\nThese may also be specified globally.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "clusterPort": {
                    "description": "The port on which the internal cluster communications will occur",
                    "type": "number"
                },
                "clusterRoleAwsManagedPolicies": {
                    "description": "AWS managed policies which will be granted to the Nifi cluster role for access to AWS services.",
                    "items": {
                        "$ref": "#/definitions/AwsManagedPolicySpec"
                    },
                    "type": "array"
                },
                "clusterRoleManagedPolicies": {
                    "description": "Customer managed policies which will be granted to the Nifi cluster role for access to AWS services.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "externalAuthorizedNodes": {
                    "description": "External nodes which will be granted remote access (by TLS certificate common name).\nNote that these nodes will also need to be granted security group access via 'nifiSecurityGroupIngressSGs' or 'nifiSecurityGroupIngressIPv4s'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "httpsPort": {
                    "description": "The port on which the cluster HTTPS interfaces will listen",
                    "type": "number"
                },
                "initialAdminIdentity": {
                    "description": "Initial Nifi admin identity. If using SAML, this should match the admin SAML identity.\nIf not using SAML, a local user with this name will be created and a password stored in AWS Secrets Manager",
                    "type": "string"
                },
                "nifiImageTag": {
                    "description": "The tag of the Nifi docker image to use. If not specified,\ndefaults to the latest tested version (currently 1.23.2). Specify 'latest' to pull\nthe latest version (might be untested).",
                    "type": "string"
                },
                "nifiSecurityGroupEgressRules": {
                    "$ref": "#/definitions/CaefSecurityGroupRuleProps",
                    "description": "Egress rules to be added to all Nifi cluster security groups.\nThese may also be specified globally."
                },
                "nifiSecurityGroupIngressIPv4s": {
                    "description": "IPv4 CIDRs which will be provided ingress access to the Nifi cluster security group.\nThese may also be specified globally.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nifiSecurityGroupIngressSGs": {
                    "description": "Security groups which will be provided ingress access to the Nifi cluster security group.\nThese may also be specified globally.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nodeCount": {
                    "description": "Initial number of nodes in the cluster.\nDefaults to 1.",
                    "type": "number"
                },
                "nodeSize": {
                    "description": "Size of the Nifi cluster nodes. \nDefaults to SMALL.",
                    "enum": [
                        "2XLARGE",
                        "LARGE",
                        "MEDIUM",
                        "SMALL",
                        "XLARGE"
                    ],
                    "type": "string"
                },
                "peerClusters": {
                    "description": "Other clusters within this module which will be provided SecurityGroup and Node remote access to this cluster.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "remotePort": {
                    "description": "The port on which the cluster remote RAW interfaces will listen",
                    "type": "number"
                },
                "saml": {
                    "$ref": "#/definitions/NifiSamlProps",
                    "description": "If specified, the Nifi cluster will be configured to use a SAML identity provider"
                }
            },
            "required": [
                "initialAdminIdentity"
            ],
            "type": "object"
        },
        "NifiProps": {
            "additionalProperties": false,
            "properties": {
                "additionalEfsIngressSecurityGroupIds": {
                    "description": "Security groups which will be provided ingress access to all Nifi cluster EFS security groups.\nThese may also be specified for each cluster.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "adminRoles": {
                    "description": "List of admin roles which will be provided access to EKS cluster resources",
                    "items": {
                        "$ref": "#/definitions/CaefRoleRef"
                    },
                    "type": "array"
                },
                "caCertDuration": {
                    "description": "The certificate validity period for the internal CA cert. If using an ACM Private CA with short-term certificates,\nthis should be set to less than 7 days. Defaults to 6 days.",
                    "type": "string"
                },
                "caCertRenewBefore": {
                    "description": "The time before CA cert expiration at which point the internal CA cert will be renewed.\nDefaults to 12 hours.",
                    "type": "string"
                },
                "clusters": {
                    "$ref": "#/definitions/NamedNifiClusterOptions",
                    "description": "Nifi cluster configurations to be created."
                },
                "eksSecurityGroupIngressRules": {
                    "$ref": "#/definitions/CaefSecurityGroupRuleProps",
                    "description": "Ingress rules to be added to the EKS control plane security group"
                },
                "nifiSecurityGroupEgressRules": {
                    "$ref": "#/definitions/CaefSecurityGroupRuleProps",
                    "description": "Egress rules to be added to all Nifi cluster security groups.\nThese may also be specified for each cluster."
                },
                "nifiSecurityGroupIngressIPv4s": {
                    "description": "IPv4 CIDRs which will be provided ingress access to all Nifi cluster security groups.\nThese may also be specified for each cluster.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nifiSecurityGroupIngressSGs": {
                    "description": "Security groups which will be provided ingress access to all Nifi cluster security groups.\nThese may also be specified for each cluster.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nodeCertDuration": {
                    "description": "The certificate validity period for the Zookeeper and Nifi Node certs. If using an ACM Private CA with short-term certificates,\nthis should be set to less than 6 days. Defaults to 5 days.",
                    "type": "string"
                },
                "nodeCertRenewBefore": {
                    "description": "The time before CA cert expiration at which point the Zookeeper and Nifi Node certs will be renewed.\nDefaults to 12 hours.",
                    "type": "string"
                },
                "privateCaArn": {
                    "description": "If specified, this ACM Private CA will be used to sign the internal CA running\nwithin EKS. If not specified, the internal CA will use a self-signed cert.",
                    "type": "string"
                },
                "subnetIds": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Subnets on which EKS and Nifi clusters will be deployed",
                    "type": "object"
                },
                "vpcId": {
                    "description": "VPC on which EKS and Nifi clusters will be deployed",
                    "type": "string"
                }
            },
            "required": [
                "adminRoles",
                "clusters",
                "subnetIds",
                "vpcId"
            ],
            "type": "object"
        },
        "NifiSamlProps": {
            "additionalProperties": false,
            "properties": {
                "idpMetadataUrl": {
                    "description": "URL from which the IDP SAML Metadata is available.",
                    "type": "string"
                }
            },
            "required": [
                "idpMetadataUrl"
            ],
            "type": "object"
        }
    },
    "properties": {
        "deploymentRole": {
            "type": "string"
        },
        "kmsArn": {
            "type": "string"
        },
        "nag_suppressions": {
            "$ref": "#/definitions/CaefNagSuppressions",
            "description": "Nag suppressions"
        },
        "nifi": {
            "$ref": "#/definitions/NifiProps"
        },
        "projectBucket": {
            "type": "string"
        },
        "projectName": {
            "description": "Name of the DataOps Project",
            "type": "string"
        },
        "projectTopicArn": {
            "type": "string"
        },
        "securityConfigurationName": {
            "type": "string"
        },
        "service_catalog_product_config": {
            "$ref": "#/definitions/CaefServiceCatalogProductConfig",
            "description": "Service Catalog Config\nIf specified, the configured module will be deployed as a Service Catalog product instead of directly to the environment"
        }
    },
    "required": [
        "deploymentRole",
        "kmsArn",
        "nifi",
        "projectBucket",
        "projectName",
        "projectTopicArn",
        "securityConfigurationName"
    ],
    "type": "object"
}

