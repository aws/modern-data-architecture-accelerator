// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`dataops-nifi Snapshot Tests NifiCluster App App Snapshot Test 1`] = `
{
  "test-org-test-env-test-domain-test-nificluster-main": {
    "Conditions": {
      "REPLACED-CFN-LOGICAL-ID": {
        "Fn::Equals": [
          {
            "Ref": "AWS::Partition",
          },
          "aws",
        ],
      },
    },
    "Description": "(SO0320-dataops-nifi) Modern Data Architecture Accelerator. Version 1.0.0",
    "Mappings": {
      "LatestNodeRuntimeMap": {
        "af-south-1": {
          "value": "nodejs22.x",
        },
        "ap-east-1": {
          "value": "nodejs22.x",
        },
        "ap-east-2": {
          "value": "nodejs22.x",
        },
        "ap-northeast-1": {
          "value": "nodejs22.x",
        },
        "ap-northeast-2": {
          "value": "nodejs22.x",
        },
        "ap-northeast-3": {
          "value": "nodejs22.x",
        },
        "ap-south-1": {
          "value": "nodejs22.x",
        },
        "ap-south-2": {
          "value": "nodejs22.x",
        },
        "ap-southeast-1": {
          "value": "nodejs22.x",
        },
        "ap-southeast-2": {
          "value": "nodejs22.x",
        },
        "ap-southeast-3": {
          "value": "nodejs22.x",
        },
        "ap-southeast-4": {
          "value": "nodejs22.x",
        },
        "ap-southeast-5": {
          "value": "nodejs22.x",
        },
        "ap-southeast-7": {
          "value": "nodejs22.x",
        },
        "ca-central-1": {
          "value": "nodejs22.x",
        },
        "ca-west-1": {
          "value": "nodejs22.x",
        },
        "cn-north-1": {
          "value": "nodejs22.x",
        },
        "cn-northwest-1": {
          "value": "nodejs22.x",
        },
        "eu-central-1": {
          "value": "nodejs22.x",
        },
        "eu-central-2": {
          "value": "nodejs22.x",
        },
        "eu-isoe-west-1": {
          "value": "nodejs18.x",
        },
        "eu-north-1": {
          "value": "nodejs22.x",
        },
        "eu-south-1": {
          "value": "nodejs22.x",
        },
        "eu-south-2": {
          "value": "nodejs22.x",
        },
        "eu-west-1": {
          "value": "nodejs22.x",
        },
        "eu-west-2": {
          "value": "nodejs22.x",
        },
        "eu-west-3": {
          "value": "nodejs22.x",
        },
        "il-central-1": {
          "value": "nodejs22.x",
        },
        "me-central-1": {
          "value": "nodejs22.x",
        },
        "me-south-1": {
          "value": "nodejs22.x",
        },
        "mx-central-1": {
          "value": "nodejs22.x",
        },
        "sa-east-1": {
          "value": "nodejs22.x",
        },
        "us-east-1": {
          "value": "nodejs22.x",
        },
        "us-east-2": {
          "value": "nodejs22.x",
        },
        "us-gov-east-1": {
          "value": "nodejs22.x",
        },
        "us-gov-west-1": {
          "value": "nodejs22.x",
        },
        "us-iso-east-1": {
          "value": "nodejs18.x",
        },
        "us-iso-west-1": {
          "value": "nodejs18.x",
        },
        "us-isob-east-1": {
          "value": "nodejs18.x",
        },
        "us-isob-west-1": {
          "value": "nodejs18.x",
        },
        "us-west-1": {
          "value": "nodejs22.x",
        },
        "us-west-2": {
          "value": "nodejs22.x",
        },
      },
    },
    "Outputs": {
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:security-group:eks:id",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:cluster:arn",
        },
        "Value": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":eks:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":fargateprofile/test-org-test-env-test-domain-test-nificluster-main/*",
            ],
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:managed-policy:clustermgmt:arn",
        },
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:managed-policy:clustermgmt:name",
        },
        "Value": {
          "Fn::Select": [
            1,
            {
              "Fn::Split": [
                "/",
                {
                  "Fn::Select": [
                    5,
                    {
                      "Fn::Split": [
                        ":",
                        {
                          "Ref": "REPLACED-CFN-LOGICAL-ID",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:cluster:name",
        },
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:instance:id-test-org-test-env-test-domain-test-nificluster-main-mgmt",
        },
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:role:mgmtinstance:arn",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:role:mgmtinstance:id",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "RoleId",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:role:mgmtinstance:name",
        },
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main-test1:security-group:nificlusterefs:id",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main-test1:security-group:nifi:id",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main-test2:security-group:nificlusterefs:id",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main-test2:security-group:nifi:id",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:security-group:registryefs:id",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:security-group:registry:id",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:security-group:zk:id",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:security-group:zookeeperefs:id",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:lambda:ec2volumeencryptioncheckhandler:arn",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-nificluster-main:lambda:ec2volumeencryptioncheckhandler:name",
        },
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
    },
    "Parameters": {
      "BootstrapVersion": {
        "Default": "/cdk-bootstrap/hnb659fds/version",
        "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
        "Type": "AWS::SSM::Parameter::Value<String>",
      },
      "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter": {
        "Default": "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64",
        "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      },
      "SsmParameterValuetestorgtestdomaincaefbootstraprolehelperservicetokenC96584B6F00A464EAD1953AFF4B05118Parameter": {
        "Default": "/test-org/test-domain/caef-bootstrap/role-helper-service-token",
        "Type": "AWS::SSM::Parameter::Value<String>",
      },
      "SsmParameterValuetestorgtestdomaindataopsprojecttestdeploymentRoledefaultC96584B6F00A464EAD1953AFF4B05118Parameter": {
        "Default": "/test-org/test-domain/dataops-project-test/deploymentRole/default",
        "Type": "AWS::SSM::Parameter::Value<String>",
      },
      "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter": {
        "Default": "/test-org/test-domain/dataops-project-test/kmsArn/default",
        "Type": "AWS::SSM::Parameter::Value<String>",
      },
      "SsmParameterValuetestorgtestdomaindataopsprojecttestprojectBucketdefaultC96584B6F00A464EAD1953AFF4B05118Parameter": {
        "Default": "/test-org/test-domain/dataops-project-test/projectBucket/default",
        "Type": "AWS::SSM::Parameter::Value<String>",
      },
      "SsmParameterValuetestorgtestdomaindataopsprojecttestprojectTopicArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter": {
        "Default": "/test-org/test-domain/dataops-project-test/projectTopicArn/default",
        "Type": "AWS::SSM::Parameter::Value<String>",
      },
      "SsmParameterValuetestorgtestdomaindataopsprojecttestsecurityConfigurationdefaultC96584B6F00A464EAD1953AFF4B05118Parameter": {
        "Default": "/test-org/test-domain/dataops-project-test/securityConfiguration/default",
        "Type": "AWS::SSM::Parameter::Value<String>",
      },
    },
    "Resources": {
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Handler": "__entrypoint__.handler",
          "MemorySize": 128,
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": {
            "Fn::FindInMap": [
              "LatestNodeRuntimeMap",
              {
                "Ref": "AWS::Region",
              },
              "value",
            ],
          },
          "Timeout": 900,
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] AWSLambdaBasicExecutionRole, AWSLambdaVPCAccessExecutionRole are least privilege.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Resource names not known at deployment time.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Function generated by EKS L2 construct.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Policy statements are specific to custom resource.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Policy statements are specific to custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Policy statements are specific to custom resource.",
              },
            ],
          },
        },
        "Properties": {
          "Parameters": {
            "referencetotestorgtestenvtestdomaintestnificlustermainconstructekscluster26260942ClusterSecurityGroupId": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "ClusterSecurityGroupId",
              ],
            },
            "referencetotestorgtestenvtestdomaintestnificlustermainconstructeksclusterKubectlHandlerRole73675046Arn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "referencetotestorgtestenvtestdomaintestnificlustermainconstructkubectllayerF4C3A8C0Ref": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "TemplateURL": {
            "Fn::Join": [
              "",
              [
                "https://s3.",
                {
                  "Ref": "AWS::Region",
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix",
                },
                "/",
                {
                  "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                },
                "/4dabde655780b3481d1b459f1cd244092604008aae0ae70d3d854c895f31920c.json",
              ],
            ],
          },
        },
        "Type": "AWS::CloudFormation::Stack",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Handler": "__entrypoint__.handler",
          "MemorySize": 128,
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": {
            "Fn::FindInMap": [
              "LatestNodeRuntimeMap",
              {
                "Ref": "AWS::Region",
              },
              "value",
            ],
          },
          "Timeout": 900,
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
            },
          ],
          "Policies": [
            {
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": [
                      "iam:CreateOpenIDConnectProvider",
                      "iam:DeleteOpenIDConnectProvider",
                      "iam:UpdateOpenIDConnectProviderThumbprint",
                      "iam:AddClientIDToOpenIDConnectProvider",
                      "iam:RemoveClientIDFromOpenIDConnectProvider",
                    ],
                    "Effect": "Allow",
                    "Resource": "*",
                  },
                ],
                "Version": "2012-10-17",
              },
              "PolicyName": "Inline",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "RoleResAdmin0": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "ServiceToken": {
            "Ref": "SsmParameterValuetestorgtestdomaincaefbootstraprolehelperservicetokenC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "roleRef": {
            "name": "Admin",
            "refId": "Admin-0",
          },
        },
        "Type": "AWS::CloudFormation::CustomResource",
        "UpdateReplacePolicy": "Delete",
      },
      "RoleResAdmin1": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "ServiceToken": {
            "Ref": "SsmParameterValuetestorgtestdomaincaefbootstraprolehelperservicetokenC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "roleRef": {
            "name": "eks-admin",
            "refId": "Admin-1",
          },
        },
        "Type": "AWS::CloudFormation::CustomResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "Stack description parameter to update on version changes",
          "Name": "/test-org/test-domain/test-nificluster-main/aws-solution",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": "(SO0320-dataops-nifi) Modern Data Architecture Accelerator. Version 1.0.0",
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] AWSLambdaBasicExecutionRole, AWSLambdaVPCAccessExecutionRole are least privilege.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Resource names not known at deployment time.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function generated by EKS L2 construct.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Policy statements are specific to custom resource.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Policy statements are specific to custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Policy statements are specific to custom resource.",
              },
              {
                "id": "HIPAA.Security-CloudWatchLogGroupEncrypted",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Loggroup data is always encrypted in CloudWatch Logs",
              },
              {
                "id": "PCI.DSS.321-CloudWatchLogGroupEncrypted",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Loggroup data is always encrypted in CloudWatch Logs",
              },
              {
                "id": "NIST.800.53.R5-CloudWatchLogGroupEncrypted",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Loggroup data is always encrypted in CloudWatch Logs",
              },
              {
                "id": "AwsSolutions-SF1",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time.",
              },
              {
                "id": "AwsSolutions-SF2",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time.",
              },
            ],
          },
        },
        "Properties": {
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "TemplateURL": {
            "Fn::Join": [
              "",
              [
                "https://s3.",
                {
                  "Ref": "AWS::Region",
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix",
                },
                "/",
                {
                  "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                },
                "/5a76eabcc28867748f9da94a16a53f8b481d12ed3cbfdb31edcbce0ca0101171.json",
              ],
            ],
          },
        },
        "Type": "AWS::CloudFormation::Stack",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] AWSLambdaBasicExecutionRole, AWSLambdaVPCAccessExecutionRole are least privilege.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Resource names not known at deployment time.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Function generated by EKS L2 construct.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Policy statements are specific to custom resource.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Policy statements are specific to custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Policy statements are specific to custom resource.",
              },
            ],
          },
        },
        "Properties": {
          "Parameters": {
            "referencetotestorgtestenvtestdomaintestnificlustermainconstructekscluster26260942ClusterSecurityGroupId": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "ClusterSecurityGroupId",
              ],
            },
            "referencetotestorgtestenvtestdomaintestnificlustermainconstructeksclusterKubectlHandlerRole73675046Arn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "referencetotestorgtestenvtestdomaintestnificlustermainconstructkubectllayerF4C3A8C0Ref": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "TemplateURL": {
            "Fn::Join": [
              "",
              [
                "https://s3.",
                {
                  "Ref": "AWS::Region",
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix",
                },
                "/",
                {
                  "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                },
                "/13a9ae0324f31b0172ca124209d07dacf158417aca279b64af2697ab01f0fc8e.json",
              ],
            ],
          },
        },
        "Type": "AWS::CloudFormation::Stack",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/cluster-sg",
          "GroupName": "test-org-test-env-test-domain-test-nificluster-main-eks",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "test-vpc-id",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from sg-kubectlclientid:tcp PORT 443",
          "FromPort": 443,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-kubectlclientid",
          "ToPort": 443,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "Self-Ref",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructeksclusterClusterSecurityGroup891F0126:ALL TRAFFIC",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "ClusterSecurityGroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/security-group/eks/id",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "",
          "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-ext-6b73ecad",
          "Path": "/",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "kms:Decrypt",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
                "Sid": "KmsDecrypt",
              },
              {
                "Action": "SecretsManager:GetSecretValue",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "Sid": "GetSecretValue",
              },
            ],
            "Version": "2012-10-17",
          },
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::ManagedPolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringLike": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Value",
                    ],
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Federated": {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-ext-6b73ecad",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Value": {
            "Fn::Join": [
              "",
              [
                "{"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":aud":"sts.amazonaws.com","",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":sub":"system:serviceaccount:cert-manager:*"}",
              ],
            ],
          },
        },
        "Type": "Custom::AWSCDKCfnJson",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SMG4",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "HIPAA.Security-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
            ],
          },
        },
        "Properties": {
          "GenerateSecretString": {
            "ExcludeCharacters": "'",
            "ExcludePunctuation": true,
          },
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "Name": "test-org-test-env-test-domain-test-nificluster-main-ca-keystore-password",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SecretsManager::Secret",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Cmd": [
            "get",
            "deployment.apps",
            "cert-manager-webhook",
            "-o",
            "jsonpath='{.status.readyReplicas}'",
          ],
          "ExpectedOutput": "1",
          "Namespace": "cert-manager",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
            ],
          },
          "TimeoutSeconds": 300,
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Cmd": [
            "get",
            "deployment.apps",
            "external-dns",
            "-o",
            "jsonpath='{.status.readyReplicas}'",
          ],
          "ExpectedOutput": "1",
          "Namespace": "external-dns",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
            ],
          },
          "TimeoutSeconds": 300,
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Cmd": [
            "get",
            "deployment.apps",
            "external-secrets-webhook",
            "-o",
            "jsonpath='{.status.readyReplicas}'",
          ],
          "ExpectedOutput": "1",
          "Namespace": "external-secrets",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
            ],
          },
          "TimeoutSeconds": 300,
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Cmd": [
            "get",
            "awspcaclusterissuer",
            "private-ca-cluster-issuer",
            "-o",
            "jsonpath="{.status.conditions[?(@.type=='Ready')].status }"",
          ],
          "ExpectedOutput": "True",
          "Namespace": "cert-manager",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
            ],
          },
          "TimeoutSeconds": 300,
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EFSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce NIST.800.53.R5-EFSInBackupPlan on EFS volume.",
              },
              {
                "id": "HIPAA.Security-EFSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
              },
              {
                "id": "PCI.DSS.321-EFSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
              },
            ],
          },
        },
        "Properties": {
          "Encrypted": true,
          "FileSystemTags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
            {
              "Key": "Name",
              "Value": "test-org-test-env-test-domain-test-nificluster-main-registry",
            },
          ],
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "PerformanceMode": "maxIO",
        },
        "Type": "AWS::EFS::FileSystem",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "SecurityGroups": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "GroupId",
              ],
            },
          ],
          "SubnetId": "test-subnet-id-1",
        },
        "Type": "AWS::EFS::MountTarget",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "SecurityGroups": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "GroupId",
              ],
            },
          ],
          "SubnetId": "test-subnet-id-2",
        },
        "Type": "AWS::EFS::MountTarget",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EFSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce NIST.800.53.R5-EFSInBackupPlan on EFS volume.",
              },
              {
                "id": "HIPAA.Security-EFSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
              },
              {
                "id": "PCI.DSS.321-EFSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
              },
            ],
          },
        },
        "Properties": {
          "Encrypted": true,
          "FileSystemTags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
            {
              "Key": "Name",
              "Value": "test-org-test-env-test-domain-test-nificluster-main-zk",
            },
          ],
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "PerformanceMode": "maxIO",
        },
        "Type": "AWS::EFS::FileSystem",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "SecurityGroups": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "GroupId",
              ],
            },
          ],
          "SubnetId": "test-subnet-id-1",
        },
        "Type": "AWS::EFS::MountTarget",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "SecurityGroups": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "GroupId",
              ],
            },
          ],
          "SubnetId": "test-subnet-id-2",
        },
        "Type": "AWS::EFS::MountTarget",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "AssumeRoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "AttributesRevision": 5,
          "Config": {
            "accessConfig": {},
            "encryptionConfig": [
              {
                "provider": {
                  "keyArn": {
                    "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                  },
                },
                "resources": [
                  "secrets",
                ],
              },
            ],
            "kubernetesNetworkConfig": {
              "ipFamily": "ipv4",
            },
            "logging": {
              "clusterLogging": [
                {
                  "enabled": true,
                  "types": [
                    "api",
                    "audit",
                    "authenticator",
                    "controllerManager",
                    "scheduler",
                  ],
                },
              ],
            },
            "name": "test-org-test-env-test-domain-test-nificluster-main",
            "resourcesVpcConfig": {
              "endpointPrivateAccess": true,
              "endpointPublicAccess": false,
              "securityGroupIds": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
              ],
              "subnetIds": [
                "test-subnet-id-1",
                "test-subnet-id-2",
              ],
            },
            "roleArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "tags": {
              "mdaa_cdk_app": "dataops-nifi",
              "mdaa_domain": "test-domain",
              "mdaa_env": "test-env",
              "mdaa_module_name": "test-nificluster-main",
              "mdaa_org": "test-org",
            },
            "version": "1.27",
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksClusterResourceProviderframeworkonEvent26D3AFA7Arn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-Cluster",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"aws-auth","namespace":"kube-system","labels":{"aws.cdk.eks/prune-c810045c00fd47b7dc470733073849acdad8eb4a0a":""}},"data":{"mapRoles":"[{\\"rolearn\\":\\"",
                {
                  "Fn::GetAtt": [
                    "RoleResAdmin0",
                    "arn",
                  ],
                },
                "\\",\\"username\\":\\"",
                {
                  "Fn::GetAtt": [
                    "RoleResAdmin0",
                    "arn",
                  ],
                },
                "\\",\\"groups\\":[\\"system:masters\\"]},{\\"rolearn\\":\\"",
                {
                  "Fn::GetAtt": [
                    "RoleResAdmin1",
                    "arn",
                  ],
                },
                "\\",\\"username\\":\\"",
                {
                  "Fn::GetAtt": [
                    "RoleResAdmin1",
                    "arn",
                  ],
                },
                "\\",\\"groups\\":[\\"system:masters\\"]},{\\"rolearn\\":\\"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "\\",\\"username\\":\\"system:node:{{SessionName}}\\",\\"groups\\":[\\"system:bootstrappers\\",\\"system:nodes\\",\\"system:node-proxier\\"]},{\\"rolearn\\":\\"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "\\",\\"username\\":\\"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "\\",\\"groups\\":[\\"system:masters\\"]},{\\"rolearn\\":\\"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "\\",\\"username\\":\\"system:node:{{SessionName}}\\",\\"groups\\":[\\"system:bootstrappers\\",\\"system:nodes\\",\\"system:node-proxier\\"]},{\\"rolearn\\":\\"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "\\",\\"username\\":\\"system:node:{{SessionName}}\\",\\"groups\\":[\\"system:bootstrappers\\",\\"system:nodes\\",\\"system:node-proxier\\"]}]","mapUsers":"[]","mapAccounts":"[]"}}]",
              ],
            ],
          },
          "Overwrite": true,
          "PruneLabel": "aws.cdk.eks/prune-c810045c00fd47b7dc470733073849acdad8eb4a0a",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainclustersg1F3C4614:ALL TRAFFIC",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "ClusterSecurityGroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest1nifisg30149961:ALL TRAFFIC",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "ClusterSecurityGroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest2nifisg65E78910:ALL TRAFFIC",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "ClusterSecurityGroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructregistrysg7FFF1011:ALL TRAFFIC",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "ClusterSecurityGroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructzksg6745019C:ALL TRAFFIC",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "ClusterSecurityGroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ApplyPatchJson": "{"spec":{"template":{"metadata":{"annotations":{"eks.amazonaws.com/compute-type":"fargate"}}}}}",
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "PatchType": "strategic",
          "ResourceName": "deployment/coredns",
          "ResourceNamespace": "kube-system",
          "RestorePatchJson": "{"spec":{"template":{"metadata":{"annotations":{"eks.amazonaws.com/compute-type":"ec2"}}}}}",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesPatch",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Resource::*",
                ],
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] EC2 resources not known at deployment time.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions limited to specific cluster",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions are specific to cluster.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions are specific to cluster.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions are specific to cluster.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksClusterResourceProviderOnEventHandlerServiceRole9480D93BArn",
                    ],
                  },
                },
              },
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksClusterResourceProviderIsCompleteHandlerServiceRoleD6199454Arn",
                    ],
                  },
                },
              },
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Resource::*",
                ],
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] EC2 resources not known at deployment time.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions limited to specific cluster",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions are specific to cluster.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions are specific to cluster.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions are specific to cluster.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "iam:PassRole",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "eks:CreateCluster",
                  "eks:DescribeCluster",
                  "eks:DescribeUpdate",
                  "eks:DeleteCluster",
                  "eks:UpdateClusterVersion",
                  "eks:UpdateClusterConfig",
                  "eks:CreateFargateProfile",
                  "eks:TagResource",
                  "eks:UntagResource",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":eks:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":cluster/test-org-test-env-test-domain-test-nificluster-main",
                      ],
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":eks:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":cluster/test-org-test-env-test-domain-test-nificluster-main/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "eks:DescribeFargateProfile",
                  "eks:DeleteFargateProfile",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":eks:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":fargateprofile/test-org-test-env-test-domain-test-nificluster-main/*",
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "iam:GetRole",
                  "iam:listAttachedRolePolicies",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": "iam:CreateServiceLinkedRole",
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "ec2:DescribeInstances",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DescribeSecurityGroups",
                  "ec2:DescribeSubnets",
                  "ec2:DescribeRouteTables",
                  "ec2:DescribeDhcpOptions",
                  "ec2:DescribeVpcs",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Encrypt",
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:CreateGrant",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
              },
              {
                "Action": "iam:PassRole",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": "iam:PassRole",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": "iam:PassRole",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] AWSLambdaBasicExecutionRole, AWSLambdaVPCAccessExecutionRole are least privilege.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] S3 CDK Asset names not known at deployment time",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] Permissions are specific to custom resource requirements.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] Permissions are specific to custom resource requirements.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] Permissions are specific to custom resource requirements.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "eks:DescribeCluster",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] AWSLambdaBasicExecutionRole, AWSLambdaVPCAccessExecutionRole are least privilege.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] S3 CDK Asset names not known at deployment time",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] Permissions are specific to custom resource requirements.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] Permissions are specific to custom resource requirements.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] Permissions are specific to custom resource requirements.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                ],
              ],
            },
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
                ],
              ],
            },
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
                ],
              ],
            },
            {
              "Fn::If": [
                "REPLACED-CFN-LOGICAL-ID",
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly",
                    ],
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "Type": "String",
          "Value": "aws:cdk:eks:kubectl-ready",
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:416:25] AmazonEKSClusterPolicy is required for proper cluster function.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "eks.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/AmazonEKSClusterPolicy",
                ],
              ],
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"aws-logging","namespace":"aws-observability","labels":{"aws.cdk.eks/prune-c8566e68070c35c18fe12b057fd4ca6dec84bff124":""}},"data":{"flb_log_cw":"false","output.conf":"\\n    [OUTPUT]\\n        Name cloudwatch_logs\\n        Match *\\n        region ",
                {
                  "Ref": "AWS::Region",
                },
                "\\n        log_group_name ",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "\\n        auto_create_group false"}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c8566e68070c35c18fe12b057fd4ca6dec84bff124",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"aws-observability","labels":{"aws.cdk.eks/prune-c8317ec9f2f66871c1af40a6b9424ad8b5545dd4be":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"aws-observability","labels":{"aws.cdk.eks/prune-c8317ec9f2f66871c1af40a6b9424ad8b5545dd4be":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
                ""]}}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c8317ec9f2f66871c1af40a6b9424ad8b5545dd4be",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                ""},"name":"ca-issuer-external-secret-store","namespace":"cert-manager","labels":{"aws.cdk.eks/prune-c80852611f4a0f22a7fac980cf5a6a4f12fd05da90":""}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"SecretStore","metadata":{"name":"ca-issuer-external-secret-store","namespace":"cert-manager","labels":{"aws.cdk.eks/prune-c80852611f4a0f22a7fac980cf5a6a4f12fd05da90":""}},"spec":{"provider":{"aws":{"auth":{"jwt":{"serviceAccountRef":{"name":"ca-issuer-external-secret-store"}}},"region":"",
                {
                  "Ref": "AWS::Region",
                },
                "","service":"SecretsManager"}}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"ExternalSecret","metadata":{"name":"ca-keystore-external-secret","namespace":"cert-manager","labels":{"aws.cdk.eks/prune-c80852611f4a0f22a7fac980cf5a6a4f12fd05da90":""}},"spec":{"data":[{"remoteRef":{"key":"",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Fn::Select": [
                          0,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          1,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          3,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          4,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          5,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          7,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          8,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          9,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          10,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          11,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  ],
                },
                ""},"secretKey":"ca-keystore-password"}],"refreshInterval":"1h","secretStoreRef":{"kind":"SecretStore","name":"ca-issuer-external-secret-store"},"target":{"creationPolicy":"Owner","name":"ca-keystore-secret"}}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"ca-cert","namespace":"cert-manager","labels":{"aws.cdk.eks/prune-c80852611f4a0f22a7fac980cf5a6a4f12fd05da90":""}},"spec":{"commonName":"ca","duration":"144h0m0s","isCA":true,"issuerRef":{"group":"awspca.cert-manager.io","kind":"AWSPCAClusterIssuer","name":"private-ca-cluster-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"ca-keystore-password","name":"ca-keystore-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"12h0m0s","secretName":"ca-cert-secret"}},{"apiVersion":"cert-manager.io/v1","kind":"ClusterIssuer","metadata":{"name":"ca-issuer","namespace":"cert-manager","labels":{"aws.cdk.eks/prune-c80852611f4a0f22a7fac980cf5a6a4f12fd05da90":""}},"spec":{"ca":{"secretName":"ca-cert-secret"}}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c80852611f4a0f22a7fac980cf5a6a4f12fd05da90",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"cert-manager","labels":{"aws.cdk.eks/prune-c83f805ba9ea48887b9be13a051011f3a5050ab97d":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"cert-manager","labels":{"aws.cdk.eks/prune-c83f805ba9ea48887b9be13a051011f3a5050ab97d":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
                ""]}}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c83f805ba9ea48887b9be13a051011f3a5050ab97d",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "Chart": "cert-manager",
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Namespace": "cert-manager",
          "Release": "cert-manager",
          "Repository": "https://charts.jetstack.io",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
          "Values": "{"namespace":"cert-manager","installCRDs":true,"global":{"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}]},"webhook":{"securePort":10260,"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}]},"cainjector":{"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}]}}",
          "Version": "1.13.0",
        },
        "Type": "Custom::AWSCDK-EKS-HelmChart",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "Chart": "external-secrets",
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Namespace": "external-secrets",
          "Release": "external-secrets",
          "Repository": "https://charts.external-secrets.io",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
          "Values": "{"installCRDs":true,"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}],"webhook":{"port":9443}}",
          "Version": "0.9.5",
        },
        "Type": "Custom::AWSCDK-EKS-HelmChart",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "Chart": "aws-privateca-issuer",
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Namespace": "cert-manager",
          "Release": "aws-privateca-issuer",
          "Repository": "https://cert-manager.github.io/aws-privateca-issuer",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
          "Values": "{"installCRDs":true,"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}],"serviceAccount":{"create":false,"name":"private-ca-service-account"}}",
          "Version": "1.2.5",
        },
        "Type": "Custom::AWSCDK-EKS-HelmChart",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/cluster/arn",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":eks:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":fargateprofile/test-org-test-env-test-domain-test-nificluster-main/*",
              ],
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:655:25] Resource names not known at deployment time.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "",
          "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-clu-126c9ec1",
          "Path": "/",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "eks:DescribeCluster",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "ssm:UpdateInstanceInformation",
                  "ssm:UpdateInstanceAssociationStatus",
                  "ssm:UpdateAssociationStatus",
                  "ssm:PutInventory",
                  "ssm:PutConfigurePackageResult",
                  "ssm:PutComplianceItems",
                  "ssm:ListInstanceAssociations",
                  "ssm:ListAssociations",
                  "ssm:GetManifest",
                  "ssm:GetDocument",
                  "ssm:GetDeployablePatchSnapshotForInstance",
                  "ssm:DescribeDocument",
                  "ssm:DescribeAssociation",
                  "ssmmessages:OpenDataChannel",
                  "ssmmessages:OpenControlChannel",
                  "ssmmessages:CreateDataChannel",
                  "ssmmessages:CreateControlChannel",
                  "ec2messages:SendReply",
                  "ec2messages:GetMessages",
                  "ec2messages:GetEndpoint",
                  "ec2messages:FailMessage",
                  "ec2messages:DeleteMessage",
                  "ec2messages:AcknowledgeMessage",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": "SecretsManager:GetSecretValue",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "Sid": "GetSecretValue",
              },
              {
                "Action": [
                  "acm-pca:IssueCertificate",
                  "acm-pca:GetCertificate",
                ],
                "Effect": "Allow",
                "Resource": "arn:aws:acm-pca:test-region:test-account:certificate-authority/test-acm-pca-id",
                "Sid": "IssueCert",
              },
              {
                "Action": "kms:Decrypt",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
                "Sid": "ProjectKms",
              },
            ],
            "Version": "2012-10-17",
          },
        },
        "Type": "AWS::IAM::ManagedPolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:655:25] Resource names not known at deployment time.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/managed-policy/cluster-mgmt/arn",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:655:25] Resource names not known at deployment time.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/managed-policy/cluster-mgmt/name",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::Select": [
              1,
              {
                "Fn::Split": [
                  "/",
                  {
                    "Fn::Select": [
                      5,
                      {
                        "Fn::Split": [
                          ":",
                          {
                            "Ref": "REPLACED-CFN-LOGICAL-ID",
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/cluster/name",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": "[{"apiVersion":"storage.k8s.io/v1","kind":"StorageClass","metadata":{"name":"efs-sc","labels":{"aws.cdk.eks/prune-c87186a17e17220b1f195caf2f196eec5737b630ce":""}},"provisioner":"efs.csi.aws.com"}]",
          "PruneLabel": "aws.cdk.eks/prune-c87186a17e17220b1f195caf2f196eec5737b630ce",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                ""},"labels":{"aws.cdk.eks/prune-c845eedb1276fbbaf904eb04af180b4bb6000e917e":"","app.kubernetes.io/name":"external-dns"},"name":"external-dns","namespace":"external-dns"}},{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"aws.cdk.eks/prune-c845eedb1276fbbaf904eb04af180b4bb6000e917e":"","app.kubernetes.io/name":"external-dns"},"name":"external-dns","namespace":"external-dns"},"rules":[{"apiGroups":[""],"resources":["services","endpoints","pods","nodes"],"verbs":["get","watch","list"]},{"apiGroups":["extensions","networking.k8s.io"],"resources":["ingresses"],"verbs":["get","watch","list"]}]},{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"aws.cdk.eks/prune-c845eedb1276fbbaf904eb04af180b4bb6000e917e":"","app.kubernetes.io/name":"external-dns"},"name":"external-dns-viewer","namespace":"external-dns"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"external-dns"},"subjects":[{"kind":"ServiceAccount","name":"external-dns","namespace":"external-dns"}]},{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"aws.cdk.eks/prune-c845eedb1276fbbaf904eb04af180b4bb6000e917e":"","app.kubernetes.io/name":"external-dns"},"name":"external-dns","namespace":"external-dns"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/name":"external-dns"}},"strategy":{"type":"Recreate"},"template":{"metadata":{"labels":{"app.kubernetes.io/name":"external-dns"}},"spec":{"containers":[{"args":["--source=service","--source=ingress","--provider=aws","--policy=upsert-only","--aws-zone-type=private","--registry=txt","--txt-owner-id=external-dns"],"env":[{"name":"AWS_DEFAULT_REGION","value":"",
                {
                  "Ref": "AWS::Region",
                },
                ""}],"image":"registry.k8s.io/external-dns/external-dns:v0.13.5","name":"external-dns"}],"serviceAccountName":"external-dns"}}}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c845eedb1276fbbaf904eb04af180b4bb6000e917e",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"external-dns","labels":{"aws.cdk.eks/prune-c844fe6be982bda4449ca9a373a734b5c610135b76":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"external-dns","labels":{"aws.cdk.eks/prune-c844fe6be982bda4449ca9a373a734b5c610135b76":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
                ""]}}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c844fe6be982bda4449ca9a373a734b5c610135b76",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"external-secrets","labels":{"aws.cdk.eks/prune-c884a955bde237b67757d1a25793664ae2590dc4b9":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"external-secrets","labels":{"aws.cdk.eks/prune-c884a955bde237b67757d1a25793664ae2590dc4b9":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
                ""]}}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c884a955bde237b67757d1a25793664ae2590dc4b9",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Policy::arn:<AWS::Partition>:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
                ],
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:750:25] AmazonEKSFargatePodExecutionRolePolicy is required for proper cluster function.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] ecr:GetAuthorizationToken does not accept a resource.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] Permissions are appropriate as inline policy.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] Permissions are appropriate as inline policy.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] Permissions are appropriate as inline policy.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Condition": {
                  "ArnLike": {
                    "aws:SourceArn": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":eks:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":fargateprofile/test-org-test-env-test-domain-test-nificluster-main/*",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Service": "eks-fargate-pods.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
                ],
              ],
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-nif-60e6a43c",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] ecr:GetAuthorizationToken does not accept a resource.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] Permissions are appropriate as inline policy.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] Permissions are appropriate as inline policy.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] Permissions are appropriate as inline policy.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:BatchGetImage",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ecr:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":repository/",
                      {
                        "Fn::Sub": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                    ],
                  ],
                },
              },
              {
                "Action": "ecr:GetAuthorizationToken",
                "Effect": "Allow",
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Policy::arn:<AWS::Partition>:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
                ],
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:750:25] AmazonEKSFargatePodExecutionRolePolicy is required for proper cluster function.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Condition": {
                  "ArnLike": {
                    "aws:SourceArn": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":eks:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":fargateprofile/test-org-test-env-test-domain-test-nificluster-main/*",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Service": "eks-fargate-pods.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
                ],
              ],
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-serv--4271a4",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Policy::arn:<AWS::Partition>:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
                ],
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:750:25] AmazonEKSFargatePodExecutionRolePolicy is required for proper cluster function.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Condition": {
                  "ArnLike": {
                    "aws:SourceArn": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":eks:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":fargateprofile/test-org-test-env-test-domain-test-nificluster-main/*",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Service": "eks-fargate-pods.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
                ],
              ],
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-system",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "AssumeRoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Config": {
            "clusterName": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "fargateProfileName": "nifi",
            "podExecutionRoleArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "selectors": [
              {
                "namespace": "nifi-test1",
              },
              {
                "namespace": "nifi-test2",
              },
            ],
            "tags": {
              "mdaa_cdk_app": "dataops-nifi",
              "mdaa_domain": "test-domain",
              "mdaa_env": "test-env",
              "mdaa_module_name": "test-nificluster-main",
              "mdaa_org": "test-org",
            },
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksClusterResourceProviderframeworkonEvent26D3AFA7Arn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-FargateProfile",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "AssumeRoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Config": {
            "clusterName": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "fargateProfileName": "services",
            "podExecutionRoleArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "selectors": [
              {
                "namespace": "external-dns",
              },
              {
                "namespace": "external-secrets",
              },
              {
                "namespace": "cert-manager",
              },
              {
                "namespace": "zookeeper",
              },
              {
                "namespace": "registry",
              },
            ],
            "tags": {
              "mdaa_cdk_app": "dataops-nifi",
              "mdaa_domain": "test-domain",
              "mdaa_env": "test-env",
              "mdaa_module_name": "test-nificluster-main",
              "mdaa_org": "test-org",
            },
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksClusterResourceProviderframeworkonEvent26D3AFA7Arn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-FargateProfile",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "AssumeRoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Config": {
            "clusterName": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "fargateProfileName": "system",
            "podExecutionRoleArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "selectors": [
              {
                "namespace": "default",
              },
              {
                "namespace": "kube-system",
              },
              {
                "namespace": "aws-observability",
              },
            ],
            "tags": {
              "mdaa_cdk_app": "dataops-nifi",
              "mdaa_domain": "test-domain",
              "mdaa_env": "test-env",
              "mdaa_module_name": "test-nificluster-main",
              "mdaa_org": "test-org",
            },
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksClusterResourceProviderframeworkonEvent26D3AFA7Arn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-FargateProfile",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "ClientIDList": [
            "sts.amazonaws.com",
          ],
          "CodeHash": "REPLACED-ASSET-HASH",
          "RejectUnauthorized": false,
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Url": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "OpenIdConnectIssuerUrl",
            ],
          },
        },
        "Type": "Custom::AWSCDKOpenIdConnectProvider",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-EC29",
                "reason": "[MDAA:@aws-mdaa/ec2-constructs/lib/instance.ts:245:25] Remediated through property override.",
              },
              {
                "id": "NIST.800.53.R5-EC2IMDSv2Enabled",
                "reason": "[MDAA:@aws-mdaa/ec2-constructs/lib/instance.ts:245:25] Remediated through property override.",
              },
              {
                "id": "HIPAA.Security-EC2IMDSv2Enabled",
                "reason": "[MDAA:@aws-mdaa/ec2-constructs/lib/instance.ts:245:25] Remediated through property override.",
              },
              {
                "id": "PCI.DSS.321-EC2IMDSv2Enabled",
                "reason": "[MDAA:@aws-mdaa/ec2-constructs/lib/instance.ts:245:25] Remediated through property override.",
              },
            ],
          },
        },
        "Properties": {
          "AvailabilityZone": "test-az",
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvda",
              "Ebs": {
                "DeleteOnTermination": false,
                "Encrypted": true,
                "KmsKeyId": {
                  "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
                "VolumeSize": 50,
              },
            },
          ],
          "DisableApiTermination": true,
          "IamInstanceProfile": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "ImageId": {
            "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "InstanceType": "t3.micro",
          "KeyName": "test-key-pair",
          "LaunchTemplate": {
            "LaunchTemplateName": "test-org-test-env-test-domain-test-nificluster-main-mgmt",
            "Version": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "LatestVersionNumber",
              ],
            },
          },
          "Monitoring": true,
          "PropagateTagsToVolumeOnCreation": true,
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "ClusterSecurityGroupId",
              ],
            },
          ],
          "SubnetId": "test-subnet-id",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
            {
              "Key": "Name",
              "Value": "test-org-test-env-test-domain-test-nificluster-main-mgmt",
            },
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash
mkdir -p /usr/local/bin && cd /usr/local/bin && curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.9/2024-01-04/bin/linux/amd64/kubectl && chmod +x /usr/local/bin/kubectl && cd ~
aws eks update-kubeconfig --region ",
                  {
                    "Ref": "AWS::Region",
                  },
                  " --name ",
                  {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                  "
cp /root/.kube/config /etc/kubeconfig && chmod o+r /etc/kubeconfig
echo 'export KUBECONFIG=/etc/kubeconfig' >> /etc/profile.d/kubectl.sh
yum install -y java-21-amazon-corretto.x86_64
aws secretsmanager get-secret-value --secret-id ",
                  {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                  " |jq -r '.SecretString' > /tmp/keystore-passwd
openssl ecparam -name secp384r1 -genkey -noout -out /root/mgmt-instance.key.pem
openssl req -new -sha256 -key /root/mgmt-instance.key.pem -out /root/mgmt-instance.csr -subj "/CN=mgmt-instance"
aws acm-pca issue-certificate --certificate-authority-arn arn:aws:acm-pca:test-region:test-account:certificate-authority/test-acm-pca-id --csr fileb:///root/mgmt-instance.csr  --signing-algorithm "SHA512WITHECDSA" --validity Value=7,Type="DAYS"|jq -r '.CertificateArn' > /tmp/certificate-arn
cd /root && wget https://dlcdn.apache.org/nifi/1.25.0/nifi-toolkit-1.25.0-bin.zip && unzip nifi-toolkit-1.25.0-bin.zip && mv /root/nifi-toolkit-1.25.0 /opt/nifi-toolkit
export CERT_ARN=\`cat /tmp/certificate-arn\` && aws acm-pca get-certificate --certificate-authority-arn arn:aws:acm-pca:test-region:test-account:certificate-authority/test-acm-pca-id --certificate-arn $CERT_ARN | jq -r .Certificate > /root/mgmt-instance.cert.pem
export CERT_ARN=\`cat /tmp/certificate-arn\` && aws acm-pca get-certificate --certificate-authority-arn arn:aws:acm-pca:test-region:test-account:certificate-authority/test-acm-pca-id --certificate-arn $CERT_ARN | jq -r .CertificateChain > /root/ca.cert.pem
openssl pkcs12 -export -in /root/mgmt-instance.cert.pem -inkey /root/mgmt-instance.key.pem -out /opt/nifi-toolkit/conf/mgmt-instance.cert.p12 -name mgmt-instance -password pass:\`cat /tmp/keystore-passwd\`
",
                ],
              ],
            },
          },
        },
        "Type": "AWS::EC2::Instance",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::InstanceProfile",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/instance/id-test-org-test-env-test-domain-test-nificluster-main-mgmt",
          "Tags": {
            "Name": "test-org-test-env-test-domain-test-nificluster-main-mgmt",
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "LaunchTemplateData": {
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/xvda",
                "Ebs": {
                  "DeleteOnTermination": false,
                  "Encrypted": true,
                  "KmsKeyId": {
                    "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                  },
                  "VolumeSize": 50,
                },
              },
            ],
            "MetadataOptions": {
              "HttpTokens": "required",
            },
            "TagSpecifications": [
              {
                "ResourceType": "instance",
                "Tags": [
                  {
                    "Key": "mdaa_cdk_app",
                    "Value": "dataops-nifi",
                  },
                  {
                    "Key": "mdaa_domain",
                    "Value": "test-domain",
                  },
                  {
                    "Key": "mdaa_env",
                    "Value": "test-env",
                  },
                  {
                    "Key": "mdaa_module_name",
                    "Value": "test-nificluster-main",
                  },
                  {
                    "Key": "mdaa_org",
                    "Value": "test-org",
                  },
                  {
                    "Key": "Name",
                    "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/eks-cluster/mgmt-instance/launch-template",
                  },
                ],
              },
              {
                "ResourceType": "volume",
                "Tags": [
                  {
                    "Key": "mdaa_cdk_app",
                    "Value": "dataops-nifi",
                  },
                  {
                    "Key": "mdaa_domain",
                    "Value": "test-domain",
                  },
                  {
                    "Key": "mdaa_env",
                    "Value": "test-env",
                  },
                  {
                    "Key": "mdaa_module_name",
                    "Value": "test-nificluster-main",
                  },
                  {
                    "Key": "mdaa_org",
                    "Value": "test-org",
                  },
                  {
                    "Key": "Name",
                    "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/eks-cluster/mgmt-instance/launch-template",
                  },
                ],
              },
            ],
          },
          "LaunchTemplateName": "test-org-test-env-test-domain-test-nificluster-main-mgmt",
          "TagSpecifications": [
            {
              "ResourceType": "launch-template",
              "Tags": [
                {
                  "Key": "mdaa_cdk_app",
                  "Value": "dataops-nifi",
                },
                {
                  "Key": "mdaa_domain",
                  "Value": "test-domain",
                },
                {
                  "Key": "mdaa_env",
                  "Value": "test-env",
                },
                {
                  "Key": "mdaa_module_name",
                  "Value": "test-nificluster-main",
                },
                {
                  "Key": "mdaa_org",
                  "Value": "test-org",
                },
                {
                  "Key": "Name",
                  "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/eks-cluster/mgmt-instance/launch-template",
                },
              ],
            },
          ],
        },
        "Type": "AWS::EC2::LaunchTemplate",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-mg--284ac04c",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/role/mgmt-instance/arn",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/role/mgmt-instance/id",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "RoleId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/role/mgmt-instance/name",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "instanceId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "kmsKeyArn": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
        },
        "Type": "Custom::Ec2VolumeEncryptionCheck",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"nifi-test1","labels":{"aws.cdk.eks/prune-c88907e94ec2e3c380257d7b5883d3cf35e61db1b8":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c88907e94ec2e3c380257d7b5883d3cf35e61db1b8":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
                ""]}}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c88907e94ec2e3c380257d7b5883d3cf35e61db1b8",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"nifi-test2","labels":{"aws.cdk.eks/prune-c86696c9e57d50ecf5a71f4c831342c7a037cd5e71":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c86696c9e57d50ecf5a71f4c831342c7a037cd5e71":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
                ""]}}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c86696c9e57d50ecf5a71f4c831342c7a037cd5e71",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"external-dns.alpha.kubernetes.io/hostname":"nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal","external-dns.alpha.kubernetes.io/ttl":"60"},"labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":"","app":"nifi"},"name":"nifi-svc","namespace":"nifi-test1"},"spec":{"clusterIP":"None","ports":[{"name":"nifi-ui","port":8443}],"selector":{"app":"nifi"}}},{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                ""},"name":"external-secret-store","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"SecretStore","metadata":{"name":"external-secret-store","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"spec":{"provider":{"aws":{"auth":{"jwt":{"serviceAccountRef":{"name":"external-secret-store"}}},"region":"",
                {
                  "Ref": "AWS::Region",
                },
                "","service":"SecretsManager"}}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"ExternalSecret","metadata":{"name":"nifi-external-secret","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"spec":{"data":[{"remoteRef":{"key":"",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Fn::Select": [
                          0,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          1,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          3,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          4,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          5,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          7,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          8,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          9,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          10,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          11,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          12,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  ],
                },
                ""},"secretKey":"admin-creds"},{"remoteRef":{"key":"",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Fn::Select": [
                          0,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          1,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          3,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          4,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          5,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          7,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          8,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          9,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          10,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          11,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          12,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  ],
                },
                ""},"secretKey":"sensitive-props-key"},{"remoteRef":{"key":"",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Fn::Select": [
                          0,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          1,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          3,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          4,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          5,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          7,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          8,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          9,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          10,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          11,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  ],
                },
                ""},"secretKey":"keystore-password"}],"refreshInterval":"1h","secretStoreRef":{"kind":"SecretStore","name":"external-secret-store"},"target":{"creationPolicy":"Owner","name":"nifi-secret"}}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"nifi-init-scripts","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"data":{"nifi_registry_start.sh":"#!/bin/bash\\n\\n# tail -f /dev/null\\n\\nrm -rf $NIFI_HOME/conf/*\\ncp -rL $NIFI_INIT_DIR/conf/* $NIFI_HOME/conf\\n\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_KEYSTORE_PASSWORD/\${NIFI_KEYSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_TRUSTSTORE_PASSWORD/\${NIFI_TRUSTSTORE_PASSWORD}/g\\" {} \\\\;\\n\\nmkdir -p \\"\${NIFI_REGISTRY_HOME}/logs/\\"\\ntouch \\"\${NIFI_REGISTRY_HOME}/logs/nifi-registry-app.log\\"\\n\\n# Continuously provide logs so that 'docker logs' can produce them\\ntail -F \\"\${NIFI_REGISTRY_HOME}/logs/nifi-registry-app.log\\" &\\n\\"\${NIFI_REGISTRY_HOME}/bin/nifi-registry.sh\\" run &\\nnifi_registry_pid=\\"$!\\"\\n\\ntrap \\"echo Received trapped signal, beginning shutdown...;\\" KILL TERM HUP INT EXIT;\\n\\necho NiFi-Registry running with PID \${nifi_registry_pid}.\\nwait \${nifi_registry_pid}","nifi_start.sh":"#!/bin/bash\\n\\n# tail -f /dev/null\\n\\nrm -rf $NIFI_HOME/conf/*\\ncp -rL $NIFI_INIT_DIR/conf/* $NIFI_HOME/conf\\n\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_HOSTNAME/\${HOSTNAME}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_KEYSTORE_PASSWORD/\${NIFI_KEYSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_TRUSTSTORE_PASSWORD/\${NIFI_TRUSTSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_SENSITIVE_PROPS_KEY/\${NIFI_SENSITIVE_PROPS_KEY}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_NIFI_ZOOKEEPER_CONNECT_STRING/\${NIFI_ZOOKEEPER_CONNECT_STRING}/g\\" {} \\\\;\\n\\nif [ -n \\"\${SINGLE_USER_CREDENTIALS_USERNAME}\\" ] && [ -n \\"\${SINGLE_USER_CREDENTIALS_PASSWORD}\\" ]; then\\n    \${NIFI_HOME}/bin/nifi.sh set-single-user-credentials \\"\${SINGLE_USER_CREDENTIALS_USERNAME}\\" \\"\${SINGLE_USER_CREDENTIALS_PASSWORD}\\"\\nfi\\n\\n\${NIFI_TOOLKIT_HOME}/bin/cli.sh session set nifi.props \\"\${NIFI_HOME}/conf/nifi-cli.config\\"\\n\\n# Continuously provide logs so that 'docker logs' can produce them\\n\\"\${NIFI_HOME}/bin/nifi.sh\\" run &\\nnifi_pid=\\"$!\\"\\ntail -F --pid=\${nifi_pid} \\"\${NIFI_HOME}/logs/nifi-app.log\\" &\\n\\ntrap 'echo Received trapped signal, beginning shutdown...;./bin/nifi.sh stop;exit 0;' TERM HUP INT;\\ntrap \\":\\" EXIT\\n\\necho NiFi running with PID \${nifi_pid}.\\nwait \${nifi_pid}"}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"nifi-config","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"data":{"authorizers.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<authorizers>\\n  <userGroupProvider>\\n    <identifier>file-user-group-provider</identifier>\\n    <class>org.apache.nifi.authorization.FileUserGroupProvider</class>\\n    <property name=\\"Users File\\">/opt/nifi/data/users.xml</property>\\n    <property name=\\"Legacy Authorized Users File\\"></property>\\n    <property name=\\"Initial User Identity 1\\">CN=cluster-manager.nifi-test1</property>\\n    <property name=\\"Initial User Identity nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Initial User Identity nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n  </userGroupProvider>\\n  <accessPolicyProvider>\\n    <identifier>file-access-policy-provider</identifier>\\n    <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>\\n    <property name=\\"User Group Provider\\">file-user-group-provider</property>\\n    <property name=\\"Authorizations File\\">/opt/nifi/data/authorizations.xml</property>\\n    <property name=\\"Initial Admin Identity\\">CN=cluster-manager.nifi-test1</property>\\n    <property name=\\"Legacy Authorized Users File\\"></property>\\n    <property name=\\"Node Identity 1\\"></property>\\n    <property name=\\"Node Group\\"></property>\\n    <property name=\\"Node Identity nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Node Identity nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n  </accessPolicyProvider>\\n  <authorizer>\\n    <identifier>managed-authorizer</identifier>\\n    <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>\\n    <property name=\\"Access Policy Provider\\">file-access-policy-provider</property>\\n  </authorizer>\\n  <authorizer>\\n    <identifier>single-user-authorizer</identifier>\\n    <class>org.apache.nifi.authorization.single.user.SingleUserAuthorizer</class>\\n  </authorizer>\\n</authorizers>\\n","bootstrap.conf":"#\\n# Licensed to the Apache Software Foundation (ASF) under one or more\\n# contributor license agreements.  See the NOTICE file distributed with\\n# this work for additional information regarding copyright ownership.\\n# The ASF licenses this file to You under the Apache License, Version 2.0\\n# (the \\"License\\"); you may not use this file except in compliance with\\n# the License.  You may obtain a copy of the License at\\n#\\n#   http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing, software\\n# distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n# See the License for the specific language governing permissions and\\n# limitations under the License.\\n#\\n\\n# Java command to use when running NiFi\\njava=java\\n\\n# Username to use when running NiFi. This value will be ignored on Windows.\\nrun.as=\\n\\n# Preserve shell environment while runnning as \\"run.as\\" user\\npreserve.environment=false\\n\\n# Configure where NiFi's lib and conf directories live\\nlib.dir=./lib\\nconf.dir=./conf\\n\\n# How long to wait after telling NiFi to shutdown before explicitly killing the Process\\ngraceful.shutdown.seconds=20\\n\\n# Disable JSR 199 so that we can use JSP's without running a JDK\\njava.arg.1=-Dorg.apache.jasper.compiler.disablejsr199=true\\n\\n# JVM memory settings\\njava.arg.2=-Xms512m\\njava.arg.3=-Xmx512m\\n\\n# Enable Remote Debugging\\n# java.arg.debug=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000\\n\\njava.arg.4=-Djava.net.preferIPv4Stack=true\\n\\n# allowRestrictedHeaders is required for Cluster/Node communications to work properly\\njava.arg.5=-Dsun.net.http.allowRestrictedHeaders=true\\njava.arg.6=-Djava.protocol.handler.pkgs=sun.net.www.protocol\\n\\n# The G1GC is known to cause some problems in Java 8 and earlier, but the issues were addressed in Java 9. If using Java 8 or earlier,\\n# it is recommended that G1GC not be used, especially in conjunction with the Write Ahead Provenance Repository. However, if using a newer\\n# version of Java, it can result in better performance without significant \\"stop-the-world\\" delays.\\n#java.arg.13=-XX:+UseG1GC\\n\\n#Set headless mode by default\\njava.arg.14=-Djava.awt.headless=true\\n\\n# Root key in hexadecimal format for encrypted sensitive configuration values\\nnifi.bootstrap.sensitive.key=\\n\\n# Sensitive Property Provider configuration\\n\\n# HashiCorp Vault Sensitive Property Providers\\n#nifi.bootstrap.protection.hashicorp.vault.conf=./conf/bootstrap-hashicorp-vault.conf\\n\\n# AWS Sensitive Property Providers\\n#nifi.bootstrap.protection.aws.conf=./conf/bootstrap-aws.conf\\n\\n# Azure Key Vault Sensitive Property Providers\\n#nifi.bootstrap.protection.azure.keyvault.conf=./conf/bootstrap-azure.conf\\n\\n# GCP KMS Sensitive Property Providers\\n#nifi.bootstrap.protection.gcp.kms.conf=./conf/bootstrap-gcp.conf\\n\\n# Sets the provider of SecureRandom to /dev/urandom to prevent blocking on VMs\\njava.arg.15=-Djava.security.egd=file:/dev/urandom\\n\\n# Requires JAAS to use only the provided JAAS configuration to authenticate a Subject, without using any \\"fallback\\" methods (such as prompting for username/password)\\n# Please see https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/single-signon.html, section \\"EXCEPTIONS TO THE MODEL\\"\\njava.arg.16=-Djavax.security.auth.useSubjectCredsOnly=true\\n\\n# Zookeeper 3.5 now includes an Admin Server that starts on port 8080, since NiFi is already using that port disable by default.\\n# Please see https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_adminserver_config for configuration options.\\njava.arg.17=-Dzookeeper.admin.enableServer=false\\n\\n# The following options configure a Java Agent to handle native library loading.\\n# It is needed when a custom jar (eg. JDBC driver) has been configured on a component in the flow and this custom jar depends on a native library\\n# and tries to load it by its absolute path (java.lang.System.load(String filename) method call).\\n# Use this Java Agent only if you get \\"Native Library ... already loaded in another classloader\\" errors otherwise!\\n#java.arg.18=-javaagent:./lib/aspectj/aspectjweaver-1.9.6.jar\\n#java.arg.19=-Daj.weaving.loadersToSkip=sun.misc.Launcher$AppClassLoader,jdk.internal.loader.ClassLoaders$AppClassLoader,org.eclipse.jetty.webapp.WebAppClassLoader,\\\\\\n#            org.apache.jasper.servlet.JasperLoader,org.jvnet.hk2.internal.DelegatingClassLoader,org.apache.nifi.nar.NarClassLoader\\n# End of Java Agent config for native library loading.\\n\\n###\\n# Notification Services for notifying interested parties when NiFi is stopped, started, dies\\n###\\n\\n# XML File that contains the definitions of the notification services\\nnotification.services.file=./conf/bootstrap-notification-services.xml\\n\\n# In the case that we are unable to send a notification for an event, how many times should we retry?\\nnotification.max.attempts=5\\n\\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is started?\\n#nifi.start.notification.services=email-notification\\n\\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is stopped?\\n#nifi.stop.notification.services=email-notification\\n\\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi dies?\\n#nifi.dead.notification.services=email-notification\\n\\n# The first curator connection issue is logged as ERROR, for example when NiFi cannot connect to one of the Zookeeper nodes.\\n# Additional connection issues are logged as DEBUG until the connection is restored.\\njava.arg.curator.supress.excessive.logs=-Dcurator-log-only-first-connection-issue-as-error-level=true\\n\\n# Port used to listen for communications from NiFi. If this property is missing, empty, or 0, a random ephemeral port is used.\\nnifi.bootstrap.listen.port=0\\n","logback.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n-->\\n\\n<configuration scan=\\"true\\" scanPeriod=\\"30 seconds\\">\\n    <shutdownHook class=\\"ch.qos.logback.core.hook.DefaultShutdownHook\\" />\\n\\n    <contextListener class=\\"ch.qos.logback.classic.jul.LevelChangePropagator\\">\\n        <resetJUL>true</resetJUL>\\n    </contextListener>\\n\\n    <appender name=\\"APP_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-app.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'app_%d.log'.\\n              For hourly rollover, use 'app_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\\n                \${org.apache.nifi.bootstrap.config.log.dir}/nifi-app_%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>\\n            <maxFileSize>100MB</maxFileSize>\\n            <!-- keep 30 log files worth of history -->\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <immediateFlush>true</immediateFlush>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"SSL_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-ssl.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'app_%d.log'.\\n              For hourly rollover, use 'app_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\\n                \${org.apache.nifi.bootstrap.config.log.dir}/nifi-ssl_%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>\\n            <maxFileSize>100MB</maxFileSize>\\n            <!-- keep 30 log files worth of history -->\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <immediateFlush>true</immediateFlush>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"USER_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-user.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'user_%d.log'.\\n              For hourly rollover, use 'user_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-user_%d.log</fileNamePattern>\\n            <!-- keep 30 log files worth of history -->\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"REQUEST_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-request.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-request_%d.log</fileNamePattern>\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"BOOTSTRAP_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-bootstrap.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'bootstrap_%d.log'.\\n              For hourly rollover, use 'bootstrap_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-bootstrap_%d.log</fileNamePattern>\\n            <!-- keep 5 log files worth of history -->\\n            <maxHistory>5</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"DEPRECATION_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-deprecation.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\">\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-deprecation_%d.%i.log</fileNamePattern>\\n            <maxFileSize>10MB</maxFileSize>\\n            <maxHistory>10</maxHistory>\\n            <totalSizeCap>100MB</totalSizeCap>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"CONSOLE\\" class=\\"ch.qos.logback.core.ConsoleAppender\\">\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <!-- valid logging levels: TRACE, DEBUG, INFO, WARN, ERROR -->\\n\\n    <!-- Deprecation Log -->\\n    <logger name=\\"deprecation\\" level=\\"WARN\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"DEPRECATION_FILE\\" />\\n    </logger>\\n\\n    <logger name=\\"org.apache.nifi\\" level=\\"INFO\\" />\\n    <logger name=\\"org.apache.nifi.processors\\" level=\\"WARN\\" />\\n    <logger name=\\"org.apache.nifi.processors.standard.LogAttribute\\" level=\\"INFO\\" />\\n    <logger name=\\"org.apache.nifi.processors.standard.LogMessage\\" level=\\"INFO\\" />\\n    <logger name=\\"org.apache.nifi.controller.repository.StandardProcessSession\\" level=\\"WARN\\" />\\n\\n\\n    <logger name=\\"org.apache.zookeeper.ClientCnxn\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.NIOServerCnxn\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.NIOServerCnxnFactory\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.NettyServerCnxnFactory\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.quorum\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.ZooKeeper\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.PrepRequestProcessor\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.nifi.controller.reporting.LogComponentStatuses\\" level=\\"ERROR\\" />\\n\\n    <logger name=\\"org.apache.calcite.runtime.CalciteException\\" level=\\"OFF\\" />\\n\\n    <logger name=\\"org.apache.curator.framework.recipes.leader.LeaderSelector\\" level=\\"OFF\\" />\\n    <logger name=\\"org.apache.curator.ConnectionState\\" level=\\"OFF\\" />\\n\\n    <!-- Logger for managing logging statements for nifi clusters. -->\\n    <logger name=\\"org.apache.nifi.cluster\\" level=\\"INFO\\" />\\n\\n    <!-- Logger for logging HTTP requests received by the web server. -->\\n    <logger name=\\"org.apache.nifi.server.JettyServer\\" level=\\"INFO\\" />\\n\\n    <!-- Logger for managing logging statements for jetty -->\\n    <logger name=\\"org.eclipse.jetty\\" level=\\"INFO\\" />\\n\\n    <!-- Suppress non-error messages due to excessive logging by class or library -->\\n    <logger name=\\"org.springframework\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.springframework.security\\" level=\\"INFO\\" />\\n\\n    <!-- Suppress non-error messages due to known warning about redundant path annotation (NIFI-574) -->\\n    <logger name=\\"org.glassfish.jersey.internal.Errors\\" level=\\"ERROR\\" />\\n\\n    <!-- Suppress non-error messages due to Jetty AnnotationParser emitting a large amount of WARNS.\\n    Issue described in NIFI-5479. -->\\n    <logger name=\\"org.eclipse.jetty.annotations.AnnotationParser\\" level=\\"ERROR\\" />\\n\\n    <!-- Suppress non-error messages from SSHJ which was emitting large amounts of INFO logs by\\n    default -->\\n    <logger name=\\"net.schmizz.sshj\\" level=\\"WARN\\" />\\n    <logger name=\\"com.hierynomus.sshj\\" level=\\"WARN\\" />\\n\\n    <!-- Suppress non-error messages from SMBJ which was emitting large amounts of INFO logs by\\n    default -->\\n    <logger name=\\"com.hierynomus.smbj\\" level=\\"WARN\\" />\\n\\n    <!-- Suppress non-error messages from AWS KCL which was emitting large amounts of INFO logs by\\n    default -->\\n    <logger name=\\"com.amazonaws.services.kinesis\\" level=\\"WARN\\" />\\n\\n    <!-- Suppress non-error messages from Apache Atlas which was emitting large amounts of INFO logs\\n    by default -->\\n    <logger name=\\"org.apache.atlas\\" level=\\"WARN\\" />\\n\\n    <!-- These log messages would normally go to the USER_FILE log, but they belong in the APP_FILE -->\\n    <logger name=\\"org.apache.nifi.web.security.requests\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"APP_FILE\\" />\\n    </logger>\\n\\n    <!--\\n        Logger for capturing user events. We do not want to propagate these\\n        log events to the root logger. These messages are only sent to the\\n        user-log appender.\\n    -->\\n    <logger name=\\"org.apache.nifi.web.security\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.web.api.config\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.authorization\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.cluster.authorization\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.web.api.AccessResource\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.opensaml\\" level=\\"WARN\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n\\n    <!-- Web Server Request Log -->\\n    <logger name=\\"org.apache.nifi.web.server.RequestLog\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"REQUEST_FILE\\" />\\n    </logger>\\n\\n    <!--\\n        Logger for capturing Bootstrap logs and NiFi's standard error and standard out.\\n    -->\\n    <logger name=\\"org.apache.nifi.bootstrap\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.bootstrap.Command\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"CONSOLE\\" />\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!-- Everything written to NiFi's Standard Out will be logged with the logger\\n    org.apache.nifi.StdOut at INFO level -->\\n    <logger name=\\"org.apache.nifi.StdOut\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!-- Everything written to NiFi's Standard Error will be logged with the logger\\n    org.apache.nifi.StdErr at ERROR level -->\\n    <logger name=\\"org.apache.nifi.StdErr\\" level=\\"ERROR\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!--DEBUG\\n    SSL Cert Reloading-->\\n    <logger name=\\"org.apache.nifi.web.server.util.StoreScanner\\" level=\\"DEBUG\\">\\n        <appender-ref ref=\\"SSL_FILE\\" />\\n    </logger>\\n\\n    <logger name=\\"org.eclipse.jetty.util.ssl.SslContextFactory\\" level=\\"DEBUG\\">\\n        <appender-ref ref=\\"SSL_FILE\\" />\\n    </logger>\\n\\n    <logger name=\\"org.apache.nifi.security.util.SslContextFactory\\" level=\\"DEBUG\\">\\n        <appender-ref ref=\\"SSL_FILE\\" />\\n    </logger>\\n\\n    <root level=\\"INFO\\">\\n        <appender-ref ref=\\"APP_FILE\\" />\\n    </root>\\n\\n</configuration>","login-identity-providers.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"no\\"?><!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n--><!--\\n    This file lists the login identity providers to use when running securely. In order\\n    to use a specific provider it must be configured here and it's identifier\\n    must be specified in the nifi.properties file.\\n--><loginIdentityProviders>\\n    <!--\\n        Single User Login Identity Provider supporting automated generation of Username and Password\\n\\n        The provider will write the following log messages when 'Username' and 'Password' are empty:\\n\\n        Generated Username [USERNAME]\\n        Generated Password [PASSWORD]\\n\\n        The 'Username' will be a random UUID and the 'Password' will be stored using bcrypt hashing\\n    -->\\n    <provider>\\n        <identifier>single-user-provider</identifier>\\n        <class>org.apache.nifi.authentication.single.user.SingleUserLoginIdentityProvider</class>\\n        <property name=\\"Username\\"></property>\\n        <property name=\\"Password\\"></property>\\n    </provider>\\n    <!--\\n        Identity Provider for users logging in with username/password against an LDAP server.\\n        \\n        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible\\n            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.\\n        \\n        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.\\n        'Manager Password' - The password of the manager that is used to bind to the LDAP server to\\n            search for users.\\n            \\n        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.\\n        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP\\n            using LDAPS or START_TLS.\\n        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using\\n            LDAPS or START_TLS such as PKCS12.\\n        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.\\n        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to\\n            LDAP using LDAPS or START_TLS.\\n        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using\\n            LDAPS or START_TLS such as PKCS12.\\n        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.\\n            Possible values are REQUIRED, WANT, NONE.\\n        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,\\n            TLSv1.1, TLSv1.2, etc).\\n        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully \\n            before the target context is closed. Defaults to false.\\n            \\n        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.\\n        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).\\n        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).\\n       \\n        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).\\n        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).\\n        'User Search Filter' - Filter for searching for users against the 'User Search Base'.\\n            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.\\n\\n        'Identity Strategy' - Strategy to identify users. Possible values are USE_DN and USE_USERNAME.\\n            The default functionality if this property is missing is USE_DN in order to retain\\n            backward compatibility. USE_DN will use the full DN of the user entry if possible.\\n            USE_USERNAME will use the username the user logged in with.\\n        'Authentication Expiration' - The duration of how long the user authentication is valid\\n            for. If the user never logs out, they will be required to log back in following\\n            this duration.\\n    -->\\n    <!-- To enable the ldap-provider remove 2 lines. This is 1 of 2. \\n    <provider>\\n        <identifier>ldap-provider</identifier>\\n        <class>org.apache.nifi.ldap.LdapProvider</class>\\n        <property name=\\"Authentication Strategy\\">START_TLS</property>\\n\\n        <property name=\\"Manager DN\\"></property>\\n        <property name=\\"Manager Password\\"></property>\\n\\n        <property name=\\"TLS - Keystore\\"></property>\\n        <property name=\\"TLS - Keystore Password\\"></property>\\n        <property name=\\"TLS - Keystore Type\\"></property>\\n        <property name=\\"TLS - Truststore\\"></property>\\n        <property name=\\"TLS - Truststore Password\\"></property>\\n        <property name=\\"TLS - Truststore Type\\"></property>\\n        <property name=\\"TLS - Client Auth\\"></property>\\n        <property name=\\"TLS - Protocol\\"></property>\\n        <property name=\\"TLS - Shutdown Gracefully\\"></property>\\n        \\n        <property name=\\"Referral Strategy\\">FOLLOW</property>\\n        <property name=\\"Connect Timeout\\">10 secs</property>\\n        <property name=\\"Read Timeout\\">10 secs</property>\\n\\n        <property name=\\"Url\\"></property>\\n        <property name=\\"User Search Base\\"></property>\\n        <property name=\\"User Search Filter\\"></property>\\n\\n        <property name=\\"Identity Strategy\\">USE_DN</property>\\n        <property name=\\"Authentication Expiration\\">12 hours</property>\\n    </provider>\\n    To enable the ldap-provider remove 2 lines. This is 2 of 2. -->\\n\\n    <!--\\n        Identity Provider for users logging in with username/password against a Kerberos KDC server.\\n\\n        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).\\n        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.\\n    -->\\n    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.\\n    <provider>\\n        <identifier>kerberos-provider</identifier>\\n        <class>org.apache.nifi.kerberos.KerberosProvider</class>\\n        <property name=\\"Default Realm\\">NIFI.APACHE.ORG</property>\\n        <property name=\\"Authentication Expiration\\">12 hours</property>\\n    </provider>\\n    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->\\n</loginIdentityProviders>","nifi-cli.config":"baseUrl=https://INIT_HOSTNAME.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal:8443\\nkeystore=/opt/nifi/ssl/manager/keystore.jks\\nkeystoreType=JKS\\nkeystorePasswd=INIT_KEYSTORE_PASSWORD\\nkeyPasswd=INIT_KEYSTORE_PASSWORD\\ntruststore=/opt/nifi/ssl/manager/truststore.jks\\ntruststoreType=JKS\\ntruststorePasswd=INIT_KEYSTORE_PASSWORD","nifi.properties":"nifi.flow.configuration.file=/opt/nifi/data/flow.xml.gz\\nnifi.flow.configuration.json.file=/opt/nifi/data/flow.json.gz\\nnifi.flow.configuration.archive.enabled=true\\nnifi.flow.configuration.archive.dir=/opt/nifi/data/flow_archive/\\nnifi.flow.configuration.archive.max.time=30 days\\nnifi.flow.configuration.archive.max.storage=5 GB\\nnifi.flow.configuration.archive.max.count=\\nnifi.flowcontroller.autoResumeState=true\\nnifi.flowcontroller.graceful.shutdown.period=10 sec\\nnifi.flowservice.writedelay.interval=500 ms\\nnifi.administrative.yield.duration=30 sec\\nnifi.bored.yield.duration=10 millis\\nnifi.queue.backpressure.count=10000\\nnifi.queue.backpressure.size=1 GB\\nnifi.authorizer.configuration.file=./conf/authorizers.xml\\nnifi.login.identity.provider.configuration.file=./conf/login-identity-providers.xml\\nnifi.templates.directory=/opt/nifi/data/templates\\nnifi.ui.banner.text=\\nnifi.ui.autorefresh.interval=30 sec\\nnifi.nar.library.directory=./lib\\nnifi.nar.library.autoload.directory=./extensions\\nnifi.nar.working.directory=./work/nar/\\nnifi.documentation.working.directory=./work/docs/components\\nnifi.nar.unpack.uber.jar=false\\nnifi.state.management.configuration.file=./conf/state-management.xml\\nnifi.state.management.provider.local=local-provider\\nnifi.state.management.provider.cluster=zk-provider\\nnifi.state.management.embedded.zookeeper.start=false\\nnifi.state.management.embedded.zookeeper.properties=./conf/zookeeper.properties\\nnifi.database.directory=/opt/nifi/data/database_repository\\nnifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE\\nnifi.repository.encryption.protocol.version=\\nnifi.repository.encryption.key.id=\\nnifi.repository.encryption.key.provider=\\nnifi.repository.encryption.key.provider.keystore.location=\\nnifi.repository.encryption.key.provider.keystore.password=\\nnifi.flowfile.repository.implementation=org.apache.nifi.controller.repository.WriteAheadFlowFileRepository\\nnifi.flowfile.repository.wal.implementation=org.apache.nifi.wali.SequentialAccessWriteAheadLog\\nnifi.flowfile.repository.directory=/opt/nifi/data/flowfile_repository\\nnifi.flowfile.repository.checkpoint.interval=20 secs\\nnifi.flowfile.repository.always.sync=false\\nnifi.flowfile.repository.retain.orphaned.flowfiles=true\\nnifi.swap.manager.implementation=org.apache.nifi.controller.FileSystemSwapManager\\nnifi.queue.swap.threshold=20000\\nnifi.content.repository.implementation=org.apache.nifi.controller.repository.FileSystemRepository\\nnifi.content.claim.max.appendable.size=50 KB\\nnifi.content.repository.directory.default=/opt/nifi/data/content_repository\\nnifi.content.repository.archive.max.retention.period=7 days\\nnifi.content.repository.archive.max.usage.percentage=50%\\nnifi.content.repository.archive.enabled=true\\nnifi.content.repository.always.sync=false\\nnifi.content.viewer.url=../nifi-content-viewer/\\nnifi.provenance.repository.implementation=org.apache.nifi.provenance.WriteAheadProvenanceRepository\\nnifi.provenance.repository.directory.default=/opt/nifi/data/provenance_repository\\nnifi.provenance.repository.max.storage.time=30 days\\nnifi.provenance.repository.max.storage.size=10 GB\\nnifi.provenance.repository.rollover.time=10 mins\\nnifi.provenance.repository.rollover.size=100 MB\\nnifi.provenance.repository.query.threads=2\\nnifi.provenance.repository.index.threads=2\\nnifi.provenance.repository.compress.on.rollover=true\\nnifi.provenance.repository.always.sync=false\\nnifi.provenance.repository.indexed.fields=EventType, FlowFileUUID, Filename, ProcessorID, Relationship\\nnifi.provenance.repository.indexed.attributes=\\nnifi.provenance.repository.index.shard.size=500 MB\\nnifi.provenance.repository.max.attribute.length=65536\\nnifi.provenance.repository.concurrent.merge.threads=2\\nnifi.provenance.repository.buffer.size=100000\\nnifi.components.status.repository.implementation=org.apache.nifi.controller.status.history.VolatileComponentStatusRepository\\nnifi.components.status.repository.buffer.size=1440\\nnifi.components.status.snapshot.frequency=1 min\\nnifi.status.repository.questdb.persist.node.days=14\\nnifi.status.repository.questdb.persist.component.days=3\\nnifi.status.repository.questdb.persist.location=/opt/nifi/data/status_repository\\nnifi.remote.input.host=INIT_HOSTNAME.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\nnifi.remote.input.secure=true\\nnifi.remote.input.socket.port=10000\\nnifi.remote.input.http.enabled=true\\nnifi.remote.input.http.transaction.ttl=30 sec\\nnifi.remote.contents.cache.expiration=30 secs\\nnifi.web.http.host=\\nnifi.web.http.port=\\nnifi.web.http.network.interface.default=\\nnifi.web.https.host=INIT_HOSTNAME.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\nnifi.web.https.port=8443\\nnifi.web.https.network.interface.default=\\nnifi.web.https.application.protocols=http/1.1\\nnifi.web.jetty.working.directory=./work/jetty\\nnifi.web.jetty.threads=200\\nnifi.web.max.header.size=16 KB\\nnifi.web.proxy.context.path=\\nnifi.web.proxy.host=\\nnifi.web.max.content.size=\\nnifi.web.max.requests.per.second=30000\\nnifi.web.max.access.token.requests.per.second=25\\nnifi.web.request.timeout=60 secs\\nnifi.web.request.ip.whitelist=\\nnifi.web.should.send.server.version=true\\nnifi.web.request.log.format=%{client}a - %u %t \\"%r\\" %s %O \\"%{Referer}i\\" \\"%{User-Agent}i\\"\\nnifi.web.https.ciphersuites.include=\\nnifi.web.https.ciphersuites.exclude=\\nnifi.sensitive.props.key=INIT_SENSITIVE_PROPS_KEY\\nnifi.sensitive.props.key.protected=\\nnifi.sensitive.props.algorithm=NIFI_PBKDF2_AES_GCM_256\\nnifi.sensitive.props.additional.keys=\\nnifi.security.autoreload.enabled=true\\nnifi.security.autoreload.interval=10 secs\\nnifi.security.keystore=/opt/nifi/data/ssl/keystore/keystore.jks\\nnifi.security.keystoreType=JKS\\nnifi.security.keystorePasswd=INIT_KEYSTORE_PASSWORD\\nnifi.security.keyPasswd=INIT_KEYSTORE_PASSWORD\\nnifi.security.truststore=/opt/nifi/data/ssl/truststore/truststore.jks\\nnifi.security.truststoreType=JKS\\nnifi.security.truststorePasswd=INIT_TRUSTSTORE_PASSWORD\\nnifi.security.user.authorizer=managed-authorizer\\nnifi.security.allow.anonymous.authentication=false\\nnifi.security.user.jws.key.rotation.period=PT1H\\nnifi.security.ocsp.responder.url=\\nnifi.security.ocsp.responder.certificate=\\nnifi.security.user.oidc.discovery.url=\\nnifi.security.user.oidc.connect.timeout=5 secs\\nnifi.security.user.oidc.read.timeout=5 secs\\nnifi.security.user.oidc.client.id=\\nnifi.security.user.oidc.client.secret=\\nnifi.security.user.oidc.preferred.jwsalgorithm=\\nnifi.security.user.oidc.additional.scopes=\\nnifi.security.user.oidc.claim.identifying.user=\\nnifi.security.user.oidc.fallback.claims.identifying.user=\\nnifi.security.user.oidc.claim.groups=groups\\nnifi.security.user.oidc.truststore.strategy=JDK\\nnifi.security.user.oidc.token.refresh.window=60 secs\\nnifi.security.user.knox.url=\\nnifi.security.user.knox.publicKey=\\nnifi.security.user.knox.cookieName=hadoop-jwt\\nnifi.security.user.knox.audiences=\\nnifi.security.user.saml.idp.metadata.url=https://portal.sso.ca-central-1.amazonaws.com/saml/metadata/abc-123\\nnifi.security.user.saml.sp.entity.id=org:apache:nifi:saml:sp-test1\\nnifi.security.user.saml.identity.attribute.name=\\nnifi.security.user.saml.group.attribute.name=\\nnifi.security.user.saml.request.signing.enabled=false\\nnifi.security.user.saml.want.assertions.signed=true\\nnifi.security.user.saml.signature.algorithm=http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\\nnifi.security.user.saml.authentication.expiration=12 hours\\nnifi.security.user.saml.single.logout.enabled=false\\nnifi.security.user.saml.http.client.truststore.strategy=JDK\\nnifi.security.user.saml.http.client.connect.timeout=30 secs\\nnifi.security.user.saml.http.client.read.timeout=30 secs\\nnifi.listener.bootstrap.port=0\\nnifi.cluster.protocol.heartbeat.interval=5 sec\\nnifi.cluster.protocol.heartbeat.missable.max=8\\nnifi.cluster.protocol.is.secure=true\\nnifi.cluster.is.node=true\\nnifi.cluster.node.address=INIT_HOSTNAME.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\nnifi.cluster.node.protocol.port=14443\\nnifi.cluster.node.protocol.max.threads=50\\nnifi.cluster.node.event.history.size=25\\nnifi.cluster.node.connection.timeout=5 sec\\nnifi.cluster.node.read.timeout=5 sec\\nnifi.cluster.node.max.concurrent.requests=100\\nnifi.cluster.firewall.file=\\nnifi.cluster.flow.election.max.wait.time=150 secs\\nnifi.cluster.flow.election.max.candidates=\\nnifi.cluster.load.balance.host=\\nnifi.cluster.load.balance.port=6342\\nnifi.cluster.load.balance.connections.per.node=1\\nnifi.cluster.load.balance.max.thread.count=8\\nnifi.cluster.load.balance.comms.timeout=30 sec\\nnifi.zookeeper.connect.string=zookeeper-0.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-1.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-2.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181\\nnifi.zookeeper.connect.timeout=10 secs\\nnifi.zookeeper.session.timeout=10 secs\\nnifi.zookeeper.root.node=/nifi/test1\\nnifi.zookeeper.client.secure=true\\nnifi.zookeeper.security.keystore=\\nnifi.zookeeper.security.keystoreType=\\nnifi.zookeeper.security.keystorePasswd=\\nnifi.zookeeper.security.truststore=\\nnifi.zookeeper.security.truststoreType=\\nnifi.zookeeper.security.truststorePasswd=\\nnifi.zookeeper.jute.maxbuffer=\\nnifi.zookeeper.auth.type=\\nnifi.zookeeper.kerberos.removeHostFromPrincipal=\\nnifi.zookeeper.kerberos.removeRealmFromPrincipal=\\nnifi.kerberos.krb5.file=\\nnifi.kerberos.service.principal=\\nnifi.kerberos.service.keytab.location=\\nnifi.kerberos.spnego.principal=\\nnifi.kerberos.spnego.keytab.location=\\nnifi.kerberos.spnego.authentication.expiration=12 hours\\nnifi.variable.registry.properties=\\nnifi.analytics.predict.enabled=false\\nnifi.analytics.predict.interval=3 mins\\nnifi.analytics.query.interval=5 mins\\nnifi.analytics.connection.model.implementation=org.apache.nifi.controller.status.analytics.models.OrdinaryLeastSquares\\nnifi.analytics.connection.model.score.name=rSquared\\nnifi.analytics.connection.model.score.threshold=.90\\nnifi.monitor.long.running.task.schedule=\\nnifi.monitor.long.running.task.threshold=\\nnifi.diagnostics.on.shutdown.enabled=false\\nnifi.diagnostics.on.shutdown.verbose=false\\nnifi.diagnostics.on.shutdown.directory=/opt/nifi/data/diagnostics\\nnifi.diagnostics.on.shutdown.max.filecount=10\\nnifi.diagnostics.on.shutdown.max.directory.size=10 MB\\nnifi.performance.tracking.percentage=0\\nnifi.cluster.leader.election.implementation=CuratorLeaderElectionManager\\nnifi.security.user.login.identity.provider=","nifi_manager.json":"{\\n  \\"registry_clients\\": {\\n    \\"example-extra-client\\": {\\n      \\"url\\": \\"https://some-external-registry-url:8443\\"\\n    },\\n    \\"test-org-test-env-test-domain-test-nificluster-main-registry\\": {\\n      \\"url\\": \\"https://nifi-registry.test-org-test-env-test-domain-test-nificluster-main.internal:8443\\"\\n    }\\n  },\\n  \\"identities\\": [\\n    \\"test-identity-1\\",\\n    \\"test-identity-2\\",\\n    \\"test-identity-3\\",\\n    \\"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"some-admin-identity\\",\\n    \\"some-other-admin-identity\\",\\n    \\"CN=test-external-node1\\",\\n    \\"CN=test-external-node2\\",\\n    \\"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n  ],\\n  \\"groups\\": {\\n    \\"test_group\\": [\\n      \\"test-identity-1\\",\\n      \\"test-identity-2\\"\\n    ],\\n    \\"cluster_nodes\\": [\\n      \\"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n    ],\\n    \\"admins\\": [\\n      \\"some-admin-identity\\",\\n      \\"some-other-admin-identity\\"\\n    ],\\n    \\"external_nodes\\": [\\n      \\"CN=test-external-node1\\",\\n      \\"CN=test-external-node2\\",\\n      \\"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n    ]\\n  },\\n  \\"policies\\": [\\n    {\\n      \\"resource\\": \\"/site-to-site\\",\\n      \\"action\\": \\"READ\\"\\n    },\\n    {\\n      \\"resource\\": \\"/process-groups/ROOT_ID\\",\\n      \\"action\\": \\"READ\\"\\n    },\\n    {\\n      \\"resource\\": \\"/process-groups/ROOT_ID\\",\\n      \\"action\\": \\"WRITE\\"\\n    }\\n  ],\\n  \\"authorizations\\": [\\n    {\\n      \\"policyResourcePattern\\": \\"/data/ROOT_ID\\",\\n      \\"actions\\": [\\n        \\"READ\\"\\n      ],\\n      \\"groups\\": [\\n        \\"test_group\\"\\n      ],\\n      \\"identities\\": [\\n        \\"test-identity-1\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/data/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"test_group\\"\\n      ],\\n      \\"identities\\": [\\n        \\"test-identity-1\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/data/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"cluster_nodes\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"admins\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/site-to-site\\",\\n      \\"actions\\": [\\n        \\"READ\\"\\n      ],\\n      \\"groups\\": [\\n        \\"external_nodes\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/data-transfer/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"external_nodes\\"\\n      ]\\n    }\\n  ]\\n}","state-management.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n-->\\n<!--\\n  This file provides a mechanism for defining and configuring the State Providers\\n  that should be used for storing state locally and across a NiFi cluster. In order\\n  to use a specific provider, it must be configured here and its identifier\\n  must be specified in the nifi.properties file.\\n-->\\n<stateManagement>\\n    <!--\\n        State Provider that stores state locally in a configurable directory. This Provider requires the\\n    following properties:\\n        \\n        Directory - the directory to store components' state in. If the directory being used is a\\n    sub-directory of the NiFi installation, it\\n                    is important that the directory be copied over to the new version when upgrading NiFi.\\n        Always Sync - If set to true, any change to the repository will be synchronized to the disk,\\n    meaning that NiFi will ask the operating system not to cache the information. This is very\\n                expensive and can significantly reduce NiFi performance. However, if it is false, there could be\\n    the potential for data loss if either there is a sudden power loss or the\\n                operating system crashes. The default value is false.\\n        Partitions - The number of partitions.\\n        Checkpoint Interval - The amount of time between checkpoints.\\n     -->\\n    <local-provider>\\n        <id>local-provider</id>\\n        <class>org.apache.nifi.controller.state.providers.local.WriteAheadLocalStateProvider</class>\\n        <property name=\\"Directory\\">./state/local</property>\\n        <property name=\\"Always Sync\\">false</property>\\n        <property name=\\"Partitions\\">16</property>\\n        <property name=\\"Checkpoint Interval\\">2 mins</property>\\n    </local-provider>\\n\\n    <!--\\n        State Provider that is used to store state in ZooKeeper. This Provider requires the following\\n    properties:\\n        \\n        Root Node - the root node in ZooKeeper where state should be stored. The default is '/nifi', but it\\n    is advisable to change this to a different value if not using\\n                   the embedded ZooKeeper server and if multiple NiFi instances may all be using the same ZooKeeper\\n    Server.\\n                   \\n        Connect String - A comma-separated list of host:port pairs to connect to ZooKeeper. For example,\\n    myhost.mydomain:2181,host2.mydomain:5555,host3:6666\\n        \\n        Session Timeout - Specifies how long this instance of NiFi is allowed to be disconnected from\\n    ZooKeeper before creating a new ZooKeeper Session. Default value is \\"30 seconds\\"\\n        \\n        Access Control - Specifies which Access Controls will be applied to the ZooKeeper ZNodes that are\\n    created by this State Provider. This value must be set to one of:\\n                            - Open  : ZNodes will be open to any ZooKeeper client.\\n                            - CreatorOnly  : ZNodes will be accessible only by the creator. The creator will have full access to\\n    create children, read, write, delete, and administer the ZNodes.\\n                                             This option is available only if access to ZooKeeper is secured via Kerberos or if a Username and\\n    Password are set.\\n    -->\\n    <cluster-provider>\\n        <id>zk-provider</id>\\n        <class>org.apache.nifi.controller.state.providers.zookeeper.ZooKeeperStateProvider</class>\\n        <property name=\\"Connect String\\">INIT_NIFI_ZOOKEEPER_CONNECT_STRING</property>\\n        <property name=\\"Root Node\\">/nifi</property>\\n        <property name=\\"Session Timeout\\">10 seconds</property>\\n        <property name=\\"Access Control\\">Open</property>\\n    </cluster-provider>\\n\\n    <!--\\n        Cluster State Provider that stores state in Redis. This can be used as an alternative to the\\n    ZooKeeper State Provider.\\n\\n        This provider requires the following properties:\\n\\n            Redis Mode - The type of Redis instance:\\n                            - Standalone\\n                            - Sentinel\\n                            - Cluster (currently not supported for state-management due to use of WATCH command which Redis\\n    does not support in clustered mode)\\n\\n            Connection String - The connection string for Redis.\\n                        - In a standalone instance this value will be of the form hostname:port.\\n                        - In a sentinel instance this value will be the comma-separated list of sentinels, such as\\n    host1:port1,host2:port2,host3:port3.\\n                        - In a clustered instance this value will be the comma-separated list of cluster masters, such as\\n    host1:port,host2:port,host3:port.\\n\\n        This provider has the following optional properties:\\n\\n            Key Prefix - The prefix for each key stored by this state provider. When sharing a single Redis\\n    across multiple NiFi instances, setting a unique\\n                        value for the Key Prefix will make it easier to identify which instances the keys came from\\n    (default nifi/components/).\\n\\n            Database Index - The database index to be used by connections created from this connection pool.\\n                        See the databases property in redis.conf, by default databases 0-15 will be available.\\n\\n            Communication Timeout - The timeout to use when attempting to communicate with Redis.\\n\\n            Cluster Max Redirects - The maximum number of redirects that can be performed when clustered.\\n\\n            Sentinel Master - The name of the sentinel master, require when Mode is set to Sentinel.\\n\\n            Password - The password used to authenticate to the Redis server. See the requirepass property in\\n    redis.conf.\\n\\n            Enable TLS - If true, the Redis connection will be configured to use TLS, using the keystore and\\n    truststore settings configured in\\n                    nifi.properties.  This means that a TLS-enabled Redis connection is only possible if the Apache NiFi\\n    instance is running in secure mode.\\n                    If this property is false, an insecure Redis connection will be used even if the Apache NiFi\\n    instance is secure (default false).\\n\\n            Pool - Max Total - The maximum number of connections that can be allocated by the pool (checked out\\n    to clients, or idle awaiting checkout).\\n                        A negative value indicates that there is no limit.\\n\\n            Pool - Max Idle - The maximum number of idle connections that can be held in the pool, or a\\n    negative value if there is no limit.\\n\\n            Pool - Min Idle - The target for the minimum number of idle connections to maintain in the pool. If\\n    the configured value of Min Idle is\\n                    greater than the configured value for Max Idle, then the value of Max Idle will be used instead.\\n\\n            Pool - Block When Exhausted - Whether or not clients should block and wait when trying to obtain a\\n    connection from the pool when the pool\\n                    has no available connections. Setting this to false means an error will occur immediately when a\\n    client requests a connection and\\n                    none are available.\\n\\n            Pool - Max Wait Time - The amount of time to wait for an available connection when Block When\\n    Exhausted is set to true.\\n\\n            Pool - Min Evictable Idle Time - The minimum amount of time an object may sit idle in the pool\\n    before it is eligible for eviction.\\n\\n            Pool - Time Between Eviction Runs - The amount of time between attempting to evict idle connections\\n    from the pool.\\n\\n            Pool - Num Tests Per Eviction Run - The number of connections to tests per eviction attempt. A\\n    negative value indicates to test all connections.\\n\\n            Pool - Test On Create - Whether or not connections should be tested upon creation (default false).\\n\\n            Pool - Test On Borrow - Whether or not connections should be tested upon borrowing from the pool\\n    (default false).\\n\\n            Pool - Test On Return - Whether or not connections should be tested upon returning to the pool\\n    (default false).\\n\\n            Pool - Test While Idle - Whether or not connections should be tested while idle (default true).\\n\\n        <cluster-provider>\\n            <id>redis-provider</id>\\n            <class>org.apache.nifi.redis.state.RedisStateProvider</class>\\n            <property name=\\"Redis Mode\\">Standalone</property>\\n            <property name=\\"Connection String\\">localhost:6379</property>\\n        </cluster-provider>\\n    -->\\n\\n</stateManagement>"}},{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                ""},"name":"nifi","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":"","app":"nifi"},"name":"nifi-vol-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","namespace":"nifi-test1"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"nifi-data-nifi-0","namespace":"nifi-test1"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "::",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":"","app":"nifi"},"name":"nifi-vol-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","namespace":"nifi-test1"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"nifi-data-nifi-1","namespace":"nifi-test1"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "::",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"name":"nifi","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"spec":{"persistentVolumeClaimRetentionPolicy":{"whenDeleted":"Retain","whenScaled":"Delete"},"podManagementPolicy":"Parallel","replicas":2,"selector":{"matchLabels":{"app":"nifi"}},"serviceName":"nifi-svc","template":{"metadata":{"labels":{"app":"nifi"}},"spec":{"containers":[{"command":["sh","/opt/nifi/scripts/nifi_manager.sh"],"env":[{"name":"NIFI_APP","value":"nifi"},{"name":"MANAGER_CONFIG","value":"/opt/nifi/init/conf/nifi_manager.json"},{"name":"NIFI_INIT_DIR","value":"/opt/nifi/init"},{"name":"NIFI_DATA_DIR","value":"/opt/nifi/data"},{"name":"NIFI_SENSITIVE_PROPS_KEY","valueFrom":{"secretKeyRef":{"key":"sensitive-props-key","name":"nifi-secret","optional":false}}},{"name":"NIFI_SSL_BASE_PATH","value":"/opt/nifi/ssl"},{"name":"NIFI_ZOOKEEPER_CONNECT_STRING","value":"zookeeper-0.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-1.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-2.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181"},{"name":"NIFI_KEYSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}},{"name":"NIFI_TRUSTSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}},{"name":"PYTHONUNBUFFERED","value":"1"},{"name":"NIFI_NODES","value":"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal,CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal"}],"image":"",
                {
                  "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:0008f52ad2d4c5b502dcecef172136d1f1d40ebdb528a0a94a0ec5d27ebad8bc",
                },
                "","name":"nifi-manager","resources":{"limits":{"cpu":"250m","memory":"0.5Gi"},"requests":{"cpu":"250m","memory":"0.5Gi"}},"volumeMounts":[{"mountPath":"/opt/nifi/init/conf","name":"nifi-config"},{"mountPath":"/home/nifi/.aws","name":"aws-creds"},{"mountPath":"/.local","name":"pip-local"},{"mountPath":"/opt/nifi/init/scripts","name":"nifi-init-scripts"},{"mountPath":"/opt/nifi/data","name":"nifi-data"},{"mountPath":"/opt/nifi/ssl/manager","name":"manager-ssl","readOnly":true},{"mountPath":"/opt/nifi/ssl/nifi-0","name":"nifi-0-ssl","readOnly":true},{"mountPath":"/opt/nifi/ssl/nifi-1","name":"nifi-1-ssl","readOnly":true}]},{"command":["bash","-c","/opt/nifi/init/scripts/nifi_start.sh"],"env":[{"name":"NIFI_INIT_DIR","value":"/opt/nifi/init"},{"name":"NIFI_DATA_DIR","value":"/opt/nifi/data"},{"name":"NIFI_HOME","value":"/opt/nifi/nifi-current"},{"name":"NIFI_SENSITIVE_PROPS_KEY","valueFrom":{"secretKeyRef":{"key":"sensitive-props-key","name":"nifi-secret","optional":false}}},{"name":"NIFI_SSL_BASE_PATH","value":"/opt/nifi/ssl"},{"name":"NIFI_ZOOKEEPER_CONNECT_STRING","value":"zookeeper-0.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-1.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-2.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181"},{"name":"NIFI_KEYSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}},{"name":"NIFI_TRUSTSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}}],"image":"apache/nifi:1.25.0","name":"nifi","ports":[{"containerPort":8443}],"resources":{"limits":{"cpu":"1","memory":"2Gi"},"requests":{"cpu":"1","memory":"2Gi"}},"volumeMounts":[{"mountPath":"/opt/nifi/init/conf","name":"nifi-config"},{"mountPath":"/opt/nifi/init/scripts","name":"nifi-init-scripts"},{"mountPath":"/opt/nifi/data","name":"nifi-data"},{"mountPath":"/home/nifi/.aws","name":"aws-creds"},{"mountPath":"/opt/nifi/ssl/nifi-0","name":"nifi-0-ssl","readOnly":true},{"mountPath":"/opt/nifi/ssl/nifi-1","name":"nifi-1-ssl","readOnly":true}]}],"dnsConfig":{"searches":["nifi-svc.nifi-test1.svc.cluster.local"]},"securityContext":{"fsGroup":1000,"runAsGroup":1000,"runAsUser":1000},"serviceAccountName":"nifi","shareProcessNamespace":true,"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}],"volumes":[{"configMap":{"defaultMode":493,"name":"nifi-init-scripts"},"name":"nifi-init-scripts"},{"configMap":{"defaultMode":493,"name":"nifi-config"},"name":"nifi-config"},{"emptyDir":{},"name":"aws-creds"},{"emptyDir":{},"name":"pip-local"},{"name":"manager-ssl","secret":{"secretName":"manager-ssl"}},{"name":"nifi-0-ssl","secret":{"secretName":"nifi-0-ssl"}},{"name":"nifi-1-ssl","secret":{"secretName":"nifi-1-ssl"}}]}},"volumeClaimTemplates":[{"metadata":{"name":"nifi-data"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"5Gi"}},"selector":{"matchLabels":{"app":"nifi"}},"storageClassName":"efs-sc"}}]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"manager-cert","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"spec":{"commonName":"cluster-manager.nifi-test1","duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"manager-ssl","usages":["server auth","client auth"]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"nifi-0-cert","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"spec":{"commonName":"nifi-0.nifi-test1","dnsNames":["localhost","nifi-0.nifi-svc.nifi-test1.svc.cluster.local","nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"nifi-0-ssl","usages":["server auth","client auth"]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"nifi-1-cert","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"spec":{"commonName":"nifi-1.nifi-test1","dnsNames":["localhost","nifi-1.nifi-svc.nifi-test1.svc.cluster.local","nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"nifi-1-ssl","usages":["server auth","client auth"]}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"external-dns.alpha.kubernetes.io/hostname":"nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal","external-dns.alpha.kubernetes.io/ttl":"60"},"labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":"","app":"nifi"},"name":"nifi-svc","namespace":"nifi-test2"},"spec":{"clusterIP":"None","ports":[{"name":"nifi-ui","port":8444}],"selector":{"app":"nifi"}}},{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                ""},"name":"external-secret-store","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"SecretStore","metadata":{"name":"external-secret-store","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"spec":{"provider":{"aws":{"auth":{"jwt":{"serviceAccountRef":{"name":"external-secret-store"}}},"region":"",
                {
                  "Ref": "AWS::Region",
                },
                "","service":"SecretsManager"}}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"ExternalSecret","metadata":{"name":"nifi-external-secret","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"spec":{"data":[{"remoteRef":{"key":"",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Fn::Select": [
                          0,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          1,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          3,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          4,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          5,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          7,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          8,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          9,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          10,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          11,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          12,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  ],
                },
                ""},"secretKey":"admin-creds"},{"remoteRef":{"key":"",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Fn::Select": [
                          0,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          1,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          3,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          4,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          5,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          7,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          8,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          9,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          10,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          11,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          12,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  ],
                },
                ""},"secretKey":"sensitive-props-key"},{"remoteRef":{"key":"",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Fn::Select": [
                          0,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          1,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          3,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          4,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          5,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          7,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          8,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          9,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          10,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          11,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  ],
                },
                ""},"secretKey":"keystore-password"}],"refreshInterval":"1h","secretStoreRef":{"kind":"SecretStore","name":"external-secret-store"},"target":{"creationPolicy":"Owner","name":"nifi-secret"}}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"nifi-init-scripts","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"data":{"nifi_registry_start.sh":"#!/bin/bash\\n\\n# tail -f /dev/null\\n\\nrm -rf $NIFI_HOME/conf/*\\ncp -rL $NIFI_INIT_DIR/conf/* $NIFI_HOME/conf\\n\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_KEYSTORE_PASSWORD/\${NIFI_KEYSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_TRUSTSTORE_PASSWORD/\${NIFI_TRUSTSTORE_PASSWORD}/g\\" {} \\\\;\\n\\nmkdir -p \\"\${NIFI_REGISTRY_HOME}/logs/\\"\\ntouch \\"\${NIFI_REGISTRY_HOME}/logs/nifi-registry-app.log\\"\\n\\n# Continuously provide logs so that 'docker logs' can produce them\\ntail -F \\"\${NIFI_REGISTRY_HOME}/logs/nifi-registry-app.log\\" &\\n\\"\${NIFI_REGISTRY_HOME}/bin/nifi-registry.sh\\" run &\\nnifi_registry_pid=\\"$!\\"\\n\\ntrap \\"echo Received trapped signal, beginning shutdown...;\\" KILL TERM HUP INT EXIT;\\n\\necho NiFi-Registry running with PID \${nifi_registry_pid}.\\nwait \${nifi_registry_pid}","nifi_start.sh":"#!/bin/bash\\n\\n# tail -f /dev/null\\n\\nrm -rf $NIFI_HOME/conf/*\\ncp -rL $NIFI_INIT_DIR/conf/* $NIFI_HOME/conf\\n\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_HOSTNAME/\${HOSTNAME}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_KEYSTORE_PASSWORD/\${NIFI_KEYSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_TRUSTSTORE_PASSWORD/\${NIFI_TRUSTSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_SENSITIVE_PROPS_KEY/\${NIFI_SENSITIVE_PROPS_KEY}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_NIFI_ZOOKEEPER_CONNECT_STRING/\${NIFI_ZOOKEEPER_CONNECT_STRING}/g\\" {} \\\\;\\n\\nif [ -n \\"\${SINGLE_USER_CREDENTIALS_USERNAME}\\" ] && [ -n \\"\${SINGLE_USER_CREDENTIALS_PASSWORD}\\" ]; then\\n    \${NIFI_HOME}/bin/nifi.sh set-single-user-credentials \\"\${SINGLE_USER_CREDENTIALS_USERNAME}\\" \\"\${SINGLE_USER_CREDENTIALS_PASSWORD}\\"\\nfi\\n\\n\${NIFI_TOOLKIT_HOME}/bin/cli.sh session set nifi.props \\"\${NIFI_HOME}/conf/nifi-cli.config\\"\\n\\n# Continuously provide logs so that 'docker logs' can produce them\\n\\"\${NIFI_HOME}/bin/nifi.sh\\" run &\\nnifi_pid=\\"$!\\"\\ntail -F --pid=\${nifi_pid} \\"\${NIFI_HOME}/logs/nifi-app.log\\" &\\n\\ntrap 'echo Received trapped signal, beginning shutdown...;./bin/nifi.sh stop;exit 0;' TERM HUP INT;\\ntrap \\":\\" EXIT\\n\\necho NiFi running with PID \${nifi_pid}.\\nwait \${nifi_pid}"}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"nifi-config","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"data":{"authorizers.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<authorizers>\\n  <userGroupProvider>\\n    <identifier>file-user-group-provider</identifier>\\n    <class>org.apache.nifi.authorization.FileUserGroupProvider</class>\\n    <property name=\\"Users File\\">/opt/nifi/data/users.xml</property>\\n    <property name=\\"Legacy Authorized Users File\\"></property>\\n    <property name=\\"Initial User Identity 1\\">CN=cluster-manager.nifi-test2</property>\\n    <property name=\\"Initial User Identity nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Initial User Identity nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n  </userGroupProvider>\\n  <accessPolicyProvider>\\n    <identifier>file-access-policy-provider</identifier>\\n    <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>\\n    <property name=\\"User Group Provider\\">file-user-group-provider</property>\\n    <property name=\\"Authorizations File\\">/opt/nifi/data/authorizations.xml</property>\\n    <property name=\\"Initial Admin Identity\\">CN=cluster-manager.nifi-test2</property>\\n    <property name=\\"Legacy Authorized Users File\\"></property>\\n    <property name=\\"Node Identity 1\\"></property>\\n    <property name=\\"Node Group\\"></property>\\n    <property name=\\"Node Identity nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Node Identity nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n  </accessPolicyProvider>\\n  <authorizer>\\n    <identifier>managed-authorizer</identifier>\\n    <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>\\n    <property name=\\"Access Policy Provider\\">file-access-policy-provider</property>\\n  </authorizer>\\n  <authorizer>\\n    <identifier>single-user-authorizer</identifier>\\n    <class>org.apache.nifi.authorization.single.user.SingleUserAuthorizer</class>\\n  </authorizer>\\n</authorizers>\\n","bootstrap.conf":"#\\n# Licensed to the Apache Software Foundation (ASF) under one or more\\n# contributor license agreements.  See the NOTICE file distributed with\\n# this work for additional information regarding copyright ownership.\\n# The ASF licenses this file to You under the Apache License, Version 2.0\\n# (the \\"License\\"); you may not use this file except in compliance with\\n# the License.  You may obtain a copy of the License at\\n#\\n#   http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing, software\\n# distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n# See the License for the specific language governing permissions and\\n# limitations under the License.\\n#\\n\\n# Java command to use when running NiFi\\njava=java\\n\\n# Username to use when running NiFi. This value will be ignored on Windows.\\nrun.as=\\n\\n# Preserve shell environment while runnning as \\"run.as\\" user\\npreserve.environment=false\\n\\n# Configure where NiFi's lib and conf directories live\\nlib.dir=./lib\\nconf.dir=./conf\\n\\n# How long to wait after telling NiFi to shutdown before explicitly killing the Process\\ngraceful.shutdown.seconds=20\\n\\n# Disable JSR 199 so that we can use JSP's without running a JDK\\njava.arg.1=-Dorg.apache.jasper.compiler.disablejsr199=true\\n\\n# JVM memory settings\\njava.arg.2=-Xms512m\\njava.arg.3=-Xmx512m\\n\\n# Enable Remote Debugging\\n# java.arg.debug=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000\\n\\njava.arg.4=-Djava.net.preferIPv4Stack=true\\n\\n# allowRestrictedHeaders is required for Cluster/Node communications to work properly\\njava.arg.5=-Dsun.net.http.allowRestrictedHeaders=true\\njava.arg.6=-Djava.protocol.handler.pkgs=sun.net.www.protocol\\n\\n# The G1GC is known to cause some problems in Java 8 and earlier, but the issues were addressed in Java 9. If using Java 8 or earlier,\\n# it is recommended that G1GC not be used, especially in conjunction with the Write Ahead Provenance Repository. However, if using a newer\\n# version of Java, it can result in better performance without significant \\"stop-the-world\\" delays.\\n#java.arg.13=-XX:+UseG1GC\\n\\n#Set headless mode by default\\njava.arg.14=-Djava.awt.headless=true\\n\\n# Root key in hexadecimal format for encrypted sensitive configuration values\\nnifi.bootstrap.sensitive.key=\\n\\n# Sensitive Property Provider configuration\\n\\n# HashiCorp Vault Sensitive Property Providers\\n#nifi.bootstrap.protection.hashicorp.vault.conf=./conf/bootstrap-hashicorp-vault.conf\\n\\n# AWS Sensitive Property Providers\\n#nifi.bootstrap.protection.aws.conf=./conf/bootstrap-aws.conf\\n\\n# Azure Key Vault Sensitive Property Providers\\n#nifi.bootstrap.protection.azure.keyvault.conf=./conf/bootstrap-azure.conf\\n\\n# GCP KMS Sensitive Property Providers\\n#nifi.bootstrap.protection.gcp.kms.conf=./conf/bootstrap-gcp.conf\\n\\n# Sets the provider of SecureRandom to /dev/urandom to prevent blocking on VMs\\njava.arg.15=-Djava.security.egd=file:/dev/urandom\\n\\n# Requires JAAS to use only the provided JAAS configuration to authenticate a Subject, without using any \\"fallback\\" methods (such as prompting for username/password)\\n# Please see https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/single-signon.html, section \\"EXCEPTIONS TO THE MODEL\\"\\njava.arg.16=-Djavax.security.auth.useSubjectCredsOnly=true\\n\\n# Zookeeper 3.5 now includes an Admin Server that starts on port 8080, since NiFi is already using that port disable by default.\\n# Please see https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_adminserver_config for configuration options.\\njava.arg.17=-Dzookeeper.admin.enableServer=false\\n\\n# The following options configure a Java Agent to handle native library loading.\\n# It is needed when a custom jar (eg. JDBC driver) has been configured on a component in the flow and this custom jar depends on a native library\\n# and tries to load it by its absolute path (java.lang.System.load(String filename) method call).\\n# Use this Java Agent only if you get \\"Native Library ... already loaded in another classloader\\" errors otherwise!\\n#java.arg.18=-javaagent:./lib/aspectj/aspectjweaver-1.9.6.jar\\n#java.arg.19=-Daj.weaving.loadersToSkip=sun.misc.Launcher$AppClassLoader,jdk.internal.loader.ClassLoaders$AppClassLoader,org.eclipse.jetty.webapp.WebAppClassLoader,\\\\\\n#            org.apache.jasper.servlet.JasperLoader,org.jvnet.hk2.internal.DelegatingClassLoader,org.apache.nifi.nar.NarClassLoader\\n# End of Java Agent config for native library loading.\\n\\n###\\n# Notification Services for notifying interested parties when NiFi is stopped, started, dies\\n###\\n\\n# XML File that contains the definitions of the notification services\\nnotification.services.file=./conf/bootstrap-notification-services.xml\\n\\n# In the case that we are unable to send a notification for an event, how many times should we retry?\\nnotification.max.attempts=5\\n\\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is started?\\n#nifi.start.notification.services=email-notification\\n\\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is stopped?\\n#nifi.stop.notification.services=email-notification\\n\\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi dies?\\n#nifi.dead.notification.services=email-notification\\n\\n# The first curator connection issue is logged as ERROR, for example when NiFi cannot connect to one of the Zookeeper nodes.\\n# Additional connection issues are logged as DEBUG until the connection is restored.\\njava.arg.curator.supress.excessive.logs=-Dcurator-log-only-first-connection-issue-as-error-level=true\\n\\n# Port used to listen for communications from NiFi. If this property is missing, empty, or 0, a random ephemeral port is used.\\nnifi.bootstrap.listen.port=0\\n","logback.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n-->\\n\\n<configuration scan=\\"true\\" scanPeriod=\\"30 seconds\\">\\n    <shutdownHook class=\\"ch.qos.logback.core.hook.DefaultShutdownHook\\" />\\n\\n    <contextListener class=\\"ch.qos.logback.classic.jul.LevelChangePropagator\\">\\n        <resetJUL>true</resetJUL>\\n    </contextListener>\\n\\n    <appender name=\\"APP_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-app.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'app_%d.log'.\\n              For hourly rollover, use 'app_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\\n                \${org.apache.nifi.bootstrap.config.log.dir}/nifi-app_%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>\\n            <maxFileSize>100MB</maxFileSize>\\n            <!-- keep 30 log files worth of history -->\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <immediateFlush>true</immediateFlush>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"SSL_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-ssl.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'app_%d.log'.\\n              For hourly rollover, use 'app_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\\n                \${org.apache.nifi.bootstrap.config.log.dir}/nifi-ssl_%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>\\n            <maxFileSize>100MB</maxFileSize>\\n            <!-- keep 30 log files worth of history -->\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <immediateFlush>true</immediateFlush>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"USER_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-user.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'user_%d.log'.\\n              For hourly rollover, use 'user_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-user_%d.log</fileNamePattern>\\n            <!-- keep 30 log files worth of history -->\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"REQUEST_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-request.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-request_%d.log</fileNamePattern>\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"BOOTSTRAP_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-bootstrap.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'bootstrap_%d.log'.\\n              For hourly rollover, use 'bootstrap_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-bootstrap_%d.log</fileNamePattern>\\n            <!-- keep 5 log files worth of history -->\\n            <maxHistory>5</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"DEPRECATION_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-deprecation.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\">\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-deprecation_%d.%i.log</fileNamePattern>\\n            <maxFileSize>10MB</maxFileSize>\\n            <maxHistory>10</maxHistory>\\n            <totalSizeCap>100MB</totalSizeCap>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"CONSOLE\\" class=\\"ch.qos.logback.core.ConsoleAppender\\">\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <!-- valid logging levels: TRACE, DEBUG, INFO, WARN, ERROR -->\\n\\n    <!-- Deprecation Log -->\\n    <logger name=\\"deprecation\\" level=\\"WARN\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"DEPRECATION_FILE\\" />\\n    </logger>\\n\\n    <logger name=\\"org.apache.nifi\\" level=\\"INFO\\" />\\n    <logger name=\\"org.apache.nifi.processors\\" level=\\"WARN\\" />\\n    <logger name=\\"org.apache.nifi.processors.standard.LogAttribute\\" level=\\"INFO\\" />\\n    <logger name=\\"org.apache.nifi.processors.standard.LogMessage\\" level=\\"INFO\\" />\\n    <logger name=\\"org.apache.nifi.controller.repository.StandardProcessSession\\" level=\\"WARN\\" />\\n\\n\\n    <logger name=\\"org.apache.zookeeper.ClientCnxn\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.NIOServerCnxn\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.NIOServerCnxnFactory\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.NettyServerCnxnFactory\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.quorum\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.ZooKeeper\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.PrepRequestProcessor\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.nifi.controller.reporting.LogComponentStatuses\\" level=\\"ERROR\\" />\\n\\n    <logger name=\\"org.apache.calcite.runtime.CalciteException\\" level=\\"OFF\\" />\\n\\n    <logger name=\\"org.apache.curator.framework.recipes.leader.LeaderSelector\\" level=\\"OFF\\" />\\n    <logger name=\\"org.apache.curator.ConnectionState\\" level=\\"OFF\\" />\\n\\n    <!-- Logger for managing logging statements for nifi clusters. -->\\n    <logger name=\\"org.apache.nifi.cluster\\" level=\\"INFO\\" />\\n\\n    <!-- Logger for logging HTTP requests received by the web server. -->\\n    <logger name=\\"org.apache.nifi.server.JettyServer\\" level=\\"INFO\\" />\\n\\n    <!-- Logger for managing logging statements for jetty -->\\n    <logger name=\\"org.eclipse.jetty\\" level=\\"INFO\\" />\\n\\n    <!-- Suppress non-error messages due to excessive logging by class or library -->\\n    <logger name=\\"org.springframework\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.springframework.security\\" level=\\"INFO\\" />\\n\\n    <!-- Suppress non-error messages due to known warning about redundant path annotation (NIFI-574) -->\\n    <logger name=\\"org.glassfish.jersey.internal.Errors\\" level=\\"ERROR\\" />\\n\\n    <!-- Suppress non-error messages due to Jetty AnnotationParser emitting a large amount of WARNS.\\n    Issue described in NIFI-5479. -->\\n    <logger name=\\"org.eclipse.jetty.annotations.AnnotationParser\\" level=\\"ERROR\\" />\\n\\n    <!-- Suppress non-error messages from SSHJ which was emitting large amounts of INFO logs by\\n    default -->\\n    <logger name=\\"net.schmizz.sshj\\" level=\\"WARN\\" />\\n    <logger name=\\"com.hierynomus.sshj\\" level=\\"WARN\\" />\\n\\n    <!-- Suppress non-error messages from SMBJ which was emitting large amounts of INFO logs by\\n    default -->\\n    <logger name=\\"com.hierynomus.smbj\\" level=\\"WARN\\" />\\n\\n    <!-- Suppress non-error messages from AWS KCL which was emitting large amounts of INFO logs by\\n    default -->\\n    <logger name=\\"com.amazonaws.services.kinesis\\" level=\\"WARN\\" />\\n\\n    <!-- Suppress non-error messages from Apache Atlas which was emitting large amounts of INFO logs\\n    by default -->\\n    <logger name=\\"org.apache.atlas\\" level=\\"WARN\\" />\\n\\n    <!-- These log messages would normally go to the USER_FILE log, but they belong in the APP_FILE -->\\n    <logger name=\\"org.apache.nifi.web.security.requests\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"APP_FILE\\" />\\n    </logger>\\n\\n    <!--\\n        Logger for capturing user events. We do not want to propagate these\\n        log events to the root logger. These messages are only sent to the\\n        user-log appender.\\n    -->\\n    <logger name=\\"org.apache.nifi.web.security\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.web.api.config\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.authorization\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.cluster.authorization\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.web.api.AccessResource\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.opensaml\\" level=\\"WARN\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n\\n    <!-- Web Server Request Log -->\\n    <logger name=\\"org.apache.nifi.web.server.RequestLog\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"REQUEST_FILE\\" />\\n    </logger>\\n\\n    <!--\\n        Logger for capturing Bootstrap logs and NiFi's standard error and standard out.\\n    -->\\n    <logger name=\\"org.apache.nifi.bootstrap\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.bootstrap.Command\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"CONSOLE\\" />\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!-- Everything written to NiFi's Standard Out will be logged with the logger\\n    org.apache.nifi.StdOut at INFO level -->\\n    <logger name=\\"org.apache.nifi.StdOut\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!-- Everything written to NiFi's Standard Error will be logged with the logger\\n    org.apache.nifi.StdErr at ERROR level -->\\n    <logger name=\\"org.apache.nifi.StdErr\\" level=\\"ERROR\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!--DEBUG\\n    SSL Cert Reloading-->\\n    <logger name=\\"org.apache.nifi.web.server.util.StoreScanner\\" level=\\"DEBUG\\">\\n        <appender-ref ref=\\"SSL_FILE\\" />\\n    </logger>\\n\\n    <logger name=\\"org.eclipse.jetty.util.ssl.SslContextFactory\\" level=\\"DEBUG\\">\\n        <appender-ref ref=\\"SSL_FILE\\" />\\n    </logger>\\n\\n    <logger name=\\"org.apache.nifi.security.util.SslContextFactory\\" level=\\"DEBUG\\">\\n        <appender-ref ref=\\"SSL_FILE\\" />\\n    </logger>\\n\\n    <root level=\\"INFO\\">\\n        <appender-ref ref=\\"APP_FILE\\" />\\n    </root>\\n\\n</configuration>","login-identity-providers.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"no\\"?><!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n--><!--\\n    This file lists the login identity providers to use when running securely. In order\\n    to use a specific provider it must be configured here and it's identifier\\n    must be specified in the nifi.properties file.\\n--><loginIdentityProviders>\\n    <!--\\n        Single User Login Identity Provider supporting automated generation of Username and Password\\n\\n        The provider will write the following log messages when 'Username' and 'Password' are empty:\\n\\n        Generated Username [USERNAME]\\n        Generated Password [PASSWORD]\\n\\n        The 'Username' will be a random UUID and the 'Password' will be stored using bcrypt hashing\\n    -->\\n    <provider>\\n        <identifier>single-user-provider</identifier>\\n        <class>org.apache.nifi.authentication.single.user.SingleUserLoginIdentityProvider</class>\\n        <property name=\\"Username\\"></property>\\n        <property name=\\"Password\\"></property>\\n    </provider>\\n    <!--\\n        Identity Provider for users logging in with username/password against an LDAP server.\\n        \\n        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible\\n            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.\\n        \\n        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.\\n        'Manager Password' - The password of the manager that is used to bind to the LDAP server to\\n            search for users.\\n            \\n        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.\\n        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP\\n            using LDAPS or START_TLS.\\n        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using\\n            LDAPS or START_TLS such as PKCS12.\\n        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.\\n        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to\\n            LDAP using LDAPS or START_TLS.\\n        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using\\n            LDAPS or START_TLS such as PKCS12.\\n        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.\\n            Possible values are REQUIRED, WANT, NONE.\\n        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,\\n            TLSv1.1, TLSv1.2, etc).\\n        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully \\n            before the target context is closed. Defaults to false.\\n            \\n        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.\\n        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).\\n        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).\\n       \\n        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).\\n        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).\\n        'User Search Filter' - Filter for searching for users against the 'User Search Base'.\\n            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.\\n\\n        'Identity Strategy' - Strategy to identify users. Possible values are USE_DN and USE_USERNAME.\\n            The default functionality if this property is missing is USE_DN in order to retain\\n            backward compatibility. USE_DN will use the full DN of the user entry if possible.\\n            USE_USERNAME will use the username the user logged in with.\\n        'Authentication Expiration' - The duration of how long the user authentication is valid\\n            for. If the user never logs out, they will be required to log back in following\\n            this duration.\\n    -->\\n    <!-- To enable the ldap-provider remove 2 lines. This is 1 of 2. \\n    <provider>\\n        <identifier>ldap-provider</identifier>\\n        <class>org.apache.nifi.ldap.LdapProvider</class>\\n        <property name=\\"Authentication Strategy\\">START_TLS</property>\\n\\n        <property name=\\"Manager DN\\"></property>\\n        <property name=\\"Manager Password\\"></property>\\n\\n        <property name=\\"TLS - Keystore\\"></property>\\n        <property name=\\"TLS - Keystore Password\\"></property>\\n        <property name=\\"TLS - Keystore Type\\"></property>\\n        <property name=\\"TLS - Truststore\\"></property>\\n        <property name=\\"TLS - Truststore Password\\"></property>\\n        <property name=\\"TLS - Truststore Type\\"></property>\\n        <property name=\\"TLS - Client Auth\\"></property>\\n        <property name=\\"TLS - Protocol\\"></property>\\n        <property name=\\"TLS - Shutdown Gracefully\\"></property>\\n        \\n        <property name=\\"Referral Strategy\\">FOLLOW</property>\\n        <property name=\\"Connect Timeout\\">10 secs</property>\\n        <property name=\\"Read Timeout\\">10 secs</property>\\n\\n        <property name=\\"Url\\"></property>\\n        <property name=\\"User Search Base\\"></property>\\n        <property name=\\"User Search Filter\\"></property>\\n\\n        <property name=\\"Identity Strategy\\">USE_DN</property>\\n        <property name=\\"Authentication Expiration\\">12 hours</property>\\n    </provider>\\n    To enable the ldap-provider remove 2 lines. This is 2 of 2. -->\\n\\n    <!--\\n        Identity Provider for users logging in with username/password against a Kerberos KDC server.\\n\\n        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).\\n        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.\\n    -->\\n    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.\\n    <provider>\\n        <identifier>kerberos-provider</identifier>\\n        <class>org.apache.nifi.kerberos.KerberosProvider</class>\\n        <property name=\\"Default Realm\\">NIFI.APACHE.ORG</property>\\n        <property name=\\"Authentication Expiration\\">12 hours</property>\\n    </provider>\\n    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->\\n</loginIdentityProviders>","nifi-cli.config":"baseUrl=https://INIT_HOSTNAME.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal:8444\\nkeystore=/opt/nifi/ssl/manager/keystore.jks\\nkeystoreType=JKS\\nkeystorePasswd=INIT_KEYSTORE_PASSWORD\\nkeyPasswd=INIT_KEYSTORE_PASSWORD\\ntruststore=/opt/nifi/ssl/manager/truststore.jks\\ntruststoreType=JKS\\ntruststorePasswd=INIT_KEYSTORE_PASSWORD","nifi.properties":"nifi.flow.configuration.file=/opt/nifi/data/flow.xml.gz\\nnifi.flow.configuration.json.file=/opt/nifi/data/flow.json.gz\\nnifi.flow.configuration.archive.enabled=true\\nnifi.flow.configuration.archive.dir=/opt/nifi/data/flow_archive/\\nnifi.flow.configuration.archive.max.time=30 days\\nnifi.flow.configuration.archive.max.storage=5 GB\\nnifi.flow.configuration.archive.max.count=\\nnifi.flowcontroller.autoResumeState=true\\nnifi.flowcontroller.graceful.shutdown.period=10 sec\\nnifi.flowservice.writedelay.interval=500 ms\\nnifi.administrative.yield.duration=30 sec\\nnifi.bored.yield.duration=10 millis\\nnifi.queue.backpressure.count=10000\\nnifi.queue.backpressure.size=1 GB\\nnifi.authorizer.configuration.file=./conf/authorizers.xml\\nnifi.login.identity.provider.configuration.file=./conf/login-identity-providers.xml\\nnifi.templates.directory=/opt/nifi/data/templates\\nnifi.ui.banner.text=\\nnifi.ui.autorefresh.interval=30 sec\\nnifi.nar.library.directory=./lib\\nnifi.nar.library.autoload.directory=./extensions\\nnifi.nar.working.directory=./work/nar/\\nnifi.documentation.working.directory=./work/docs/components\\nnifi.nar.unpack.uber.jar=false\\nnifi.state.management.configuration.file=./conf/state-management.xml\\nnifi.state.management.provider.local=local-provider\\nnifi.state.management.provider.cluster=zk-provider\\nnifi.state.management.embedded.zookeeper.start=false\\nnifi.state.management.embedded.zookeeper.properties=./conf/zookeeper.properties\\nnifi.database.directory=/opt/nifi/data/database_repository\\nnifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE\\nnifi.repository.encryption.protocol.version=\\nnifi.repository.encryption.key.id=\\nnifi.repository.encryption.key.provider=\\nnifi.repository.encryption.key.provider.keystore.location=\\nnifi.repository.encryption.key.provider.keystore.password=\\nnifi.flowfile.repository.implementation=org.apache.nifi.controller.repository.WriteAheadFlowFileRepository\\nnifi.flowfile.repository.wal.implementation=org.apache.nifi.wali.SequentialAccessWriteAheadLog\\nnifi.flowfile.repository.directory=/opt/nifi/data/flowfile_repository\\nnifi.flowfile.repository.checkpoint.interval=20 secs\\nnifi.flowfile.repository.always.sync=false\\nnifi.flowfile.repository.retain.orphaned.flowfiles=true\\nnifi.swap.manager.implementation=org.apache.nifi.controller.FileSystemSwapManager\\nnifi.queue.swap.threshold=20000\\nnifi.content.repository.implementation=org.apache.nifi.controller.repository.FileSystemRepository\\nnifi.content.claim.max.appendable.size=50 KB\\nnifi.content.repository.directory.default=/opt/nifi/data/content_repository\\nnifi.content.repository.archive.max.retention.period=7 days\\nnifi.content.repository.archive.max.usage.percentage=50%\\nnifi.content.repository.archive.enabled=true\\nnifi.content.repository.always.sync=false\\nnifi.content.viewer.url=../nifi-content-viewer/\\nnifi.provenance.repository.implementation=org.apache.nifi.provenance.WriteAheadProvenanceRepository\\nnifi.provenance.repository.directory.default=/opt/nifi/data/provenance_repository\\nnifi.provenance.repository.max.storage.time=30 days\\nnifi.provenance.repository.max.storage.size=10 GB\\nnifi.provenance.repository.rollover.time=10 mins\\nnifi.provenance.repository.rollover.size=100 MB\\nnifi.provenance.repository.query.threads=2\\nnifi.provenance.repository.index.threads=2\\nnifi.provenance.repository.compress.on.rollover=true\\nnifi.provenance.repository.always.sync=false\\nnifi.provenance.repository.indexed.fields=EventType, FlowFileUUID, Filename, ProcessorID, Relationship\\nnifi.provenance.repository.indexed.attributes=\\nnifi.provenance.repository.index.shard.size=500 MB\\nnifi.provenance.repository.max.attribute.length=65536\\nnifi.provenance.repository.concurrent.merge.threads=2\\nnifi.provenance.repository.buffer.size=100000\\nnifi.components.status.repository.implementation=org.apache.nifi.controller.status.history.VolatileComponentStatusRepository\\nnifi.components.status.repository.buffer.size=1440\\nnifi.components.status.snapshot.frequency=1 min\\nnifi.status.repository.questdb.persist.node.days=14\\nnifi.status.repository.questdb.persist.component.days=3\\nnifi.status.repository.questdb.persist.location=/opt/nifi/data/status_repository\\nnifi.remote.input.host=INIT_HOSTNAME.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\nnifi.remote.input.secure=true\\nnifi.remote.input.socket.port=10001\\nnifi.remote.input.http.enabled=true\\nnifi.remote.input.http.transaction.ttl=30 sec\\nnifi.remote.contents.cache.expiration=30 secs\\nnifi.web.http.host=\\nnifi.web.http.port=\\nnifi.web.http.network.interface.default=\\nnifi.web.https.host=INIT_HOSTNAME.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\nnifi.web.https.port=8444\\nnifi.web.https.network.interface.default=\\nnifi.web.https.application.protocols=http/1.1\\nnifi.web.jetty.working.directory=./work/jetty\\nnifi.web.jetty.threads=200\\nnifi.web.max.header.size=16 KB\\nnifi.web.proxy.context.path=\\nnifi.web.proxy.host=\\nnifi.web.max.content.size=\\nnifi.web.max.requests.per.second=30000\\nnifi.web.max.access.token.requests.per.second=25\\nnifi.web.request.timeout=60 secs\\nnifi.web.request.ip.whitelist=\\nnifi.web.should.send.server.version=true\\nnifi.web.request.log.format=%{client}a - %u %t \\"%r\\" %s %O \\"%{Referer}i\\" \\"%{User-Agent}i\\"\\nnifi.web.https.ciphersuites.include=\\nnifi.web.https.ciphersuites.exclude=\\nnifi.sensitive.props.key=INIT_SENSITIVE_PROPS_KEY\\nnifi.sensitive.props.key.protected=\\nnifi.sensitive.props.algorithm=NIFI_PBKDF2_AES_GCM_256\\nnifi.sensitive.props.additional.keys=\\nnifi.security.autoreload.enabled=true\\nnifi.security.autoreload.interval=10 secs\\nnifi.security.keystore=/opt/nifi/data/ssl/keystore/keystore.jks\\nnifi.security.keystoreType=JKS\\nnifi.security.keystorePasswd=INIT_KEYSTORE_PASSWORD\\nnifi.security.keyPasswd=INIT_KEYSTORE_PASSWORD\\nnifi.security.truststore=/opt/nifi/data/ssl/truststore/truststore.jks\\nnifi.security.truststoreType=JKS\\nnifi.security.truststorePasswd=INIT_TRUSTSTORE_PASSWORD\\nnifi.security.user.authorizer=managed-authorizer\\nnifi.security.allow.anonymous.authentication=false\\nnifi.security.user.jws.key.rotation.period=PT1H\\nnifi.security.ocsp.responder.url=\\nnifi.security.ocsp.responder.certificate=\\nnifi.security.user.oidc.discovery.url=\\nnifi.security.user.oidc.connect.timeout=5 secs\\nnifi.security.user.oidc.read.timeout=5 secs\\nnifi.security.user.oidc.client.id=\\nnifi.security.user.oidc.client.secret=\\nnifi.security.user.oidc.preferred.jwsalgorithm=\\nnifi.security.user.oidc.additional.scopes=\\nnifi.security.user.oidc.claim.identifying.user=\\nnifi.security.user.oidc.fallback.claims.identifying.user=\\nnifi.security.user.oidc.claim.groups=groups\\nnifi.security.user.oidc.truststore.strategy=JDK\\nnifi.security.user.oidc.token.refresh.window=60 secs\\nnifi.security.user.knox.url=\\nnifi.security.user.knox.publicKey=\\nnifi.security.user.knox.cookieName=hadoop-jwt\\nnifi.security.user.knox.audiences=\\nnifi.security.user.saml.idp.metadata.url=https://portal.sso.ca-central-1.amazonaws.com/saml/metadata/abc-123\\nnifi.security.user.saml.sp.entity.id=org:apache:nifi:saml:sp-test2\\nnifi.security.user.saml.identity.attribute.name=\\nnifi.security.user.saml.group.attribute.name=\\nnifi.security.user.saml.request.signing.enabled=false\\nnifi.security.user.saml.want.assertions.signed=true\\nnifi.security.user.saml.signature.algorithm=http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\\nnifi.security.user.saml.authentication.expiration=12 hours\\nnifi.security.user.saml.single.logout.enabled=false\\nnifi.security.user.saml.http.client.truststore.strategy=JDK\\nnifi.security.user.saml.http.client.connect.timeout=30 secs\\nnifi.security.user.saml.http.client.read.timeout=30 secs\\nnifi.listener.bootstrap.port=0\\nnifi.cluster.protocol.heartbeat.interval=5 sec\\nnifi.cluster.protocol.heartbeat.missable.max=8\\nnifi.cluster.protocol.is.secure=true\\nnifi.cluster.is.node=true\\nnifi.cluster.node.address=INIT_HOSTNAME.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\nnifi.cluster.node.protocol.port=14444\\nnifi.cluster.node.protocol.max.threads=50\\nnifi.cluster.node.event.history.size=25\\nnifi.cluster.node.connection.timeout=5 sec\\nnifi.cluster.node.read.timeout=5 sec\\nnifi.cluster.node.max.concurrent.requests=100\\nnifi.cluster.firewall.file=\\nnifi.cluster.flow.election.max.wait.time=150 secs\\nnifi.cluster.flow.election.max.candidates=\\nnifi.cluster.load.balance.host=\\nnifi.cluster.load.balance.port=6342\\nnifi.cluster.load.balance.connections.per.node=1\\nnifi.cluster.load.balance.max.thread.count=8\\nnifi.cluster.load.balance.comms.timeout=30 sec\\nnifi.zookeeper.connect.string=zookeeper-0.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-1.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-2.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181\\nnifi.zookeeper.connect.timeout=10 secs\\nnifi.zookeeper.session.timeout=10 secs\\nnifi.zookeeper.root.node=/nifi/test2\\nnifi.zookeeper.client.secure=true\\nnifi.zookeeper.security.keystore=\\nnifi.zookeeper.security.keystoreType=\\nnifi.zookeeper.security.keystorePasswd=\\nnifi.zookeeper.security.truststore=\\nnifi.zookeeper.security.truststoreType=\\nnifi.zookeeper.security.truststorePasswd=\\nnifi.zookeeper.jute.maxbuffer=\\nnifi.zookeeper.auth.type=\\nnifi.zookeeper.kerberos.removeHostFromPrincipal=\\nnifi.zookeeper.kerberos.removeRealmFromPrincipal=\\nnifi.kerberos.krb5.file=\\nnifi.kerberos.service.principal=\\nnifi.kerberos.service.keytab.location=\\nnifi.kerberos.spnego.principal=\\nnifi.kerberos.spnego.keytab.location=\\nnifi.kerberos.spnego.authentication.expiration=12 hours\\nnifi.variable.registry.properties=\\nnifi.analytics.predict.enabled=false\\nnifi.analytics.predict.interval=3 mins\\nnifi.analytics.query.interval=5 mins\\nnifi.analytics.connection.model.implementation=org.apache.nifi.controller.status.analytics.models.OrdinaryLeastSquares\\nnifi.analytics.connection.model.score.name=rSquared\\nnifi.analytics.connection.model.score.threshold=.90\\nnifi.monitor.long.running.task.schedule=\\nnifi.monitor.long.running.task.threshold=\\nnifi.diagnostics.on.shutdown.enabled=false\\nnifi.diagnostics.on.shutdown.verbose=false\\nnifi.diagnostics.on.shutdown.directory=/opt/nifi/data/diagnostics\\nnifi.diagnostics.on.shutdown.max.filecount=10\\nnifi.diagnostics.on.shutdown.max.directory.size=10 MB\\nnifi.performance.tracking.percentage=0\\nnifi.cluster.leader.election.implementation=CuratorLeaderElectionManager\\nnifi.security.user.login.identity.provider=","nifi_manager.json":"{\\n  \\"registry_clients\\": {\\n    \\"test-org-test-env-test-domain-test-nificluster-main-registry\\": {\\n      \\"url\\": \\"https://nifi-registry.test-org-test-env-test-domain-test-nificluster-main.internal:8443\\"\\n    }\\n  },\\n  \\"identities\\": [\\n    \\"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"example_admin_identity\\",\\n    \\"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n  ],\\n  \\"groups\\": {\\n    \\"cluster_nodes\\": [\\n      \\"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n    ],\\n    \\"admins\\": [\\n      \\"example_admin_identity\\"\\n    ],\\n    \\"external_nodes\\": [\\n      \\"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n    ]\\n  },\\n  \\"policies\\": [\\n    {\\n      \\"resource\\": \\"/site-to-site\\",\\n      \\"action\\": \\"READ\\"\\n    },\\n    {\\n      \\"resource\\": \\"/process-groups/ROOT_ID\\",\\n      \\"action\\": \\"READ\\"\\n    },\\n    {\\n      \\"resource\\": \\"/process-groups/ROOT_ID\\",\\n      \\"action\\": \\"WRITE\\"\\n    }\\n  ],\\n  \\"authorizations\\": [\\n    {\\n      \\"policyResourcePattern\\": \\"/data/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"cluster_nodes\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"admins\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/site-to-site\\",\\n      \\"actions\\": [\\n        \\"READ\\"\\n      ],\\n      \\"groups\\": [\\n        \\"external_nodes\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/data-transfer/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"external_nodes\\"\\n      ]\\n    }\\n  ]\\n}","state-management.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n-->\\n<!--\\n  This file provides a mechanism for defining and configuring the State Providers\\n  that should be used for storing state locally and across a NiFi cluster. In order\\n  to use a specific provider, it must be configured here and its identifier\\n  must be specified in the nifi.properties file.\\n-->\\n<stateManagement>\\n    <!--\\n        State Provider that stores state locally in a configurable directory. This Provider requires the\\n    following properties:\\n        \\n        Directory - the directory to store components' state in. If the directory being used is a\\n    sub-directory of the NiFi installation, it\\n                    is important that the directory be copied over to the new version when upgrading NiFi.\\n        Always Sync - If set to true, any change to the repository will be synchronized to the disk,\\n    meaning that NiFi will ask the operating system not to cache the information. This is very\\n                expensive and can significantly reduce NiFi performance. However, if it is false, there could be\\n    the potential for data loss if either there is a sudden power loss or the\\n                operating system crashes. The default value is false.\\n        Partitions - The number of partitions.\\n        Checkpoint Interval - The amount of time between checkpoints.\\n     -->\\n    <local-provider>\\n        <id>local-provider</id>\\n        <class>org.apache.nifi.controller.state.providers.local.WriteAheadLocalStateProvider</class>\\n        <property name=\\"Directory\\">./state/local</property>\\n        <property name=\\"Always Sync\\">false</property>\\n        <property name=\\"Partitions\\">16</property>\\n        <property name=\\"Checkpoint Interval\\">2 mins</property>\\n    </local-provider>\\n\\n    <!--\\n        State Provider that is used to store state in ZooKeeper. This Provider requires the following\\n    properties:\\n        \\n        Root Node - the root node in ZooKeeper where state should be stored. The default is '/nifi', but it\\n    is advisable to change this to a different value if not using\\n                   the embedded ZooKeeper server and if multiple NiFi instances may all be using the same ZooKeeper\\n    Server.\\n                   \\n        Connect String - A comma-separated list of host:port pairs to connect to ZooKeeper. For example,\\n    myhost.mydomain:2181,host2.mydomain:5555,host3:6666\\n        \\n        Session Timeout - Specifies how long this instance of NiFi is allowed to be disconnected from\\n    ZooKeeper before creating a new ZooKeeper Session. Default value is \\"30 seconds\\"\\n        \\n        Access Control - Specifies which Access Controls will be applied to the ZooKeeper ZNodes that are\\n    created by this State Provider. This value must be set to one of:\\n                            - Open  : ZNodes will be open to any ZooKeeper client.\\n                            - CreatorOnly  : ZNodes will be accessible only by the creator. The creator will have full access to\\n    create children, read, write, delete, and administer the ZNodes.\\n                                             This option is available only if access to ZooKeeper is secured via Kerberos or if a Username and\\n    Password are set.\\n    -->\\n    <cluster-provider>\\n        <id>zk-provider</id>\\n        <class>org.apache.nifi.controller.state.providers.zookeeper.ZooKeeperStateProvider</class>\\n        <property name=\\"Connect String\\">INIT_NIFI_ZOOKEEPER_CONNECT_STRING</property>\\n        <property name=\\"Root Node\\">/nifi</property>\\n        <property name=\\"Session Timeout\\">10 seconds</property>\\n        <property name=\\"Access Control\\">Open</property>\\n    </cluster-provider>\\n\\n    <!--\\n        Cluster State Provider that stores state in Redis. This can be used as an alternative to the\\n    ZooKeeper State Provider.\\n\\n        This provider requires the following properties:\\n\\n            Redis Mode - The type of Redis instance:\\n                            - Standalone\\n                            - Sentinel\\n                            - Cluster (currently not supported for state-management due to use of WATCH command which Redis\\n    does not support in clustered mode)\\n\\n            Connection String - The connection string for Redis.\\n                        - In a standalone instance this value will be of the form hostname:port.\\n                        - In a sentinel instance this value will be the comma-separated list of sentinels, such as\\n    host1:port1,host2:port2,host3:port3.\\n                        - In a clustered instance this value will be the comma-separated list of cluster masters, such as\\n    host1:port,host2:port,host3:port.\\n\\n        This provider has the following optional properties:\\n\\n            Key Prefix - The prefix for each key stored by this state provider. When sharing a single Redis\\n    across multiple NiFi instances, setting a unique\\n                        value for the Key Prefix will make it easier to identify which instances the keys came from\\n    (default nifi/components/).\\n\\n            Database Index - The database index to be used by connections created from this connection pool.\\n                        See the databases property in redis.conf, by default databases 0-15 will be available.\\n\\n            Communication Timeout - The timeout to use when attempting to communicate with Redis.\\n\\n            Cluster Max Redirects - The maximum number of redirects that can be performed when clustered.\\n\\n            Sentinel Master - The name of the sentinel master, require when Mode is set to Sentinel.\\n\\n            Password - The password used to authenticate to the Redis server. See the requirepass property in\\n    redis.conf.\\n\\n            Enable TLS - If true, the Redis connection will be configured to use TLS, using the keystore and\\n    truststore settings configured in\\n                    nifi.properties.  This means that a TLS-enabled Redis connection is only possible if the Apache NiFi\\n    instance is running in secure mode.\\n                    If this property is false, an insecure Redis connection will be used even if the Apache NiFi\\n    instance is secure (default false).\\n\\n            Pool - Max Total - The maximum number of connections that can be allocated by the pool (checked out\\n    to clients, or idle awaiting checkout).\\n                        A negative value indicates that there is no limit.\\n\\n            Pool - Max Idle - The maximum number of idle connections that can be held in the pool, or a\\n    negative value if there is no limit.\\n\\n            Pool - Min Idle - The target for the minimum number of idle connections to maintain in the pool. If\\n    the configured value of Min Idle is\\n                    greater than the configured value for Max Idle, then the value of Max Idle will be used instead.\\n\\n            Pool - Block When Exhausted - Whether or not clients should block and wait when trying to obtain a\\n    connection from the pool when the pool\\n                    has no available connections. Setting this to false means an error will occur immediately when a\\n    client requests a connection and\\n                    none are available.\\n\\n            Pool - Max Wait Time - The amount of time to wait for an available connection when Block When\\n    Exhausted is set to true.\\n\\n            Pool - Min Evictable Idle Time - The minimum amount of time an object may sit idle in the pool\\n    before it is eligible for eviction.\\n\\n            Pool - Time Between Eviction Runs - The amount of time between attempting to evict idle connections\\n    from the pool.\\n\\n            Pool - Num Tests Per Eviction Run - The number of connections to tests per eviction attempt. A\\n    negative value indicates to test all connections.\\n\\n            Pool - Test On Create - Whether or not connections should be tested upon creation (default false).\\n\\n            Pool - Test On Borrow - Whether or not connections should be tested upon borrowing from the pool\\n    (default false).\\n\\n            Pool - Test On Return - Whether or not connections should be tested upon returning to the pool\\n    (default false).\\n\\n            Pool - Test While Idle - Whether or not connections should be tested while idle (default true).\\n\\n        <cluster-provider>\\n            <id>redis-provider</id>\\n            <class>org.apache.nifi.redis.state.RedisStateProvider</class>\\n            <property name=\\"Redis Mode\\">Standalone</property>\\n            <property name=\\"Connection String\\">localhost:6379</property>\\n        </cluster-provider>\\n    -->\\n\\n</stateManagement>"}},{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                ""},"name":"nifi","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":"","app":"nifi"},"name":"nifi-vol-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","namespace":"nifi-test2"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"nifi-data-nifi-0","namespace":"nifi-test2"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "::",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":"","app":"nifi"},"name":"nifi-vol-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","namespace":"nifi-test2"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"nifi-data-nifi-1","namespace":"nifi-test2"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "::",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"name":"nifi","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"spec":{"persistentVolumeClaimRetentionPolicy":{"whenDeleted":"Retain","whenScaled":"Delete"},"podManagementPolicy":"Parallel","replicas":2,"selector":{"matchLabels":{"app":"nifi"}},"serviceName":"nifi-svc","template":{"metadata":{"labels":{"app":"nifi"}},"spec":{"containers":[{"command":["sh","/opt/nifi/scripts/nifi_manager.sh"],"env":[{"name":"NIFI_APP","value":"nifi"},{"name":"MANAGER_CONFIG","value":"/opt/nifi/init/conf/nifi_manager.json"},{"name":"NIFI_INIT_DIR","value":"/opt/nifi/init"},{"name":"NIFI_DATA_DIR","value":"/opt/nifi/data"},{"name":"NIFI_SENSITIVE_PROPS_KEY","valueFrom":{"secretKeyRef":{"key":"sensitive-props-key","name":"nifi-secret","optional":false}}},{"name":"NIFI_SSL_BASE_PATH","value":"/opt/nifi/ssl"},{"name":"NIFI_ZOOKEEPER_CONNECT_STRING","value":"zookeeper-0.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-1.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-2.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181"},{"name":"NIFI_KEYSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}},{"name":"NIFI_TRUSTSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}},{"name":"PYTHONUNBUFFERED","value":"1"},{"name":"NIFI_NODES","value":"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal,CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal"}],"image":"",
                {
                  "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:0008f52ad2d4c5b502dcecef172136d1f1d40ebdb528a0a94a0ec5d27ebad8bc",
                },
                "","name":"nifi-manager","resources":{"limits":{"cpu":"250m","memory":"0.5Gi"},"requests":{"cpu":"250m","memory":"0.5Gi"}},"volumeMounts":[{"mountPath":"/opt/nifi/init/conf","name":"nifi-config"},{"mountPath":"/home/nifi/.aws","name":"aws-creds"},{"mountPath":"/.local","name":"pip-local"},{"mountPath":"/opt/nifi/init/scripts","name":"nifi-init-scripts"},{"mountPath":"/opt/nifi/data","name":"nifi-data"},{"mountPath":"/opt/nifi/ssl/manager","name":"manager-ssl","readOnly":true},{"mountPath":"/opt/nifi/ssl/nifi-0","name":"nifi-0-ssl","readOnly":true},{"mountPath":"/opt/nifi/ssl/nifi-1","name":"nifi-1-ssl","readOnly":true}]},{"command":["bash","-c","/opt/nifi/init/scripts/nifi_start.sh"],"env":[{"name":"NIFI_INIT_DIR","value":"/opt/nifi/init"},{"name":"NIFI_DATA_DIR","value":"/opt/nifi/data"},{"name":"NIFI_HOME","value":"/opt/nifi/nifi-current"},{"name":"NIFI_SENSITIVE_PROPS_KEY","valueFrom":{"secretKeyRef":{"key":"sensitive-props-key","name":"nifi-secret","optional":false}}},{"name":"NIFI_SSL_BASE_PATH","value":"/opt/nifi/ssl"},{"name":"NIFI_ZOOKEEPER_CONNECT_STRING","value":"zookeeper-0.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-1.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-2.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181"},{"name":"NIFI_KEYSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}},{"name":"NIFI_TRUSTSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}}],"image":"apache/nifi:1.25.0","name":"nifi","ports":[{"containerPort":8444}],"resources":{"limits":{"cpu":"1","memory":"2Gi"},"requests":{"cpu":"1","memory":"2Gi"}},"volumeMounts":[{"mountPath":"/opt/nifi/init/conf","name":"nifi-config"},{"mountPath":"/opt/nifi/init/scripts","name":"nifi-init-scripts"},{"mountPath":"/opt/nifi/data","name":"nifi-data"},{"mountPath":"/home/nifi/.aws","name":"aws-creds"},{"mountPath":"/opt/nifi/ssl/nifi-0","name":"nifi-0-ssl","readOnly":true},{"mountPath":"/opt/nifi/ssl/nifi-1","name":"nifi-1-ssl","readOnly":true}]}],"dnsConfig":{"searches":["nifi-svc.nifi-test2.svc.cluster.local"]},"securityContext":{"fsGroup":1000,"runAsGroup":1000,"runAsUser":1000},"serviceAccountName":"nifi","shareProcessNamespace":true,"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}],"volumes":[{"configMap":{"defaultMode":493,"name":"nifi-init-scripts"},"name":"nifi-init-scripts"},{"configMap":{"defaultMode":493,"name":"nifi-config"},"name":"nifi-config"},{"emptyDir":{},"name":"aws-creds"},{"emptyDir":{},"name":"pip-local"},{"name":"manager-ssl","secret":{"secretName":"manager-ssl"}},{"name":"nifi-0-ssl","secret":{"secretName":"nifi-0-ssl"}},{"name":"nifi-1-ssl","secret":{"secretName":"nifi-1-ssl"}}]}},"volumeClaimTemplates":[{"metadata":{"name":"nifi-data"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"5Gi"}},"selector":{"matchLabels":{"app":"nifi"}},"storageClassName":"efs-sc"}}]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"manager-cert","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"spec":{"commonName":"cluster-manager.nifi-test2","duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"manager-ssl","usages":["server auth","client auth"]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"nifi-0-cert","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"spec":{"commonName":"nifi-0.nifi-test2","dnsNames":["localhost","nifi-0.nifi-svc.nifi-test2.svc.cluster.local","nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"nifi-0-ssl","usages":["server auth","client auth"]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"nifi-1-cert","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"spec":{"commonName":"nifi-1.nifi-test2","dnsNames":["localhost","nifi-1.nifi-svc.nifi-test2.svc.cluster.local","nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"nifi-1-ssl","usages":["server auth","client auth"]}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:333:25] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:333:25] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:333:25] LogGroup retention is set to RetentionDays.INFINITE.",
              },
            ],
          },
        },
        "Properties": {
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "LogGroupName": {
            "Fn::Join": [
              "",
              [
                "/aws/eks/test-org-test-env-test-domain-test-nificluster-main/",
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "-",
                        {
                          "Fn::Select": [
                            2,
                            {
                              "Fn::Split": [
                                "/",
                                {
                                  "Ref": "AWS::StackId",
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
                "/pods",
              ],
            ],
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::Logs::LogGroup",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"awspca.cert-manager.io/v1beta1","kind":"AWSPCAClusterIssuer","metadata":{"name":"private-ca-cluster-issuer","labels":{"aws.cdk.eks/prune-c8d9cdd840facc4c683fee649147cf57268eab4e82":""}},"spec":{"arn":"arn:aws:acm-pca:test-region:test-account:certificate-authority/test-acm-pca-id","region":"",
                {
                  "Ref": "AWS::Region",
                },
                ""}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c8d9cdd840facc4c683fee649147cf57268eab4e82",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                ""},"labels":{"aws.cdk.eks/prune-c8b3f2ffd05a2d2b5f61afe46052347d5171cae33e":"","app.kubernetes.io/name":"private-ca"},"name":"private-ca-service-account","namespace":"cert-manager"}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c8b3f2ffd05a2d2b5f61afe46052347d5171cae33e",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"external-dns.alpha.kubernetes.io/hostname":"nifi-registry.test-org-test-env-test-domain-test-nificluster-main.internal","external-dns.alpha.kubernetes.io/ttl":"60"},"labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":"","app":"nifi-registry"},"name":"nifi-registry-svc","namespace":"registry"},"spec":{"clusterIP":"None","ports":[{"name":"nifi-registry-ui","port":8443}],"selector":{"app":"nifi-registry"}}},{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                ""},"name":"external-secret-store","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"SecretStore","metadata":{"name":"external-secret-store","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"spec":{"provider":{"aws":{"auth":{"jwt":{"serviceAccountRef":{"name":"external-secret-store"}}},"region":"",
                {
                  "Ref": "AWS::Region",
                },
                "","service":"SecretsManager"}}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"ExternalSecret","metadata":{"name":"external-secret","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"spec":{"data":[{"remoteRef":{"key":"",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Fn::Select": [
                          0,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          1,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          3,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          4,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          5,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          7,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          8,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          9,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          10,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          11,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          12,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  ],
                },
                ""},"secretKey":"admin-creds"},{"remoteRef":{"key":"",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Fn::Select": [
                          0,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          1,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          3,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          4,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          5,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          7,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          8,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          9,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          10,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          11,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  ],
                },
                ""},"secretKey":"keystore-password"}],"refreshInterval":"1h","secretStoreRef":{"kind":"SecretStore","name":"external-secret-store"},"target":{"creationPolicy":"Owner","name":"nifi-registry-secret"}}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"nifi-registry-init-scripts","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"data":{"nifi_registry_start.sh":"#!/bin/bash\\n\\n# tail -f /dev/null\\n\\nrm -rf $NIFI_HOME/conf/*\\ncp -rL $NIFI_INIT_DIR/conf/* $NIFI_HOME/conf\\n\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_KEYSTORE_PASSWORD/\${NIFI_KEYSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_TRUSTSTORE_PASSWORD/\${NIFI_TRUSTSTORE_PASSWORD}/g\\" {} \\\\;\\n\\nmkdir -p \\"\${NIFI_REGISTRY_HOME}/logs/\\"\\ntouch \\"\${NIFI_REGISTRY_HOME}/logs/nifi-registry-app.log\\"\\n\\n# Continuously provide logs so that 'docker logs' can produce them\\ntail -F \\"\${NIFI_REGISTRY_HOME}/logs/nifi-registry-app.log\\" &\\n\\"\${NIFI_REGISTRY_HOME}/bin/nifi-registry.sh\\" run &\\nnifi_registry_pid=\\"$!\\"\\n\\ntrap \\"echo Received trapped signal, beginning shutdown...;\\" KILL TERM HUP INT EXIT;\\n\\necho NiFi-Registry running with PID \${nifi_registry_pid}.\\nwait \${nifi_registry_pid}","nifi_start.sh":"#!/bin/bash\\n\\n# tail -f /dev/null\\n\\nrm -rf $NIFI_HOME/conf/*\\ncp -rL $NIFI_INIT_DIR/conf/* $NIFI_HOME/conf\\n\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_HOSTNAME/\${HOSTNAME}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_KEYSTORE_PASSWORD/\${NIFI_KEYSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_TRUSTSTORE_PASSWORD/\${NIFI_TRUSTSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_SENSITIVE_PROPS_KEY/\${NIFI_SENSITIVE_PROPS_KEY}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_NIFI_ZOOKEEPER_CONNECT_STRING/\${NIFI_ZOOKEEPER_CONNECT_STRING}/g\\" {} \\\\;\\n\\nif [ -n \\"\${SINGLE_USER_CREDENTIALS_USERNAME}\\" ] && [ -n \\"\${SINGLE_USER_CREDENTIALS_PASSWORD}\\" ]; then\\n    \${NIFI_HOME}/bin/nifi.sh set-single-user-credentials \\"\${SINGLE_USER_CREDENTIALS_USERNAME}\\" \\"\${SINGLE_USER_CREDENTIALS_PASSWORD}\\"\\nfi\\n\\n\${NIFI_TOOLKIT_HOME}/bin/cli.sh session set nifi.props \\"\${NIFI_HOME}/conf/nifi-cli.config\\"\\n\\n# Continuously provide logs so that 'docker logs' can produce them\\n\\"\${NIFI_HOME}/bin/nifi.sh\\" run &\\nnifi_pid=\\"$!\\"\\ntail -F --pid=\${nifi_pid} \\"\${NIFI_HOME}/logs/nifi-app.log\\" &\\n\\ntrap 'echo Received trapped signal, beginning shutdown...;./bin/nifi.sh stop;exit 0;' TERM HUP INT;\\ntrap \\":\\" EXIT\\n\\necho NiFi running with PID \${nifi_pid}.\\nwait \${nifi_pid}"}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"nifi-registry-config","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"data":{"authorizers.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<authorizers>\\n  <userGroupProvider>\\n    <identifier>file-user-group-provider</identifier>\\n    <class>org.apache.nifi.registry.security.authorization.file.FileUserGroupProvider</class>\\n    <property name=\\"Users File\\">/opt/nifi-registry/data/users.xml</property>\\n    <property name=\\"Initial User Identity 1\\">CN=nifi-registry-manager</property>\\n    <property name=\\"Initial User Identity nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Initial User Identity nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Initial User Identity nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Initial User Identity nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n  </userGroupProvider>\\n  <accessPolicyProvider>\\n    <identifier>file-access-policy-provider</identifier>\\n    <class>org.apache.nifi.registry.security.authorization.file.FileAccessPolicyProvider</class>\\n    <property name=\\"User Group Provider\\">file-user-group-provider</property>\\n    <property name=\\"Authorizations File\\">/opt/nifi-registry/data/authorizations.xml</property>\\n    <property name=\\"Initial Admin Identity\\">CN=nifi-registry-manager</property>\\n    <property name=\\"NiFi Group Name\\"></property>\\n    <property name=\\"Nifi Identity nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Nifi Identity nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Nifi Identity nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Nifi Identity nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n  </accessPolicyProvider>\\n  <authorizer>\\n    <identifier>managed-authorizer</identifier>\\n    <class>org.apache.nifi.registry.security.authorization.StandardManagedAuthorizer</class>\\n    <property name=\\"Access Policy Provider\\">file-access-policy-provider</property>\\n  </authorizer>\\n</authorizers>\\n","bootstrap.conf":"#\\n# Licensed to the Apache Software Foundation (ASF) under one or more\\n# contributor license agreements.  See the NOTICE file distributed with\\n# this work for additional information regarding copyright ownership.\\n# The ASF licenses this file to You under the Apache License, Version 2.0\\n# (the \\"License\\"); you may not use this file except in compliance with\\n# the License.  You may obtain a copy of the License at\\n#\\n#   http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing, software\\n# distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n# See the License for the specific language governing permissions and\\n# limitations under the License.\\n#\\n\\n# Java command to use when running nifi-registry\\njava=java\\n\\n# Username to use when running nifi-registry. This value will be ignored on Windows.\\nrun.as=\\n\\n# Configure the working directory for launching the NiFi Registry process\\n# If not specified, the working directory will fall back to using the NIFI_REGISTRY_HOME env variable\\n# If the environment variable is not specified, the working directory will fall back to the parent of this file's parent\\nworking.dir=\\n\\n# Configure where nifi-registry's lib and conf directories live\\nlib.dir=./lib\\nconf.dir=./conf\\ndocs.dir=./docs\\n\\n# How long to wait after telling nifi-registry to shutdown before explicitly killing the Process\\ngraceful.shutdown.seconds=20\\n\\n# Disable JSR 199 so that we can use JSP's without running a JDK\\njava.arg.1=-Dorg.apache.jasper.compiler.disablejsr199=true\\n\\n# JVM memory settings\\njava.arg.2=-Xms512m\\njava.arg.3=-Xmx512m\\n\\n# Enable Remote Debugging\\n#java.arg.debug=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000\\n\\njava.arg.4=-Djava.net.preferIPv4Stack=true\\n\\n# allowRestrictedHeaders is required for Cluster/Node communications to work properly\\njava.arg.5=-Dsun.net.http.allowRestrictedHeaders=true\\njava.arg.6=-Djava.protocol.handler.pkgs=sun.net.www.protocol\\n\\n# Master key in hexadecimal format for encrypted sensitive configuration values\\nnifi.registry.bootstrap.sensitive.key=\\n\\n# Sensitive Property Provider configuration\\n\\n# HashiCorp Vault Sensitive Property Providers\\n#nifi.registry.bootstrap.protection.hashicorp.vault.conf=./conf/bootstrap-hashicorp-vault.conf\\n\\n# AWS Sensitive Property Providers\\n#nifi.registry.bootstrap.protection.aws.conf=./conf/bootstrap-aws.conf\\n\\n# Azure Key Vault Sensitive Property Providers\\n#nifi.registry.bootstrap.protection.azure.keyvault.conf=./conf/bootstrap-azure.conf\\n\\n# GCP KMS Sensitive Property Providers\\n#nifi.registry.bootstrap.protection.gcp.kms.conf=./conf/bootstrap-gcp.conf","identity-providers.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<!--\\n  ~ Licensed to the Apache Software Foundation (ASF) under one or more\\n  ~ contributor license agreements.  See the NOTICE file distributed with\\n  ~ this work for additional information regarding copyright ownership.\\n  ~ The ASF licenses this file to You under the Apache License, Version 2.0\\n  ~ (the \\"License\\"); you may not use this file except in compliance with\\n  ~ the License.  You may obtain a copy of the License at\\n  ~\\n  ~     http://www.apache.org/licenses/LICENSE-2.0\\n  ~\\n  ~ Unless required by applicable law or agreed to in writing, software\\n  ~ distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  ~ See the License for the specific language governing permissions and\\n  ~ limitations under the License.\\n  -->\\n<!--\\n    This file lists the identity providers to use when running securely. In order\\n    to use a specific provider it must be configured here and its identifier\\n    must be specified in the nifi-registry.properties file.\\n-->\\n<identityProviders>\\n    <!--\\n        Identity Provider for users logging in with username/password against an LDAP server.\\n        \\n        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible\\n            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.\\n        \\n        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.\\n        'Manager Password' - The password of the manager that is used to bind to the LDAP server to\\n            search for users.\\n            \\n        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or\\n    START_TLS.\\n        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP\\n            using LDAPS or START_TLS.\\n        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using\\n            LDAPS or START_TLS (i.e. JKS or PKCS12).\\n        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or\\n    START_TLS.\\n        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to\\n            LDAP using LDAPS or START_TLS.\\n        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using\\n            LDAPS or START_TLS (i.e. JKS or PKCS12).\\n        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or\\n    START_TLS.\\n            Possible values are REQUIRED, WANT, NONE.\\n        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,\\n            TLSv1.1, TLSv1.2, etc).\\n        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully \\n            before the target context is closed. Defaults to false.\\n            \\n        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.\\n        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).\\n        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).\\n       \\n        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).\\n        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).\\n        'User Search Filter' - Filter for searching for users against the 'User Search Base'.\\n            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.\\n\\n        'Identity Strategy' - Strategy to identify users. Possible values are USE_DN and USE_USERNAME.\\n            The default functionality if this property is missing is USE_DN in order to retain\\n            backward compatibility. USE_DN will use the full DN of the user entry if possible.\\n            USE_USERNAME will use the username the user logged in with.\\n        'Authentication Expiration' - The duration of how long the user authentication is valid\\n            for. If the user never logs out, they will be required to log back in following\\n            this duration.\\n    -->\\n    <!-- To enable the ldap-identity-provider remove 2 lines. This is 1 of 2.\\n    <provider>\\n        <identifier>ldap-identity-provider</identifier>\\n        <class>org.apache.nifi.registry.security.ldap.LdapIdentityProvider</class>\\n        <property name=\\"Authentication Strategy\\">SIMPLE</property>\\n\\n        <property name=\\"Manager DN\\"></property>\\n        <property name=\\"Manager Password\\"></property>\\n        \\n        <property name=\\"Referral Strategy\\">FOLLOW</property>\\n        <property name=\\"Connect Timeout\\">10 secs</property>\\n        <property name=\\"Read Timeout\\">10 secs</property>\\n\\n        <property name=\\"Url\\"></property>\\n        <property name=\\"User Search Base\\"></property>\\n        <property name=\\"User Search Filter\\"></property>\\n\\n        <property name=\\"Identity Strategy\\">USE_USERNAME</property>\\n        <property name=\\"Authentication Expiration\\">12 hours</property>\\n    </provider>\\n    To enable the ldap-identity-provider remove 2 lines. This is 2 of 2. -->\\n\\n    <!--\\n        Identity Provider for users logging in with username/password against a Kerberos KDC server.\\n\\n        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e.\\n    NIFI.APACHE.ORG).\\n        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the\\n    user never logs out, they will be required to log back in following this duration.\\n    -->\\n    <!-- To enable the kerberos-identity-provider remove 2 lines. This is 1 of 2.\\n    <provider>\\n        <identifier>kerberos-identity-provider</identifier>\\n    <class>org.apache.nifi.registry.web.security.authentication.kerberos.KerberosIdentityProvider</class>\\n        <property name=\\"Default Realm\\">NIFI.APACHE.ORG</property>\\n        <property name=\\"Authentication Expiration\\">12 hours</property>\\n        <property name=\\"Enable Debug\\">false</property>\\n    </provider>\\n    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->\\n\\n</identityProviders>","logback.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n-->\\n<configuration scan=\\"true\\" scanPeriod=\\"30 seconds\\">\\n    <contextListener class=\\"ch.qos.logback.classic.jul.LevelChangePropagator\\">\\n        <resetJUL>true</resetJUL>\\n    </contextListener>\\n\\n    <appender name=\\"APP_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.registry.bootstrap.config.log.dir}/nifi-registry-app.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'app_%d.log'.\\n              For hourly rollover, use 'app_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\\n                \${org.apache.nifi.registry.bootstrap.config.log.dir}/nifi-registry-app_%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>\\n            <maxFileSize>100MB</maxFileSize>\\n            <!-- keep 30 log files worth of history -->\\n            <maxHistory>30</maxHistory>\\n            <!-- keep 10GB total of log files -->\\n            <totalSizeCap>10GB</totalSizeCap>\\n        </rollingPolicy>\\n        <immediateFlush>true</immediateFlush>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"BOOTSTRAP_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.registry.bootstrap.config.log.dir}/nifi-registry-bootstrap.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'bootstrap_%d.log'.\\n              For hourly rollover, use 'bootstrap_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\\n                \${org.apache.nifi.registry.bootstrap.config.log.dir}/nifi-registry-bootstrap_%d.log</fileNamePattern>\\n            <!-- keep 5 log files worth of history -->\\n            <maxHistory>5</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"EVENTS_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.registry.bootstrap.config.log.dir}/nifi-registry-event.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'event_%d.log'.\\n              For hourly rollover, use 'event_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\\n                \${org.apache.nifi.registry.bootstrap.config.log.dir}/nifi-registry-event_%d.log</fileNamePattern>\\n            <!-- keep 5 log files worth of history -->\\n            <maxHistory>5</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date ## %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"CONSOLE\\" class=\\"ch.qos.logback.core.ConsoleAppender\\">\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <!-- valid logging levels: TRACE, DEBUG, INFO, WARN, ERROR -->\\n\\n    <logger name=\\"org.apache.nifi.registry\\" level=\\"INFO\\" />\\n\\n    <!-- To see SQL statements and parameters set this to TRACE -->\\n    <logger name=\\"org.springframework.jdbc\\" level=\\"INFO\\" />\\n\\n    <!--\\n        Logger for capturing Bootstrap logs and NiFi Registry's standard error and standard out.\\n    -->\\n    <logger name=\\"org.apache.nifi.registry.bootstrap\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.registry.bootstrap.Command\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"CONSOLE\\" />\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!-- Everything written to NiFi Registry's Standard Out will be logged with the logger\\n    org.apache.nifi.StdOut at INFO level -->\\n    <logger name=\\"org.apache.nifi.registry.StdOut\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!-- Everything written to NiFi Registry's Standard Error will be logged with the logger\\n    org.apache.nifi.StdErr at ERROR level -->\\n    <logger name=\\"org.apache.nifi.registry.StdErr\\" level=\\"ERROR\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!-- This will log all events to a separate file when the LoggingEventHookProvider is enabled in\\n    providers.xml -->\\n    <logger name=\\"org.apache.nifi.registry.provider.hook.LoggingEventHookProvider\\" level=\\"INFO\\"\\n        additivity=\\"false\\">\\n        <appender-ref ref=\\"EVENTS_FILE\\" />\\n    </logger>\\n\\n    <root level=\\"INFO\\">\\n        <appender-ref ref=\\"APP_FILE\\" />\\n    </root>\\n\\n</configuration>","nifi-reg-cli.config":"baseUrl=https://nifi-registry.test-org-test-env-test-domain-test-nificluster-main.internal:8443\\nkeystore=/opt/nifi-registry/ssl/manager/keystore.jks\\nkeystoreType=JKS\\nkeystorePasswd=INIT_KEYSTORE_PASSWORD\\nkeyPasswd=INIT_KEYSTORE_PASSWORD\\ntruststore=/opt/nifi-registry/ssl/manager/truststore.jks\\ntruststoreType=JKS\\ntruststorePasswd=INIT_KEYSTORE_PASSWORD","nifi-registry.properties":"nifi.registry.web.war.directory=./lib\\nnifi.registry.web.http.host=\\nnifi.registry.web.http.port=\\nnifi.registry.web.https.host=nifi-registry.test-org-test-env-test-domain-test-nificluster-main.internal\\nnifi.registry.web.https.port=8443\\nnifi.registry.web.https.application.protocols=http/1.1\\nnifi.registry.web.jetty.working.directory=./work/jetty\\nnifi.registry.web.jetty.threads=200\\nnifi.registry.web.should.send.server.version=true\\nnifi.registry.security.keystore=/opt/nifi-registry/data/ssl/keystore/keystore.jks\\nnifi.registry.security.keystoreType=JKS\\nnifi.registry.security.keystorePasswd=INIT_KEYSTORE_PASSWORD\\nnifi.registry.security.keyPasswd=INIT_KEYSTORE_PASSWORD\\nnifi.registry.security.truststore=/opt/nifi-registry/data/ssl/truststore/truststore.jks\\nnifi.registry.security.truststoreType=JKS\\nnifi.registry.security.truststorePasswd=INIT_TRUSTSTORE_PASSWORD\\nnifi.registry.security.needClientAuth=true\\nnifi.registry.security.authorizers.configuration.file=./conf/authorizers.xml\\nnifi.registry.security.authorizer=managed-authorizer\\nnifi.registry.security.identity.providers.configuration.file=./conf/identity-providers.xml\\nnifi.registry.security.identity.provider=\\nnifi.registry.providers.configuration.file=./conf/providers.xml\\nnifi.registry.registry.alias.configuration.file=./conf/registry-aliases.xml\\nnifi.registry.extensions.working.directory=./work/extensions\\nnifi.registry.db.directory=\\nnifi.registry.db.url.append=\\nnifi.registry.db.url=jdbc:h2:./database/nifi-registry-primary;AUTOCOMMIT=OFF;DB_CLOSE_ON_EXIT=FALSE;LOCK_MODE=3;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE\\nnifi.registry.db.driver.class=org.h2.Driver\\nnifi.registry.db.driver.directory=\\nnifi.registry.db.username=nifireg\\nnifi.registry.db.password=nifireg\\nnifi.registry.db.maxConnections=5\\nnifi.registry.db.sql.debug=false\\nnifi.registry.extension.dir.aws=./ext/aws/lib\\nnifi.registry.kerberos.krb5.file=\\nnifi.registry.kerberos.spnego.principal=\\nnifi.registry.kerberos.spnego.keytab.location=\\nnifi.registry.kerberos.spnego.authentication.expiration=12 hours\\nnifi.registry.security.user.oidc.discovery.url=\\nnifi.registry.security.user.oidc.connect.timeout=\\nnifi.registry.security.user.oidc.read.timeout=\\nnifi.registry.security.user.oidc.client.id=\\nnifi.registry.security.user.oidc.client.secret=\\nnifi.registry.security.user.oidc.preferred.jwsalgorithm=\\nnifi.registry.revisions.enabled=false\\nnifi.registry.security.user.authorizer=managed-authorizer\\nnifi.registry.security.autoreload.enabled=true\\nnifi.registry.security.autoreload.interval=10 secs\\nnifi.registry.security.user.login.identity.provider=single-user-provider","providers.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n-->\\n<providers>\\n\\n    <!-- NOTE: The providers in this file must be listed in the order defined in providers.xsd which\\n    is the following:\\n            1) Flow Persistence Provider (Must occur once and only once)\\n            2) Event Hook Providers (May occur 0 or more times)\\n            3) Bundle Persistence Provider (Must occur once and only once)\\n     -->\\n\\n    <flowPersistenceProvider>\\n        <class>org.apache.nifi.registry.provider.flow.FileSystemFlowPersistenceProvider</class>\\n        <property name=\\"Flow Storage Directory\\">./flow_storage</property>\\n    </flowPersistenceProvider>\\n\\n    <!--\\n    <flowPersistenceProvider>\\n        <class>org.apache.nifi.registry.provider.flow.git.GitFlowPersistenceProvider</class>\\n        <property name=\\"Flow Storage Directory\\">./flow_storage</property>\\n        <property name=\\"Remote To Push\\"></property>\\n        <property name=\\"Remote Access User\\"></property>\\n        <property name=\\"Remote Access Password\\"></property>\\n        <property name=\\"Remote Clone Repository\\"></property>\\n    </flowPersistenceProvider>\\n    -->\\n\\n    <!--\\n    <flowPersistenceProvider>\\n        <class>org.apache.nifi.registry.provider.flow.DatabaseFlowPersistenceProvider</class>\\n    </flowPersistenceProvider>\\n    -->\\n\\n    <!--\\n    <eventHookProvider>\\n        <class>org.apache.nifi.registry.provider.hook.ScriptEventHookProvider</class>\\n        <property name=\\"Script Path\\"></property>\\n        <property name=\\"Working Directory\\"></property>\\n        -->\\n    <!-- Optional Whitelist Event types\\n        <property name=\\"Whitelisted Event Type 1\\">CREATE_FLOW</property>\\n        <property name=\\"Whitelisted Event Type 2\\">DELETE_FLOW</property>\\n        -->\\n    <!--\\n    </eventHookProvider>\\n    -->\\n\\n    <!-- This will log all events to a separate file specified by the EVENT_APPENDER in logback.xml -->\\n    <!--\\n    <eventHookProvider>\\n        <class>org.apache.nifi.registry.provider.hook.LoggingEventHookProvider</class>\\n    </eventHookProvider>\\n    -->\\n\\n    <extensionBundlePersistenceProvider>\\n        <class>org.apache.nifi.registry.provider.extension.FileSystemBundlePersistenceProvider</class>\\n        <property name=\\"Extension Bundle Storage Directory\\">./extension_bundles</property>\\n    </extensionBundlePersistenceProvider>\\n\\n    <!-- Example S3 Bundle Persistence Provider\\n            - Requires nifi-registry-aws-assembly to be added to the classpath via a custom extension dir in\\n    nifi-registry.properties\\n                Example: nifi.registry.extension.dir.aws=./ext/aws/lib\\n                Where \\"./ext/aws/lib\\" contains the extracted contents of nifi-registry-aws-assembly\\n            - \\"Region\\" - The name of the S3 region where the bucket exists\\n            - \\"Bucket Name\\" - The name of an existing bucket to store extension bundles\\n            - \\"Key Prefix\\" - An optional prefix that if specified will be added to the beginning of all S3 keys\\n            - \\"Credentials Provider\\" - Indicates how credentials will be provided, must be a value of\\n    DEFAULT_CHAIN or STATIC\\n                - DEFAULT_CHAIN will consider in order: Java system properties, environment variables, credential\\n    profiles (~/.aws/credentials)\\n                - STATIC requires that \\"Access Key\\" and \\"Secret Access Key\\" be specified directly in this file\\n            - \\"Access Key\\" - The access key to use when using STATIC credentials provider\\n            - \\"Secret Access Key\\" - The secret access key to use when using STATIC credentials provider\\n            - \\"Endpoint URL\\" - An optional URL that overrides the default AWS S3 endpoint URL.\\n                 Set this when using an AWS S3 API compatible service hosted at a different URL.\\n     -->\\n    <!--\\n    <extensionBundlePersistenceProvider>\\n        <class>org.apache.nifi.registry.aws.S3BundlePersistenceProvider</class>\\n        <property name=\\"Region\\">us-east-1</property>\\n        <property name=\\"Bucket Name\\">my-bundles</property>\\n        <property name=\\"Key Prefix\\"></property>\\n        <property name=\\"Credentials Provider\\">DEFAULT_CHAIN</property>\\n        <property name=\\"Access Key\\"></property>\\n        <property name=\\"Secret Access Key\\"></property>\\n        <property name=\\"Endpoint URL\\"></property>\\n    </extensionBundlePersistenceProvider>\\n    -->\\n\\n</providers>","registry-aliases.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n-->\\n<aliases>\\n    <!--\\n    <alias>\\n        <internal>LOCAL_NIFI_REGISTRY</internal>\\n        <external>http://registry.nifi.apache.org:18080</external>\\n    </alias>\\n    -->\\n</aliases>","registry_manager.json":"{\\n  \\"buckets\\": {\\n    \\"example-extra-bucket\\": {\\n      \\"READ\\": {\\n        \\"groups\\": [\\n          \\"test_group\\"\\n        ],\\n        \\"identities\\": [\\n          \\"test-identity-1\\"\\n        ]\\n      },\\n      \\"WRITE\\": {\\n        \\"identities\\": [\\n          \\"test-identity-2\\"\\n        ]\\n      }\\n    },\\n    \\"test1\\": {\\n      \\"WRITE\\": {\\n        \\"groups\\": [\\n          \\"test1_admins\\"\\n        ]\\n      },\\n      \\"READ\\": {\\n        \\"groups\\": [\\n          \\"test1_admins\\",\\n          \\"test1_nodes\\"\\n        ]\\n      }\\n    },\\n    \\"test2\\": {\\n      \\"WRITE\\": {\\n        \\"groups\\": [\\n          \\"test2_admins\\"\\n        ]\\n      },\\n      \\"READ\\": {\\n        \\"groups\\": [\\n          \\"test2_admins\\",\\n          \\"test2_nodes\\"\\n        ]\\n      }\\n    }\\n  },\\n  \\"identities\\": [\\n    \\"CN=some-admin-identity\\",\\n    \\"CN=some-other-admin-identity\\",\\n    \\"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"some-admin-identity\\",\\n    \\"some-other-admin-identity\\",\\n    \\"example_admin_identity\\"\\n  ],\\n  \\"groups\\": {\\n    \\"admins\\": [\\n      \\"CN=some-admin-identity\\",\\n      \\"CN=some-other-admin-identity\\"\\n    ],\\n    \\"all_nifi_nodes\\": [\\n      \\"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n    ],\\n    \\"test1_admins\\": [\\n      \\"some-admin-identity\\",\\n      \\"some-other-admin-identity\\"\\n    ],\\n    \\"test1_nodes\\": [\\n      \\"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n    ],\\n    \\"test2_admins\\": [\\n      \\"example_admin_identity\\"\\n    ],\\n    \\"test2_nodes\\": [\\n      \\"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n    ]\\n  },\\n  \\"policies\\": [],\\n  \\"authorizations\\": [\\n    {\\n      \\"policyResourcePattern\\": \\"/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\",\\n        \\"DELETE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"admins\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/proxy\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\",\\n        \\"DELETE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"all_nifi_nodes\\"\\n      ]\\n    }\\n  ]\\n}"}},{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                ""},"name":"nifi-registry","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":"","app":"nifi-registry"},"name":"nifi-registry-vol-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","namespace":"registry"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"nifi-registry-data-pvc","namespace":"registry"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "::",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"v1","kind":"PersistentVolumeClaim","metadata":{"name":"nifi-registry-data-pvc","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"3Gi"}},"storageClassName":"efs-sc"}},{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"name":"nifi-registry","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"nifi-registry"}},"template":{"metadata":{"labels":{"app":"nifi-registry"}},"spec":{"containers":[{"command":["sh","/opt/nifi/scripts/nifi_registry_manager.sh"],"env":[{"name":"NIFI_APP","value":"registry"},{"name":"MANAGER_CONFIG","value":"/opt/nifi-registry/init/conf/registry_manager.json"},{"name":"NIFI_INIT_DIR","value":"/opt/nifi-registry/init"},{"name":"PYTHONUNBUFFERED","value":"1"},{"name":"NIFI_DATA_DIR","value":"/opt/nifi-registry/data"},{"name":"NIFI_SSL_BASE_PATH","value":"/opt/nifi-registry/ssl/registry"},{"name":"NIFI_CERT_NAME","value":"nifi-registry"},{"name":"NIFI_NODES","value":"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal,CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal,CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal,CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal"},{"name":"NIFI_KEYSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-registry-secret","optional":false}}},{"name":"NIFI_TRUSTSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-registry-secret","optional":false}}}],"image":"",
                {
                  "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:0008f52ad2d4c5b502dcecef172136d1f1d40ebdb528a0a94a0ec5d27ebad8bc",
                },
                "","name":"nifi-registry-manager","resources":{"limits":{"cpu":"250m","memory":"0.5Gi"},"requests":{"cpu":"250m","memory":"0.5Gi"}},"volumeMounts":[{"mountPath":"/opt/nifi-registry/init/conf","name":"nifi-registry-config"},{"mountPath":"/home/nifi/.aws","name":"aws-creds"},{"mountPath":"/opt/nifi-registry/init/scripts","name":"nifi-registry-init-scripts"},{"mountPath":"/opt/nifi-registry/data","name":"nifi-registry-data"},{"mountPath":"/opt/nifi-registry/ssl/manager","name":"nifi-registry-manager-ssl","readOnly":true},{"mountPath":"/opt/nifi-registry/ssl/registry/nifi-registry","name":"nifi-registry-ssl","readOnly":true}]},{"command":["bash","-c","/opt/nifi-registry/init/scripts/nifi_registry_start.sh"],"env":[{"name":"NIFI_INIT_DIR","value":"/opt/nifi-registry/init"},{"name":"NIFI_DATA_DIR","value":"/opt/nifi-registry/data"},{"name":"NIFI_HOME","value":"/opt/nifi-registry/nifi-registry-current"},{"name":"NIFI_SSL_BASE_PATH","value":"/opt/nifi-registry/ssl"},{"name":"NIFI_KEYSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-registry-secret","optional":false}}},{"name":"NIFI_TRUSTSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-registry-secret","optional":false}}}],"image":"apache/nifi-registry:1.25.0","name":"nifi-registry","ports":[{"containerPort":8443}],"resources":{"limits":{"cpu":"500m","memory":"1Gi"},"requests":{"cpu":"500m","memory":"1Gi"}},"volumeMounts":[{"mountPath":"/opt/nifi-registry/init/conf","name":"nifi-registry-config"},{"mountPath":"/opt/nifi-registry/init/scripts","name":"nifi-registry-init-scripts"},{"mountPath":"/opt/nifi-registry/data","name":"nifi-registry-data"},{"mountPath":"/home/nifi/.aws","name":"aws-creds"},{"mountPath":"/opt/nifi-registry/ssl","name":"nifi-registry-ssl","readOnly":true}]}],"dnsConfig":{"searches":["nifi-registry-svc.registry.svc.cluster.local"]},"securityContext":{"fsGroup":1000,"runAsGroup":1000,"runAsUser":1000},"serviceAccountName":"nifi-registry","shareProcessNamespace":true,"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}],"volumes":[{"configMap":{"defaultMode":493,"name":"nifi-registry-init-scripts"},"name":"nifi-registry-init-scripts"},{"configMap":{"defaultMode":493,"name":"nifi-registry-config"},"name":"nifi-registry-config"},{"emptyDir":{},"name":"aws-creds"},{"emptyDir":{},"name":"pip-local"},{"name":"nifi-registry-ssl","secret":{"secretName":"nifi-registry-ssl"}},{"name":"nifi-registry-manager-ssl","secret":{"secretName":"nifi-registry-manager-ssl"}},{"name":"nifi-registry-data","persistentVolumeClaim":{"claimName":"nifi-registry-data-pvc"}}]}}}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"nifi-registry-cert","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"spec":{"commonName":"nifi-registry","dnsNames":["localhost","nifi-registry.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-registry-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"nifi-registry-ssl","usages":["server auth","client auth"]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"nifi-registry-manager-cert","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"spec":{"commonName":"nifi-registry-manager","duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-registry-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"nifi-registry-manager-ssl","usages":["client auth"]}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"registry","labels":{"aws.cdk.eks/prune-c8492a107df40ba60e8b5fb0d0328e84477443217d":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"registry","labels":{"aws.cdk.eks/prune-c8492a107df40ba60e8b5fb0d0328e84477443217d":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
                ""]}}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c8492a107df40ba60e8b5fb0d0328e84477443217d",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:374:25] Log stream name not known at deployment time.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "",
          "Path": "/",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:DescribeLogStreams",
                  "logs:PutLogEvents",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:",
                        {
                          "Ref": "REPLACED-CFN-LOGICAL-ID",
                        },
                        "*",
                      ],
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:",
                        {
                          "Ref": "REPLACED-CFN-LOGICAL-ID",
                        },
                        ":log-stream:*",
                      ],
                    ],
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
        },
        "Type": "AWS::IAM::ManagedPolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"external-dns.alpha.kubernetes.io/hostname":"zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal","external-dns.alpha.kubernetes.io/ttl":"60"},"labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":"","app":"zookeeper"},"name":"zookeeper-svc","namespace":"zookeeper"},"spec":{"clusterIP":"None","ports":[{"name":"zookeeper","port":2181}],"selector":{"app":"zookeeper"}}},{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                ""},"name":"external-secret-store","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"SecretStore","metadata":{"name":"external-secret-store","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"spec":{"provider":{"aws":{"auth":{"jwt":{"serviceAccountRef":{"name":"external-secret-store"}}},"region":"",
                {
                  "Ref": "AWS::Region",
                },
                "","service":"SecretsManager"}}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"ExternalSecret","metadata":{"name":"zk-external-secret","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"spec":{"data":[{"remoteRef":{"key":"",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Fn::Select": [
                          0,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          1,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          3,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          4,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          5,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          7,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          8,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          9,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          10,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          11,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  ],
                },
                ""},"secretKey":"keystore-password"}],"refreshInterval":"1h","secretStoreRef":{"kind":"SecretStore","name":"external-secret-store"},"target":{"creationPolicy":"Owner","name":"zk-secret"}}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"zookeeper-0-cert","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"spec":{"commonName":"zookeeper-0","dnsNames":["zookeeper-0.zookeeper-svc.zookeeper.svc.cluster.local","zookeeper-0.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"zk-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"zookeeper-0-ssl","usages":["server auth","client auth"]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"zookeeper-1-cert","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"spec":{"commonName":"zookeeper-1","dnsNames":["zookeeper-1.zookeeper-svc.zookeeper.svc.cluster.local","zookeeper-1.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"zk-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"zookeeper-1-ssl","usages":["server auth","client auth"]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"zookeeper-2-cert","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"spec":{"commonName":"zookeeper-2","dnsNames":["zookeeper-2.zookeeper-svc.zookeeper.svc.cluster.local","zookeeper-2.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"zk-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"zookeeper-2-ssl","usages":["server auth","client auth"]}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"zookeeper-init-scripts","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"data":{"zookeeper_start.sh":"#!/bin/bash\\n\\n\\n\\nrm -rf /conf/*\\ncp -rL $ZK_INIT_DIR/conf/* /conf\\n\\nsed -i \\"s/INIT_HOSTNAME/\${HOSTNAME}/g\\" /conf/zoo.cfg\\nsed -i \\"s/INIT_KEYSTORE_PASSWORD/\${ZK_KEYSTORE_PASSWORD}/g\\" /conf/zoo.cfg\\nsed -i \\"s/INIT_TRUSTSTORE_PASSWORD/\${ZK_TRUSTSTORE_PASSWORD}/g\\" /conf/zoo.cfg\\n\\n\\nexport ZOO_MY_ID=$(echo $HOSTNAME|cut -d '-' -f 2)\\n\\n/docker-entrypoint.sh && \\\\\\nzkServer.sh start-foreground\\n"}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"zookeeper-config","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"data":{"zoo.cfg":"dataDir=/zookeeper-data\\ndataLogDir=/datalog\\ntickTime=2000\\ninitLimit=5\\nsyncLimit=2\\nautopurge.snapRetainCount=3\\nautopurge.purgeInterval=0\\nmaxClientCnxns=60\\nstandaloneEnabled=true\\nadmin.enableServer=true\\nserver.0=zookeeper-0.zookeeper-svc.zookeeper.svc.cluster.local:2888:3888\\nserver.1=zookeeper-1.zookeeper-svc.zookeeper.svc.cluster.local:2888:3888\\nserver.2=zookeeper-2.zookeeper-svc.zookeeper.svc.cluster.local:2888:3888\\nsecureClientPort=2181\\nserverCnxnFactory=org.apache.zookeeper.server.NettyServerCnxnFactory\\nsslQuorum=true\\nssl.quorum.keyStore.type=JKS\\nssl.quorum.keyStore.location=/zookeeper-ssl/INIT_HOSTNAME/keystore.jks\\nssl.quorum.keyStore.password=INIT_KEYSTORE_PASSWORD\\nssl.quorum.trustStore.type=JKS\\nssl.quorum.trustStore.location=/zookeeper-ssl/INIT_HOSTNAME/truststore.jks\\nssl.quorum.trustStore.password=INIT_TRUSTSTORE_PASSWORD\\nssl.keyStore.type=JKS\\nssl.keyStore.location=/zookeeper-ssl/INIT_HOSTNAME/keystore.jks\\nssl.keyStore.password=INIT_KEYSTORE_PASSWORD\\nssl.trustStore.type=JKS\\nssl.trustStore.location=/zookeeper-ssl/INIT_HOSTNAME/truststore.jks\\nssl.trustStore.password=INIT_TRUSTSTORE_PASSWORD"}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":"","app":"zookeeper"},"name":"zookeeper-vol-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","namespace":"zookeeper"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"zookeeper-data-zookeeper-0","namespace":"zookeeper"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "::",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":"","app":"zookeeper"},"name":"zookeeper-vol-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","namespace":"zookeeper"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"zookeeper-data-zookeeper-1","namespace":"zookeeper"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "::",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":"","app":"zookeeper"},"name":"zookeeper-vol-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "-",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","namespace":"zookeeper"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"zookeeper-data-zookeeper-2","namespace":"zookeeper"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "::",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"name":"zookeeper","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"spec":{"persistentVolumeClaimRetentionPolicy":{"whenDeleted":"Retain","whenScaled":"Delete"},"podManagementPolicy":"Parallel","replicas":3,"selector":{"matchLabels":{"app":"zookeeper"}},"serviceName":"zookeeper-svc","template":{"metadata":{"labels":{"app":"zookeeper"}},"spec":{"containers":[{"command":["bash","-c","/zookeeper-init/scripts/zookeeper_start.sh"],"env":[{"name":"ZOO_DATA_DIR","value":"/zookeeper-data"},{"name":"ZK_INIT_DIR","value":"/zookeeper-init"},{"name":"ZK_KEYSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"zk-secret","optional":false}}},{"name":"ZK_TRUSTSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"zk-secret","optional":false}}}],"image":"zookeeper:3.9.0","imagePullPolicy":"Always","name":"zookeeper","ports":[{"containerPort":2181,"name":"client"},{"containerPort":2888,"name":"server"},{"containerPort":3888,"name":"leader-election"}],"resources":{"limits":{"cpu":"250m","memory":"0.5Gi"},"requests":{"cpu":"250m","memory":"0.5Gi"}},"securityContext":{"runAsUser":1000},"volumeMounts":[{"mountPath":"/zookeeper-init/conf","name":"zookeeper-config"},{"mountPath":"/zookeeper-init/scripts","name":"zookeeper-init-scripts"},{"mountPath":"/zookeeper-data","name":"zookeeper-data"},{"mountPath":"/zookeeper-ssl/zookeeper-0","name":"zookeeper-0-ssl"},{"mountPath":"/zookeeper-ssl/zookeeper-1","name":"zookeeper-1-ssl"},{"mountPath":"/zookeeper-ssl/zookeeper-2","name":"zookeeper-2-ssl"}]}],"securityContext":{"fsGroup":1000,"runAsGroup":1000,"runAsUser":1000},"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}],"volumes":[{"configMap":{"defaultMode":493,"name":"zookeeper-init-scripts"},"name":"zookeeper-init-scripts"},{"configMap":{"defaultMode":493,"name":"zookeeper-config"},"name":"zookeeper-config"},{"name":"zookeeper-0-ssl","secret":{"secretName":"zookeeper-0-ssl"}},{"name":"zookeeper-1-ssl","secret":{"secretName":"zookeeper-1-ssl"}},{"name":"zookeeper-2-ssl","secret":{"secretName":"zookeeper-2-ssl"}}]}},"updateStrategy":{"type":"RollingUpdate"},"volumeClaimTemplates":[{"metadata":{"name":"zookeeper-data"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"5Gi"}},"selector":{"matchLabels":{"app":"nifi"}},"storageClassName":"efs-sc"}}]}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Manifest": {
            "Fn::Join": [
              "",
              [
                "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"zookeeper","labels":{"aws.cdk.eks/prune-c84d80c8218d935293511fe2c77d76d4c4ace1a3da":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c84d80c8218d935293511fe2c77d76d4c4ace1a3da":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
                ""]}}}]",
              ],
            ],
          },
          "PruneLabel": "aws.cdk.eks/prune-c84d80c8218d935293511fe2c77d76d4c4ace1a3da",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
            ],
          },
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesResource",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:546:29] Access Point Names not known at deployment time. Permissions restricted by condition.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "",
          "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-exte-64cd787",
          "Path": "/",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "route53:ChangeResourceRecordSets",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":route53:::hostedzone/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
                "Sid": "Route53Update",
              },
              {
                "Action": [
                  "route53:ListHostedZones",
                  "route53:ListResourceRecordSets",
                  "route53:ListTagsForResource",
                ],
                "Effect": "Allow",
                "Resource": "*",
                "Sid": "Route53List",
              },
            ],
            "Version": "2012-10-17",
          },
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::ManagedPolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringLike": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Value",
                    ],
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Federated": {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-exte-64cd787",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Value": {
            "Fn::Join": [
              "",
              [
                "{"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":aud":"sts.amazonaws.com","",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":sub":"system:serviceaccount:external-dns:*"}",
              ],
            ],
          },
        },
        "Type": "Custom::AWSCDKCfnJson",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "HostedZoneTags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Name": "test-org-test-env-test-domain-test-nificluster-main.internal.",
          "VPCs": [
            {
              "VPCId": "test-vpc-id",
              "VPCRegion": {
                "Ref": "AWS::Region",
              },
            },
          ],
        },
        "Type": "AWS::Route53::HostedZone",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Content": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Description": "/opt/kubectl/kubectl 1.27; /opt/helm/helm 3.12",
          "LicenseInfo": "Apache-2.0",
        },
        "Type": "AWS::Lambda::LayerVersion",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SMG4",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "HIPAA.Security-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
            ],
          },
        },
        "Properties": {
          "GenerateSecretString": {
            "ExcludeCharacters": "'",
            "ExcludePunctuation": true,
          },
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "Name": "test-org-test-env-test-domain-test-nificluster-main-mgmt-instance-keystore-password",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SecretsManager::Secret",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EFSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce NIST.800.53.R5-EFSInBackupPlan on EFS volume.",
              },
              {
                "id": "HIPAA.Security-EFSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
              },
              {
                "id": "PCI.DSS.321-EFSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
              },
            ],
          },
        },
        "Properties": {
          "Encrypted": true,
          "FileSystemTags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
            {
              "Key": "Name",
              "Value": "test-org-test-env-test-domain-test-nificluster-main-test1-nifi",
            },
          ],
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "PerformanceMode": "maxIO",
        },
        "Type": "AWS::EFS::FileSystem",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "SecurityGroups": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "GroupId",
              ],
            },
          ],
          "SubnetId": "test-subnet-id-1",
        },
        "Type": "AWS::EFS::MountTarget",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "SecurityGroups": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "GroupId",
              ],
            },
          ],
          "SubnetId": "test-subnet-id-2",
        },
        "Type": "AWS::EFS::MountTarget",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "",
          "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-test-eca5aff",
          "Path": "/",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "kms:Decrypt",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
                "Sid": "KmsDecrypt",
              },
              {
                "Action": "SecretsManager:GetSecretValue",
                "Effect": "Allow",
                "Resource": [
                  {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                  {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                  {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                ],
                "Sid": "GetSecretValue",
              },
            ],
            "Version": "2012-10-17",
          },
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::ManagedPolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringLike": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Value",
                    ],
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Federated": {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-test-eca5aff",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Value": {
            "Fn::Join": [
              "",
              [
                "{"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":aud":"sts.amazonaws.com","",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":sub":"system:serviceaccount:nifi-test1:*"}",
              ],
            ],
          },
        },
        "Type": "Custom::AWSCDKCfnJson",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SMG4",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "HIPAA.Security-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
            ],
          },
        },
        "Properties": {
          "GenerateSecretString": {
            "ExcludeCharacters": "'",
            "ExcludePunctuation": true,
          },
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "Name": "test-org-test-env-test-domain-test-nificluster-main-test1-keystore-password",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SecretsManager::Secret",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SMG4",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "HIPAA.Security-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
            ],
          },
        },
        "Properties": {
          "GenerateSecretString": {
            "ExcludeCharacters": "'",
            "ExcludePunctuation": true,
          },
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "Name": "test-org-test-env-test-domain-test-nificluster-main-test1-admin-creds-secret",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SecretsManager::Secret",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:403:25] Access Point Names not known at deployment time. Permissions restricted by condition.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "",
          "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-te--36c6dc9a",
          "Path": "/",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "elasticfilesystem:DescribeAccessPoints",
                  "elasticfilesystem:DescribeMountTargets",
                  "elasticfilesystem:DescribeFileSystems",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":elasticfilesystem:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":access-point/",
                        {
                          "Ref": "REPLACED-CFN-LOGICAL-ID",
                        },
                      ],
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":elasticfilesystem:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":access-point/",
                        {
                          "Ref": "REPLACED-CFN-LOGICAL-ID",
                        },
                      ],
                    ],
                  },
                ],
                "Sid": "AllowDescribeEFS",
              },
              {
                "Action": "ec2:DescribeAvailabilityZones",
                "Effect": "Allow",
                "Resource": "*",
                "Sid": "AllowDescribeAz",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncryptFrom",
                  "kms:ReEncryptTo",
                  "kms:GenerateDataKey",
                  "kms:GenerateDataKeyWithoutPlaintext",
                  "kms:GenerateDataKeyPair",
                  "kms:GenerateDataKeyPairWithoutPlaintext",
                  "kms:CreateGrant",
                  "kms:DescribeKey",
                  "kms:ListAliases",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
                "Sid": "AllowEfsKms",
              },
            ],
            "Version": "2012-10-17",
          },
        },
        "Type": "AWS::IAM::ManagedPolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test1/nifi-cluster-efs-sg",
          "GroupName": "test-org-test-env-test-domain-test-nificluster-main-test1-nifi-cluster-efs",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "test-vpc-id",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": {
            "Fn::Join": [
              "",
              [
                "from ",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
                ":tcp PORT 2049",
              ],
            ],
          },
          "FromPort": 2049,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": 2049,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "from sg-efsclientid:tcp PORT 2049",
          "FromPort": 2049,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-efsclientid",
          "ToPort": 2049,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "from sg-glefsclientid:tcp PORT 2049",
          "FromPort": 2049,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-glefsclientid",
          "ToPort": 2049,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
            ],
          },
        },
        "Properties": {
          "Description": "Self-Ref",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main-test1/security-group/nifi-cluster-efs/id",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AccessPointTags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
            {
              "Key": "Name",
              "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test1/nifi-pv-ap-0",
            },
          ],
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "PosixUser": {
            "Gid": "1000",
            "Uid": "1000",
          },
          "RootDirectory": {
            "CreationInfo": {
              "OwnerGid": "1000",
              "OwnerUid": "1000",
              "Permissions": "750",
            },
            "Path": "/nifi/0",
          },
        },
        "Type": "AWS::EFS::AccessPoint",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AccessPointTags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
            {
              "Key": "Name",
              "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test1/nifi-pv-ap-1",
            },
          ],
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "PosixUser": {
            "Gid": "1000",
            "Uid": "1000",
          },
          "RootDirectory": {
            "CreationInfo": {
              "OwnerGid": "1000",
              "OwnerUid": "1000",
              "Permissions": "750",
            },
            "Path": "/nifi/1",
          },
        },
        "Type": "AWS::EFS::AccessPoint",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SMG4",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "HIPAA.Security-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
            ],
          },
        },
        "Properties": {
          "GenerateSecretString": {
            "ExcludeCharacters": "'",
            "ExcludePunctuation": true,
          },
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "Name": "test-org-test-env-test-domain-test-nificluster-main-test1-sensitive-props-key",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SecretsManager::Secret",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:187:27] AmazonS3ReadOnlyAccess authorized for use",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringLike": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Value",
                    ],
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Federated": {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/AmazonS3ReadOnlyAccess",
                ],
              ],
            },
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::",
                  {
                    "Ref": "AWS::AccountId",
                  },
                  ":policy/customer-managed-policy-1",
                ],
              ],
            },
          ],
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-tes--2a3565e",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Value": {
            "Fn::Join": [
              "",
              [
                "{"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":aud":"sts.amazonaws.com","",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":sub":"system:serviceaccount:nifi-test1:*"}",
              ],
            ],
          },
        },
        "Type": "Custom::AWSCDKCfnJson",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test1/nifi-sg",
          "GroupName": "test-org-test-env-test-domain-test-nificluster-main-test1-nifi",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "test-vpc-id",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "CidrIp": "10.10.10.10/24",
          "Description": "from 10.10.10.10/24:tcp PORT 10000",
          "FromPort": 10000,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "ToPort": 10000,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "CidrIp": "10.10.10.10/24",
          "Description": "from 10.10.10.10/24:tcp PORT 14443",
          "FromPort": 14443,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "ToPort": 14443,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "CidrIp": "10.10.10.10/24",
          "Description": "from 10.10.10.10/24:tcp PORT 8443",
          "FromPort": 8443,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "ToPort": 8443,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from sg-glnificlientid:tcp PORT 10000",
          "FromPort": 10000,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-glnificlientid",
          "ToPort": 10000,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from sg-glnificlientid:tcp PORT 14443",
          "FromPort": 14443,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-glnificlientid",
          "ToPort": 14443,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from sg-glnificlientid:tcp PORT 8443",
          "FromPort": 8443,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-glnificlientid",
          "ToPort": 8443,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from sg-nificlientid:tcp PORT 10000",
          "FromPort": 10000,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-nificlientid",
          "ToPort": 10000,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from sg-nificlientid:tcp PORT 14443",
          "FromPort": 14443,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-nificlientid",
          "ToPort": 14443,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from sg-nificlientid:tcp PORT 8443",
          "FromPort": 8443,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-nificlientid",
          "ToPort": 8443,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructeksclusterClusterSecurityGroup891F0126:ALL TRAFFIC",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "ClusterSecurityGroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "Self-Ref",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest2nifisg65E78910:10000",
          "FromPort": 10000,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": 10000,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest2nifisg65E78910:8443",
          "FromPort": 8443,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": 8443,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main-test1/security-group/nifi/id",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Cmd": [
            "delete",
            "pod",
            "-l",
            "app=nifi",
          ],
          "ExecutionKey": "ffc705731e2ede7c460e88850a6f7eabc824df8c",
          "Namespace": "nifi-test1",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
            ],
          },
          "TimeoutSeconds": 300,
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EFSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce NIST.800.53.R5-EFSInBackupPlan on EFS volume.",
              },
              {
                "id": "HIPAA.Security-EFSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
              },
              {
                "id": "PCI.DSS.321-EFSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
              },
            ],
          },
        },
        "Properties": {
          "Encrypted": true,
          "FileSystemTags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
            {
              "Key": "Name",
              "Value": "test-org-test-env-test-domain-test-nificluster-main-test2-nifi",
            },
          ],
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "PerformanceMode": "maxIO",
        },
        "Type": "AWS::EFS::FileSystem",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "SecurityGroups": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "GroupId",
              ],
            },
          ],
          "SubnetId": "test-subnet-id-1",
        },
        "Type": "AWS::EFS::MountTarget",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "SecurityGroups": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "GroupId",
              ],
            },
          ],
          "SubnetId": "test-subnet-id-2",
        },
        "Type": "AWS::EFS::MountTarget",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "",
          "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-tes-23b32340",
          "Path": "/",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "kms:Decrypt",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
                "Sid": "KmsDecrypt",
              },
              {
                "Action": "SecretsManager:GetSecretValue",
                "Effect": "Allow",
                "Resource": [
                  {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                  {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                  {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                ],
                "Sid": "GetSecretValue",
              },
            ],
            "Version": "2012-10-17",
          },
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::ManagedPolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringLike": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Value",
                    ],
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Federated": {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-tes-23b32340",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Value": {
            "Fn::Join": [
              "",
              [
                "{"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":aud":"sts.amazonaws.com","",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":sub":"system:serviceaccount:nifi-test2:*"}",
              ],
            ],
          },
        },
        "Type": "Custom::AWSCDKCfnJson",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SMG4",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "HIPAA.Security-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
            ],
          },
        },
        "Properties": {
          "GenerateSecretString": {
            "ExcludeCharacters": "'",
            "ExcludePunctuation": true,
          },
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "Name": "test-org-test-env-test-domain-test-nificluster-main-test2-keystore-password",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SecretsManager::Secret",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SMG4",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "HIPAA.Security-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
            ],
          },
        },
        "Properties": {
          "GenerateSecretString": {
            "ExcludeCharacters": "'",
            "ExcludePunctuation": true,
          },
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "Name": "test-org-test-env-test-domain-test-nificluster-main-test2-admin-creds-secret",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SecretsManager::Secret",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:403:25] Access Point Names not known at deployment time. Permissions restricted by condition.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "",
          "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-tes-4d697067",
          "Path": "/",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "elasticfilesystem:DescribeAccessPoints",
                  "elasticfilesystem:DescribeMountTargets",
                  "elasticfilesystem:DescribeFileSystems",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":elasticfilesystem:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":access-point/",
                        {
                          "Ref": "REPLACED-CFN-LOGICAL-ID",
                        },
                      ],
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":elasticfilesystem:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":access-point/",
                        {
                          "Ref": "REPLACED-CFN-LOGICAL-ID",
                        },
                      ],
                    ],
                  },
                ],
                "Sid": "AllowDescribeEFS",
              },
              {
                "Action": "ec2:DescribeAvailabilityZones",
                "Effect": "Allow",
                "Resource": "*",
                "Sid": "AllowDescribeAz",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncryptFrom",
                  "kms:ReEncryptTo",
                  "kms:GenerateDataKey",
                  "kms:GenerateDataKeyWithoutPlaintext",
                  "kms:GenerateDataKeyPair",
                  "kms:GenerateDataKeyPairWithoutPlaintext",
                  "kms:CreateGrant",
                  "kms:DescribeKey",
                  "kms:ListAliases",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
                "Sid": "AllowEfsKms",
              },
            ],
            "Version": "2012-10-17",
          },
        },
        "Type": "AWS::IAM::ManagedPolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test2/nifi-cluster-efs-sg",
          "GroupName": "test-org-test-env-test-domain-test-nificluster-main-test2-nifi-cluster-efs",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "test-vpc-id",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": {
            "Fn::Join": [
              "",
              [
                "from ",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
                ":tcp PORT 2049",
              ],
            ],
          },
          "FromPort": 2049,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": 2049,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "from sg-glefsclientid:tcp PORT 2049",
          "FromPort": 2049,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-glefsclientid",
          "ToPort": 2049,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
            ],
          },
        },
        "Properties": {
          "Description": "Self-Ref",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main-test2/security-group/nifi-cluster-efs/id",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AccessPointTags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
            {
              "Key": "Name",
              "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test2/nifi-pv-ap-0",
            },
          ],
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "PosixUser": {
            "Gid": "1000",
            "Uid": "1000",
          },
          "RootDirectory": {
            "CreationInfo": {
              "OwnerGid": "1000",
              "OwnerUid": "1000",
              "Permissions": "750",
            },
            "Path": "/nifi/0",
          },
        },
        "Type": "AWS::EFS::AccessPoint",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AccessPointTags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
            {
              "Key": "Name",
              "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test2/nifi-pv-ap-1",
            },
          ],
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "PosixUser": {
            "Gid": "1000",
            "Uid": "1000",
          },
          "RootDirectory": {
            "CreationInfo": {
              "OwnerGid": "1000",
              "OwnerUid": "1000",
              "Permissions": "750",
            },
            "Path": "/nifi/1",
          },
        },
        "Type": "AWS::EFS::AccessPoint",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SMG4",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "HIPAA.Security-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
            ],
          },
        },
        "Properties": {
          "GenerateSecretString": {
            "ExcludeCharacters": "'",
            "ExcludePunctuation": true,
          },
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "Name": "test-org-test-env-test-domain-test-nificluster-main-test2-sensitive-props-key",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SecretsManager::Secret",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringLike": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Value",
                    ],
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Federated": {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-te--34f8f49d",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Value": {
            "Fn::Join": [
              "",
              [
                "{"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":aud":"sts.amazonaws.com","",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":sub":"system:serviceaccount:nifi-test2:*"}",
              ],
            ],
          },
        },
        "Type": "Custom::AWSCDKCfnJson",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test2/nifi-sg",
          "GroupName": "test-org-test-env-test-domain-test-nificluster-main-test2-nifi",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "test-vpc-id",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "CidrIp": "10.10.10.10/24",
          "Description": "from 10.10.10.10/24:tcp PORT 10001",
          "FromPort": 10001,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "ToPort": 10001,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "CidrIp": "10.10.10.10/24",
          "Description": "from 10.10.10.10/24:tcp PORT 14444",
          "FromPort": 14444,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "ToPort": 14444,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "CidrIp": "10.10.10.10/24",
          "Description": "from 10.10.10.10/24:tcp PORT 8444",
          "FromPort": 8444,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "ToPort": 8444,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from sg-glnificlientid:tcp PORT 10001",
          "FromPort": 10001,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-glnificlientid",
          "ToPort": 10001,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from sg-glnificlientid:tcp PORT 14444",
          "FromPort": 14444,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-glnificlientid",
          "ToPort": 14444,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from sg-glnificlientid:tcp PORT 8444",
          "FromPort": 8444,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-glnificlientid",
          "ToPort": 8444,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructeksclusterClusterSecurityGroup891F0126:ALL TRAFFIC",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "ClusterSecurityGroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest1nifisg30149961:10001",
          "FromPort": 10001,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": 10001,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest1nifisg30149961:8444",
          "FromPort": 8444,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": 8444,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "Self-Ref",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main-test2/security-group/nifi/id",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Cmd": [
            "delete",
            "pod",
            "-l",
            "app=nifi",
          ],
          "ExecutionKey": "3afb103acb9f9cffd949343081eaeedcf634c6f1",
          "Namespace": "nifi-test2",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
            ],
          },
          "TimeoutSeconds": 300,
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "",
          "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-pr--2df28d38",
          "Path": "/",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "acm-pca:DescribeCertificateAuthority",
                  "acm-pca:GetCertificate",
                  "acm-pca:IssueCertificate",
                ],
                "Effect": "Allow",
                "Resource": "arn:aws:acm-pca:test-region:test-account:certificate-authority/test-acm-pca-id",
                "Sid": "awspcaissuer",
              },
            ],
            "Version": "2012-10-17",
          },
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::ManagedPolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringLike": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Value",
                    ],
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Federated": {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-pr--2df28d38",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Value": {
            "Fn::Join": [
              "",
              [
                "{"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":aud":"sts.amazonaws.com","",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":sub":"system:serviceaccount:cert-manager:*"}",
              ],
            ],
          },
        },
        "Type": "Custom::AWSCDKCfnJson",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SMG4",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "HIPAA.Security-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
            ],
          },
        },
        "Properties": {
          "GenerateSecretString": {
            "ExcludeCharacters": "'",
            "ExcludePunctuation": true,
          },
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "Name": "test-org-test-env-test-domain-test-nificluster-main-registry-admin-creds-secret",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SecretsManager::Secret",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:403:25] Access Point Names not known at deployment time. Permissions restricted by condition.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "",
          "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-re--1a74f77e",
          "Path": "/",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "elasticfilesystem:DescribeAccessPoints",
                  "elasticfilesystem:DescribeMountTargets",
                  "elasticfilesystem:DescribeFileSystems",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":elasticfilesystem:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":access-point/",
                        {
                          "Ref": "REPLACED-CFN-LOGICAL-ID",
                        },
                      ],
                    ],
                  },
                ],
                "Sid": "AllowDescribeEFS",
              },
              {
                "Action": "ec2:DescribeAvailabilityZones",
                "Effect": "Allow",
                "Resource": "*",
                "Sid": "AllowDescribeAz",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncryptFrom",
                  "kms:ReEncryptTo",
                  "kms:GenerateDataKey",
                  "kms:GenerateDataKeyWithoutPlaintext",
                  "kms:GenerateDataKeyPair",
                  "kms:GenerateDataKeyPairWithoutPlaintext",
                  "kms:CreateGrant",
                  "kms:DescribeKey",
                  "kms:ListAliases",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
                "Sid": "AllowEfsKms",
              },
            ],
            "Version": "2012-10-17",
          },
        },
        "Type": "AWS::IAM::ManagedPolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/registry-efs-sg",
          "GroupName": "test-org-test-env-test-domain-test-nificluster-main-registry-efs",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "test-vpc-id",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": {
            "Fn::Join": [
              "",
              [
                "from ",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
                ":tcp PORT 2049",
              ],
            ],
          },
          "FromPort": 2049,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": 2049,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "from sg-glefsclientid:tcp PORT 2049",
          "FromPort": 2049,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-glefsclientid",
          "ToPort": 2049,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
            ],
          },
        },
        "Properties": {
          "Description": "Self-Ref",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/security-group/registry-efs/id",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "",
          "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-reg-225ba957",
          "Path": "/",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "kms:Decrypt",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
                "Sid": "KmsDecrypt",
              },
              {
                "Action": "SecretsManager:GetSecretValue",
                "Effect": "Allow",
                "Resource": [
                  {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                  {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                ],
                "Sid": "GetSecretValue",
              },
            ],
            "Version": "2012-10-17",
          },
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::ManagedPolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringLike": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Value",
                    ],
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Federated": {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-reg-225ba957",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Value": {
            "Fn::Join": [
              "",
              [
                "{"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":aud":"sts.amazonaws.com","",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":sub":"system:serviceaccount:registry:*"}",
              ],
            ],
          },
        },
        "Type": "Custom::AWSCDKCfnJson",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SMG4",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "HIPAA.Security-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
            ],
          },
        },
        "Properties": {
          "GenerateSecretString": {
            "ExcludeCharacters": "'",
            "ExcludePunctuation": true,
          },
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "Name": "test-org-test-env-test-domain-test-nificluster-main-registry-keystore-password",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SecretsManager::Secret",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AccessPointTags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
            {
              "Key": "Name",
              "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/registry-pv-ap-0",
            },
          ],
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "PosixUser": {
            "Gid": "1000",
            "Uid": "1000",
          },
          "RootDirectory": {
            "CreationInfo": {
              "OwnerGid": "1000",
              "OwnerUid": "1000",
              "Permissions": "750",
            },
            "Path": "/registry/0",
          },
        },
        "Type": "AWS::EFS::AccessPoint",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringLike": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Value",
                    ],
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Federated": {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-reg-1854fcb1",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Value": {
            "Fn::Join": [
              "",
              [
                "{"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":aud":"sts.amazonaws.com","",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":sub":"system:serviceaccount:registry:*"}",
              ],
            ],
          },
        },
        "Type": "Custom::AWSCDKCfnJson",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/registry-sg",
          "GroupName": "test-org-test-env-test-domain-test-nificluster-main-registry",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "test-vpc-id",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "CidrIp": "10.10.10.10/24",
          "Description": "from 10.10.10.10/24:tcp PORT 8443",
          "FromPort": 8443,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "ToPort": 8443,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": {
            "Fn::Join": [
              "",
              [
                "from ",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
                ":tcp PORT 8443",
              ],
            ],
          },
          "FromPort": 8443,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": 8443,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": {
            "Fn::Join": [
              "",
              [
                "from ",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
                ":tcp PORT 8443",
              ],
            ],
          },
          "FromPort": 8443,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": 8443,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from sg-glnificlientid:tcp PORT 8443",
          "FromPort": 8443,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-glnificlientid",
          "ToPort": 8443,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructeksclusterClusterSecurityGroup891F0126:ALL TRAFFIC",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "ClusterSecurityGroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "Self-Ref",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/security-group/registry/id",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Cmd": [
            "delete",
            "pod",
            "-l",
            "app=nifi-registry",
          ],
          "ExecutionKey": "2801e4b0834baadbf865ebcbae9ec9999ef08746",
          "Namespace": "registry",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
            ],
          },
          "TimeoutSeconds": 300,
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Properties": {
          "ClusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Cmd": [
            "delete",
            "pod",
            "-l",
            "app=zookeeper",
          ],
          "ExecutionKey": "568df675a5e16f9dbcd2e8f9b6bca531933b02c0",
          "Namespace": "zookeeper",
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
            ],
          },
          "TimeoutSeconds": 300,
        },
        "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "",
          "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-zk--6ff9030b",
          "Path": "/",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "kms:Decrypt",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
                "Sid": "KmsDecrypt",
              },
              {
                "Action": "SecretsManager:GetSecretValue",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "Sid": "GetSecretValue",
              },
            ],
            "Version": "2012-10-17",
          },
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::ManagedPolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringLike": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Value",
                    ],
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Federated": {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-zk--6ff9030b",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Value": {
            "Fn::Join": [
              "",
              [
                "{"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":aud":"sts.amazonaws.com","",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "OpenIdConnectIssuer",
                  ],
                },
                ":sub":"system:serviceaccount:zookeeper:*"}",
              ],
            ],
          },
        },
        "Type": "Custom::AWSCDKCfnJson",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SMG4",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "HIPAA.Security-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
              {
                "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
              },
            ],
          },
        },
        "Properties": {
          "GenerateSecretString": {
            "ExcludeCharacters": "'",
            "ExcludePunctuation": true,
          },
          "KmsKeyId": {
            "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "Name": "test-org-test-env-test-domain-test-nificluster-main-zk-keystore-password",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SecretsManager::Secret",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AccessPointTags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
            {
              "Key": "Name",
              "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/zk-pv-ap-0",
            },
          ],
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "PosixUser": {
            "Gid": "1000",
            "Uid": "1000",
          },
          "RootDirectory": {
            "CreationInfo": {
              "OwnerGid": "1000",
              "OwnerUid": "1000",
              "Permissions": "750",
            },
            "Path": "/zk/0",
          },
        },
        "Type": "AWS::EFS::AccessPoint",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AccessPointTags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
            {
              "Key": "Name",
              "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/zk-pv-ap-1",
            },
          ],
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "PosixUser": {
            "Gid": "1000",
            "Uid": "1000",
          },
          "RootDirectory": {
            "CreationInfo": {
              "OwnerGid": "1000",
              "OwnerUid": "1000",
              "Permissions": "750",
            },
            "Path": "/zk/1",
          },
        },
        "Type": "AWS::EFS::AccessPoint",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "AccessPointTags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
            {
              "Key": "Name",
              "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/zk-pv-ap-2",
            },
          ],
          "FileSystemId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "PosixUser": {
            "Gid": "1000",
            "Uid": "1000",
          },
          "RootDirectory": {
            "CreationInfo": {
              "OwnerGid": "1000",
              "OwnerUid": "1000",
              "Permissions": "750",
            },
            "Path": "/zk/2",
          },
        },
        "Type": "AWS::EFS::AccessPoint",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/zk-sg",
          "GroupName": "test-org-test-env-test-domain-test-nificluster-main-zk",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "test-vpc-id",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from sg-kubectlclientid:tcp PORT 443",
          "FromPort": 443,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-kubectlclientid",
          "ToPort": 443,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructeksclusterClusterSecurityGroup891F0126:ALL TRAFFIC",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "ClusterSecurityGroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest1nifisg30149961:2181",
          "FromPort": 2181,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": 2181,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest2nifisg65E78910:2181",
          "FromPort": 2181,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": 2181,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "Self-Ref",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/security-group/zk/id",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:403:25] Access Point Names not known at deployment time. Permissions restricted by condition.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "",
          "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-zo--7de34633",
          "Path": "/",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "elasticfilesystem:DescribeAccessPoints",
                  "elasticfilesystem:DescribeMountTargets",
                  "elasticfilesystem:DescribeFileSystems",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":elasticfilesystem:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":access-point/",
                        {
                          "Ref": "REPLACED-CFN-LOGICAL-ID",
                        },
                      ],
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":elasticfilesystem:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":access-point/",
                        {
                          "Ref": "REPLACED-CFN-LOGICAL-ID",
                        },
                      ],
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":elasticfilesystem:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":access-point/",
                        {
                          "Ref": "REPLACED-CFN-LOGICAL-ID",
                        },
                      ],
                    ],
                  },
                ],
                "Sid": "AllowDescribeEFS",
              },
              {
                "Action": "ec2:DescribeAvailabilityZones",
                "Effect": "Allow",
                "Resource": "*",
                "Sid": "AllowDescribeAz",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncryptFrom",
                  "kms:ReEncryptTo",
                  "kms:GenerateDataKey",
                  "kms:GenerateDataKeyWithoutPlaintext",
                  "kms:GenerateDataKeyPair",
                  "kms:GenerateDataKeyPairWithoutPlaintext",
                  "kms:CreateGrant",
                  "kms:DescribeKey",
                  "kms:ListAliases",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
                "Sid": "AllowEfsKms",
              },
            ],
            "Version": "2012-10-17",
          },
        },
        "Type": "AWS::IAM::ManagedPolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/zookeeper-efs-sg",
          "GroupName": "test-org-test-env-test-domain-test-nificluster-main-zookeeper-efs",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "test-vpc-id",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": {
            "Fn::Join": [
              "",
              [
                "from ",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "GroupId",
                  ],
                },
                ":tcp PORT 2049",
              ],
            ],
          },
          "FromPort": 2049,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": 2049,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "from sg-glefsclientid:tcp PORT 2049",
          "FromPort": 2049,
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-glefsclientid",
          "ToPort": 2049,
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "HIPAA.Security-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
              {
                "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
                "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
              },
            ],
          },
        },
        "Properties": {
          "Description": "Self-Ref",
          "GroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "IpProtocol": "-1",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/security-group/zookeeper-efs/id",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
            ],
          },
        },
        "Properties": {
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Environment": {
            "Variables": {
              "LOG_LEVEL": "INFO",
              "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-nificluster-main-ec--3e8248bf",
          "Handler": "volume_check.lambda_handler",
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": "python3.13",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 120,
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/lambda/ec2volumeencryptioncheck-handler/arn",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-nificluster-main/lambda/ec2volumeencryptioncheck-handler/name",
          "Tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:72:27] Function is for custom resource; inline policy use appropriate",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:72:27] Function is for custom resource; inline policy use appropriate",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:72:27] Function is for custom resource; inline policy use appropriate",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:72:27] ec2:DescribeImages and ec2:DescribeVolumes do not accept a resource",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "ec2:DescribeInstances",
                  "ec2:DescribeVolumes",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "Ec2VolumeEncryptionCheck-handler",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-ec--3e8248bf",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-nificluster-main-ec--3e8248bf*",
                    ],
                  ],
                },
              },
              {
                "Action": "logs:CreateLogGroup",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-nificluster-main-ec--3e8248bf*",
                    ],
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Lambda function Runtime set by CDK Provider Framework",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
            ],
          },
        },
        "Properties": {
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Description": "AWS CDK resource provider framework - onEvent (test-org-test-env-test-domain-test-nificluster-main/custom-Ec2VolumeEncryptionCheck-provider)",
          "Environment": {
            "Variables": {
              "USER_ON_EVENT_FUNCTION_ARN": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-nificluster-main-ec2-333da4da",
          "Handler": "framework.onEvent",
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": {
            "Fn::FindInMap": [
              "LatestNodeRuntimeMap",
              {
                "Ref": "AWS::Region",
              },
              "value",
            ],
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 900,
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "Description": "CR Role",
          "RoleName": "test-org-test-env-test-domain-test-nificluster-main-ec2-333da4da",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "dataops-nifi",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-nificluster-main",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-nificluster-main-ec2-333da4da*",
                    ],
                  ],
                },
              },
              {
                "Action": "logs:CreateLogGroup",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-nificluster-main-ec2-333da4da*",
                    ],
                  ],
                },
              },
              {
                "Action": "lambda:InvokeFunction",
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        ":*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": "lambda:GetFunction",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
    },
    "Rules": {
      "CheckBootstrapVersion": {
        "Assertions": [
          {
            "Assert": {
              "Fn::Not": [
                {
                  "Fn::Contains": [
                    [
                      "1",
                      "2",
                      "3",
                      "4",
                      "5",
                    ],
                    {
                      "Ref": "BootstrapVersion",
                    },
                  ],
                },
              ],
            },
            "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
          },
        ],
      },
    },
  },
}
`;

exports[`dataops-nifi Snapshot Tests NifiCluster Stack Snapshot Test 1`] = `
{
  "Conditions": {
    "REPLACED-CFN-LOGICAL-ID": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Partition",
        },
        "aws",
      ],
    },
  },
  "Description": "(SO0320-dataops-nifi) Modern Data Architecture Accelerator. Version 1.0.0",
  "Mappings": {
    "LatestNodeRuntimeMap": {
      "af-south-1": {
        "value": "nodejs22.x",
      },
      "ap-east-1": {
        "value": "nodejs22.x",
      },
      "ap-east-2": {
        "value": "nodejs22.x",
      },
      "ap-northeast-1": {
        "value": "nodejs22.x",
      },
      "ap-northeast-2": {
        "value": "nodejs22.x",
      },
      "ap-northeast-3": {
        "value": "nodejs22.x",
      },
      "ap-south-1": {
        "value": "nodejs22.x",
      },
      "ap-south-2": {
        "value": "nodejs22.x",
      },
      "ap-southeast-1": {
        "value": "nodejs22.x",
      },
      "ap-southeast-2": {
        "value": "nodejs22.x",
      },
      "ap-southeast-3": {
        "value": "nodejs22.x",
      },
      "ap-southeast-4": {
        "value": "nodejs22.x",
      },
      "ap-southeast-5": {
        "value": "nodejs22.x",
      },
      "ap-southeast-7": {
        "value": "nodejs22.x",
      },
      "ca-central-1": {
        "value": "nodejs22.x",
      },
      "ca-west-1": {
        "value": "nodejs22.x",
      },
      "cn-north-1": {
        "value": "nodejs22.x",
      },
      "cn-northwest-1": {
        "value": "nodejs22.x",
      },
      "eu-central-1": {
        "value": "nodejs22.x",
      },
      "eu-central-2": {
        "value": "nodejs22.x",
      },
      "eu-isoe-west-1": {
        "value": "nodejs18.x",
      },
      "eu-north-1": {
        "value": "nodejs22.x",
      },
      "eu-south-1": {
        "value": "nodejs22.x",
      },
      "eu-south-2": {
        "value": "nodejs22.x",
      },
      "eu-west-1": {
        "value": "nodejs22.x",
      },
      "eu-west-2": {
        "value": "nodejs22.x",
      },
      "eu-west-3": {
        "value": "nodejs22.x",
      },
      "il-central-1": {
        "value": "nodejs22.x",
      },
      "me-central-1": {
        "value": "nodejs22.x",
      },
      "me-south-1": {
        "value": "nodejs22.x",
      },
      "mx-central-1": {
        "value": "nodejs22.x",
      },
      "sa-east-1": {
        "value": "nodejs22.x",
      },
      "us-east-1": {
        "value": "nodejs22.x",
      },
      "us-east-2": {
        "value": "nodejs22.x",
      },
      "us-gov-east-1": {
        "value": "nodejs22.x",
      },
      "us-gov-west-1": {
        "value": "nodejs22.x",
      },
      "us-iso-east-1": {
        "value": "nodejs18.x",
      },
      "us-iso-west-1": {
        "value": "nodejs18.x",
      },
      "us-isob-east-1": {
        "value": "nodejs18.x",
      },
      "us-isob-west-1": {
        "value": "nodejs18.x",
      },
      "us-west-1": {
        "value": "nodejs22.x",
      },
      "us-west-2": {
        "value": "nodejs22.x",
      },
    },
  },
  "Outputs": {
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:security-group:eks:id",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "GroupId",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:cluster:arn",
      },
      "Value": {
        "Fn::Join": [
          "",
          [
            "arn:",
            {
              "Ref": "AWS::Partition",
            },
            ":eks:",
            {
              "Ref": "AWS::Region",
            },
            ":",
            {
              "Ref": "AWS::AccountId",
            },
            ":fargateprofile/test-org-test-env-test-domain-test-nificluster-main/*",
          ],
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:managed-policy:clustermgmt:arn",
      },
      "Value": {
        "Ref": "REPLACED-CFN-LOGICAL-ID",
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:managed-policy:clustermgmt:name",
      },
      "Value": {
        "Fn::Select": [
          1,
          {
            "Fn::Split": [
              "/",
              {
                "Fn::Select": [
                  5,
                  {
                    "Fn::Split": [
                      ":",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:cluster:name",
      },
      "Value": {
        "Ref": "REPLACED-CFN-LOGICAL-ID",
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:instance:id-test-org-test-env-test-domain-test-nificluster-main-mgmt",
      },
      "Value": {
        "Ref": "REPLACED-CFN-LOGICAL-ID",
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:role:mgmtinstance:arn",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "Arn",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:role:mgmtinstance:id",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "RoleId",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:role:mgmtinstance:name",
      },
      "Value": {
        "Ref": "REPLACED-CFN-LOGICAL-ID",
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main-test1:security-group:nificlusterefs:id",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "GroupId",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main-test1:security-group:nifi:id",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "GroupId",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main-test2:security-group:nificlusterefs:id",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "GroupId",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main-test2:security-group:nifi:id",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "GroupId",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:security-group:registryefs:id",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "GroupId",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:security-group:registry:id",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "GroupId",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:security-group:zk:id",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "GroupId",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:security-group:zookeeperefs:id",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "GroupId",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:lambda:ec2volumeencryptioncheckhandler:arn",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "Arn",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-nificluster-main:lambda:ec2volumeencryptioncheckhandler:name",
      },
      "Value": {
        "Ref": "REPLACED-CFN-LOGICAL-ID",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
    "SsmParameterValuetestorgtestdomaincaefbootstraprolehelperservicetokenC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/test-org/test-domain/caef-bootstrap/role-helper-service-token",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValuetestorgtestdomaindataopsprojecttestdeploymentRoledefaultC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/test-org/test-domain/dataops-project-test/deploymentRole/default",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/test-org/test-domain/dataops-project-test/kmsArn/default",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValuetestorgtestdomaindataopsprojecttestprojectBucketdefaultC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/test-org/test-domain/dataops-project-test/projectBucket/default",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValuetestorgtestdomaindataopsprojecttestprojectTopicArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/test-org/test-domain/dataops-project-test/projectTopicArn/default",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValuetestorgtestdomaindataopsprojecttestsecurityConfigurationdefaultC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/test-org/test-domain/dataops-project-test/securityConfiguration/default",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Handler": "__entrypoint__.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] AWSLambdaBasicExecutionRole, AWSLambdaVPCAccessExecutionRole are least privilege.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Resource names not known at deployment time.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Function generated by EKS L2 construct.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Policy statements are specific to custom resource.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Policy statements are specific to custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/mdaa-kubectl-provider.ts:140:25] Policy statements are specific to custom resource.",
            },
          ],
        },
      },
      "Properties": {
        "Parameters": {
          "referencetotestorgtestenvtestdomaintestnificlustermainconstructekscluster26260942ClusterSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "ClusterSecurityGroupId",
            ],
          },
          "referencetotestorgtestenvtestdomaintestnificlustermainconstructeksclusterKubectlHandlerRole73675046Arn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "referencetotestorgtestenvtestdomaintestnificlustermainconstructkubectllayerF4C3A8C0Ref": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://s3.",
              {
                "Ref": "AWS::Region",
              },
              ".",
              {
                "Ref": "AWS::URLSuffix",
              },
              "/",
              {
                "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
              },
              "/4dabde655780b3481d1b459f1cd244092604008aae0ae70d3d854c895f31920c.json",
            ],
          ],
        },
      },
      "Type": "AWS::CloudFormation::Stack",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Handler": "__entrypoint__.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "iam:CreateOpenIDConnectProvider",
                    "iam:DeleteOpenIDConnectProvider",
                    "iam:UpdateOpenIDConnectProviderThumbprint",
                    "iam:AddClientIDToOpenIDConnectProvider",
                    "iam:RemoveClientIDFromOpenIDConnectProvider",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "Inline",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RoleResAdmin0": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Ref": "SsmParameterValuetestorgtestdomaincaefbootstraprolehelperservicetokenC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "roleRef": {
          "name": "Admin",
          "refId": "Admin-0",
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "RoleResAdmin1": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Ref": "SsmParameterValuetestorgtestdomaincaefbootstraprolehelperservicetokenC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "roleRef": {
          "name": "eks-admin",
          "refId": "Admin-1",
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "Stack description parameter to update on version changes",
        "Name": "/test-org/test-domain/test-nificluster-main/aws-solution",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": "(SO0320-dataops-nifi) Modern Data Architecture Accelerator. Version 1.0.0",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] AWSLambdaBasicExecutionRole, AWSLambdaVPCAccessExecutionRole are least privilege.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Resource names not known at deployment time.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function generated by EKS L2 construct.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Policy statements are specific to custom resource.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Policy statements are specific to custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Policy statements are specific to custom resource.",
            },
            {
              "id": "HIPAA.Security-CloudWatchLogGroupEncrypted",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Loggroup data is always encrypted in CloudWatch Logs",
            },
            {
              "id": "PCI.DSS.321-CloudWatchLogGroupEncrypted",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Loggroup data is always encrypted in CloudWatch Logs",
            },
            {
              "id": "NIST.800.53.R5-CloudWatchLogGroupEncrypted",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Loggroup data is always encrypted in CloudWatch Logs",
            },
            {
              "id": "AwsSolutions-SF1",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time.",
            },
            {
              "id": "AwsSolutions-SF2",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:470:27] Function is used as Cfn Custom Resource only during deployment time.",
            },
          ],
        },
      },
      "Properties": {
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://s3.",
              {
                "Ref": "AWS::Region",
              },
              ".",
              {
                "Ref": "AWS::URLSuffix",
              },
              "/",
              {
                "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
              },
              "/5a76eabcc28867748f9da94a16a53f8b481d12ed3cbfdb31edcbce0ca0101171.json",
            ],
          ],
        },
      },
      "Type": "AWS::CloudFormation::Stack",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] AWSLambdaBasicExecutionRole, AWSLambdaVPCAccessExecutionRole are least privilege.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Resource names not known at deployment time.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Function generated by EKS L2 construct.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Policy statements are specific to custom resource.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Function is used as Cfn Custom Resource only during deployment time. Concurrency managed via Cfn.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Function is used as Cfn Custom Resource only during deployment time. Error handling managed via Cfn.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Policy statements are specific to custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:542:27] Policy statements are specific to custom resource.",
            },
          ],
        },
      },
      "Properties": {
        "Parameters": {
          "referencetotestorgtestenvtestdomaintestnificlustermainconstructekscluster26260942ClusterSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "ClusterSecurityGroupId",
            ],
          },
          "referencetotestorgtestenvtestdomaintestnificlustermainconstructeksclusterKubectlHandlerRole73675046Arn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "referencetotestorgtestenvtestdomaintestnificlustermainconstructkubectllayerF4C3A8C0Ref": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://s3.",
              {
                "Ref": "AWS::Region",
              },
              ".",
              {
                "Ref": "AWS::URLSuffix",
              },
              "/",
              {
                "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
              },
              "/13a9ae0324f31b0172ca124209d07dacf158417aca279b64af2697ab01f0fc8e.json",
            ],
          ],
        },
      },
      "Type": "AWS::CloudFormation::Stack",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/cluster-sg",
        "GroupName": "test-org-test-env-test-domain-test-nificluster-main-eks",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "test-vpc-id",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from sg-kubectlclientid:tcp PORT 443",
        "FromPort": 443,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-kubectlclientid",
        "ToPort": 443,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Self-Ref",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructeksclusterClusterSecurityGroup891F0126:ALL TRAFFIC",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "ClusterSecurityGroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/security-group/eks/id",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "",
        "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-ext-6b73ecad",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "Sid": "KmsDecrypt",
            },
            {
              "Action": "SecretsManager:GetSecretValue",
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "Sid": "GetSecretValue",
            },
          ],
          "Version": "2012-10-17",
        },
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringLike": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Value",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-ext-6b73ecad",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Value": {
          "Fn::Join": [
            "",
            [
              "{"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":aud":"sts.amazonaws.com","",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":sub":"system:serviceaccount:cert-manager:*"}",
            ],
          ],
        },
      },
      "Type": "Custom::AWSCDKCfnJson",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SMG4",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "HIPAA.Security-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
          ],
        },
      },
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": "'",
          "ExcludePunctuation": true,
        },
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "Name": "test-org-test-env-test-domain-test-nificluster-main-ca-keystore-password",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Cmd": [
          "get",
          "deployment.apps",
          "cert-manager-webhook",
          "-o",
          "jsonpath='{.status.readyReplicas}'",
        ],
        "ExpectedOutput": "1",
        "Namespace": "cert-manager",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
          ],
        },
        "TimeoutSeconds": 300,
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Cmd": [
          "get",
          "deployment.apps",
          "external-dns",
          "-o",
          "jsonpath='{.status.readyReplicas}'",
        ],
        "ExpectedOutput": "1",
        "Namespace": "external-dns",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
          ],
        },
        "TimeoutSeconds": 300,
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Cmd": [
          "get",
          "deployment.apps",
          "external-secrets-webhook",
          "-o",
          "jsonpath='{.status.readyReplicas}'",
        ],
        "ExpectedOutput": "1",
        "Namespace": "external-secrets",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
          ],
        },
        "TimeoutSeconds": 300,
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Cmd": [
          "get",
          "awspcaclusterissuer",
          "private-ca-cluster-issuer",
          "-o",
          "jsonpath="{.status.conditions[?(@.type=='Ready')].status }"",
        ],
        "ExpectedOutput": "True",
        "Namespace": "cert-manager",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
          ],
        },
        "TimeoutSeconds": 300,
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EFSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce NIST.800.53.R5-EFSInBackupPlan on EFS volume.",
            },
            {
              "id": "HIPAA.Security-EFSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
            },
            {
              "id": "PCI.DSS.321-EFSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
            },
          ],
        },
      },
      "Properties": {
        "Encrypted": true,
        "FileSystemTags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
          {
            "Key": "Name",
            "Value": "test-org-test-env-test-domain-test-nificluster-main-registry",
          },
        ],
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "PerformanceMode": "maxIO",
      },
      "Type": "AWS::EFS::FileSystem",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        ],
        "SubnetId": "test-subnet-id-1",
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        ],
        "SubnetId": "test-subnet-id-2",
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EFSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce NIST.800.53.R5-EFSInBackupPlan on EFS volume.",
            },
            {
              "id": "HIPAA.Security-EFSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
            },
            {
              "id": "PCI.DSS.321-EFSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
            },
          ],
        },
      },
      "Properties": {
        "Encrypted": true,
        "FileSystemTags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
          {
            "Key": "Name",
            "Value": "test-org-test-env-test-domain-test-nificluster-main-zk",
          },
        ],
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "PerformanceMode": "maxIO",
      },
      "Type": "AWS::EFS::FileSystem",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        ],
        "SubnetId": "test-subnet-id-1",
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        ],
        "SubnetId": "test-subnet-id-2",
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "AssumeRoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "AttributesRevision": 5,
        "Config": {
          "accessConfig": {},
          "encryptionConfig": [
            {
              "provider": {
                "keyArn": {
                  "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
              },
              "resources": [
                "secrets",
              ],
            },
          ],
          "kubernetesNetworkConfig": {
            "ipFamily": "ipv4",
          },
          "logging": {
            "clusterLogging": [
              {
                "enabled": true,
                "types": [
                  "api",
                  "audit",
                  "authenticator",
                  "controllerManager",
                  "scheduler",
                ],
              },
            ],
          },
          "name": "test-org-test-env-test-domain-test-nificluster-main",
          "resourcesVpcConfig": {
            "endpointPrivateAccess": true,
            "endpointPublicAccess": false,
            "securityGroupIds": [
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
            ],
            "subnetIds": [
              "test-subnet-id-1",
              "test-subnet-id-2",
            ],
          },
          "roleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
          "version": "1.27",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksClusterResourceProviderframeworkonEvent26D3AFA7Arn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-Cluster",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"aws-auth","namespace":"kube-system","labels":{"aws.cdk.eks/prune-c810045c00fd47b7dc470733073849acdad8eb4a0a":""}},"data":{"mapRoles":"[{\\"rolearn\\":\\"",
              {
                "Fn::GetAtt": [
                  "RoleResAdmin0",
                  "arn",
                ],
              },
              "\\",\\"username\\":\\"",
              {
                "Fn::GetAtt": [
                  "RoleResAdmin0",
                  "arn",
                ],
              },
              "\\",\\"groups\\":[\\"system:masters\\"]},{\\"rolearn\\":\\"",
              {
                "Fn::GetAtt": [
                  "RoleResAdmin1",
                  "arn",
                ],
              },
              "\\",\\"username\\":\\"",
              {
                "Fn::GetAtt": [
                  "RoleResAdmin1",
                  "arn",
                ],
              },
              "\\",\\"groups\\":[\\"system:masters\\"]},{\\"rolearn\\":\\"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              "\\",\\"username\\":\\"system:node:{{SessionName}}\\",\\"groups\\":[\\"system:bootstrappers\\",\\"system:nodes\\",\\"system:node-proxier\\"]},{\\"rolearn\\":\\"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              "\\",\\"username\\":\\"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              "\\",\\"groups\\":[\\"system:masters\\"]},{\\"rolearn\\":\\"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              "\\",\\"username\\":\\"system:node:{{SessionName}}\\",\\"groups\\":[\\"system:bootstrappers\\",\\"system:nodes\\",\\"system:node-proxier\\"]},{\\"rolearn\\":\\"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              "\\",\\"username\\":\\"system:node:{{SessionName}}\\",\\"groups\\":[\\"system:bootstrappers\\",\\"system:nodes\\",\\"system:node-proxier\\"]}]","mapUsers":"[]","mapAccounts":"[]"}}]",
            ],
          ],
        },
        "Overwrite": true,
        "PruneLabel": "aws.cdk.eks/prune-c810045c00fd47b7dc470733073849acdad8eb4a0a",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainclustersg1F3C4614:ALL TRAFFIC",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "ClusterSecurityGroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest1nifisg30149961:ALL TRAFFIC",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "ClusterSecurityGroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest2nifisg65E78910:ALL TRAFFIC",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "ClusterSecurityGroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructregistrysg7FFF1011:ALL TRAFFIC",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "ClusterSecurityGroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:806:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructzksg6745019C:ALL TRAFFIC",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "ClusterSecurityGroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ApplyPatchJson": "{"spec":{"template":{"metadata":{"annotations":{"eks.amazonaws.com/compute-type":"fargate"}}}}}",
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "PatchType": "strategic",
        "ResourceName": "deployment/coredns",
        "ResourceNamespace": "kube-system",
        "RestorePatchJson": "{"spec":{"template":{"metadata":{"annotations":{"eks.amazonaws.com/compute-type":"ec2"}}}}}",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesPatch",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] EC2 resources not known at deployment time.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions limited to specific cluster",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions are specific to cluster.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions are specific to cluster.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions are specific to cluster.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksClusterResourceProviderOnEventHandlerServiceRole9480D93BArn",
                  ],
                },
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksClusterResourceProviderIsCompleteHandlerServiceRoleD6199454Arn",
                  ],
                },
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] EC2 resources not known at deployment time.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions limited to specific cluster",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions are specific to cluster.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions are specific to cluster.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:422:25] Permissions are specific to cluster.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "eks:CreateCluster",
                "eks:DescribeCluster",
                "eks:DescribeUpdate",
                "eks:DeleteCluster",
                "eks:UpdateClusterVersion",
                "eks:UpdateClusterConfig",
                "eks:CreateFargateProfile",
                "eks:TagResource",
                "eks:UntagResource",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":eks:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":cluster/test-org-test-env-test-domain-test-nificluster-main",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":eks:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":cluster/test-org-test-env-test-domain-test-nificluster-main/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "eks:DescribeFargateProfile",
                "eks:DeleteFargateProfile",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":eks:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":fargateprofile/test-org-test-env-test-domain-test-nificluster-main/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "iam:GetRole",
                "iam:listAttachedRolePolicies",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "iam:CreateServiceLinkedRole",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeRouteTables",
                "ec2:DescribeDhcpOptions",
                "ec2:DescribeVpcs",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:CreateGrant",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] AWSLambdaBasicExecutionRole, AWSLambdaVPCAccessExecutionRole are least privilege.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] S3 CDK Asset names not known at deployment time",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] Permissions are specific to custom resource requirements.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] Permissions are specific to custom resource requirements.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] Permissions are specific to custom resource requirements.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "eks:DescribeCluster",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] AWSLambdaBasicExecutionRole, AWSLambdaVPCAccessExecutionRole are least privilege.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] S3 CDK Asset names not known at deployment time",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] Permissions are specific to custom resource requirements.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] Permissions are specific to custom resource requirements.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:446:27] Permissions are specific to custom resource requirements.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
              ],
            ],
          },
          {
            "Fn::If": [
              "REPLACED-CFN-LOGICAL-ID",
              {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly",
                  ],
                ],
              },
              {
                "Ref": "AWS::NoValue",
              },
            ],
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "Type": "String",
        "Value": "aws:cdk:eks:kubectl-ready",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:416:25] AmazonEKSClusterPolicy is required for proper cluster function.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "eks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonEKSClusterPolicy",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"aws-logging","namespace":"aws-observability","labels":{"aws.cdk.eks/prune-c8566e68070c35c18fe12b057fd4ca6dec84bff124":""}},"data":{"flb_log_cw":"false","output.conf":"\\n    [OUTPUT]\\n        Name cloudwatch_logs\\n        Match *\\n        region ",
              {
                "Ref": "AWS::Region",
              },
              "\\n        log_group_name ",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "\\n        auto_create_group false"}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c8566e68070c35c18fe12b057fd4ca6dec84bff124",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"aws-observability","labels":{"aws.cdk.eks/prune-c8317ec9f2f66871c1af40a6b9424ad8b5545dd4be":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"aws-observability","labels":{"aws.cdk.eks/prune-c8317ec9f2f66871c1af40a6b9424ad8b5545dd4be":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
              ""]}}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c8317ec9f2f66871c1af40a6b9424ad8b5545dd4be",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              ""},"name":"ca-issuer-external-secret-store","namespace":"cert-manager","labels":{"aws.cdk.eks/prune-c80852611f4a0f22a7fac980cf5a6a4f12fd05da90":""}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"SecretStore","metadata":{"name":"ca-issuer-external-secret-store","namespace":"cert-manager","labels":{"aws.cdk.eks/prune-c80852611f4a0f22a7fac980cf5a6a4f12fd05da90":""}},"spec":{"provider":{"aws":{"auth":{"jwt":{"serviceAccountRef":{"name":"ca-issuer-external-secret-store"}}},"region":"",
              {
                "Ref": "AWS::Region",
              },
              "","service":"SecretsManager"}}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"ExternalSecret","metadata":{"name":"ca-keystore-external-secret","namespace":"cert-manager","labels":{"aws.cdk.eks/prune-c80852611f4a0f22a7fac980cf5a6a4f12fd05da90":""}},"spec":{"data":[{"remoteRef":{"key":"",
              {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        1,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        2,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        3,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        4,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        5,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        7,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        8,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        9,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        10,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        11,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                ],
              },
              ""},"secretKey":"ca-keystore-password"}],"refreshInterval":"1h","secretStoreRef":{"kind":"SecretStore","name":"ca-issuer-external-secret-store"},"target":{"creationPolicy":"Owner","name":"ca-keystore-secret"}}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"ca-cert","namespace":"cert-manager","labels":{"aws.cdk.eks/prune-c80852611f4a0f22a7fac980cf5a6a4f12fd05da90":""}},"spec":{"commonName":"ca","duration":"144h0m0s","isCA":true,"issuerRef":{"group":"awspca.cert-manager.io","kind":"AWSPCAClusterIssuer","name":"private-ca-cluster-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"ca-keystore-password","name":"ca-keystore-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"12h0m0s","secretName":"ca-cert-secret"}},{"apiVersion":"cert-manager.io/v1","kind":"ClusterIssuer","metadata":{"name":"ca-issuer","namespace":"cert-manager","labels":{"aws.cdk.eks/prune-c80852611f4a0f22a7fac980cf5a6a4f12fd05da90":""}},"spec":{"ca":{"secretName":"ca-cert-secret"}}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c80852611f4a0f22a7fac980cf5a6a4f12fd05da90",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"cert-manager","labels":{"aws.cdk.eks/prune-c83f805ba9ea48887b9be13a051011f3a5050ab97d":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"cert-manager","labels":{"aws.cdk.eks/prune-c83f805ba9ea48887b9be13a051011f3a5050ab97d":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
              ""]}}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c83f805ba9ea48887b9be13a051011f3a5050ab97d",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "Chart": "cert-manager",
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Namespace": "cert-manager",
        "Release": "cert-manager",
        "Repository": "https://charts.jetstack.io",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
        "Values": "{"namespace":"cert-manager","installCRDs":true,"global":{"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}]},"webhook":{"securePort":10260,"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}]},"cainjector":{"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}]}}",
        "Version": "1.13.0",
      },
      "Type": "Custom::AWSCDK-EKS-HelmChart",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "Chart": "external-secrets",
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Namespace": "external-secrets",
        "Release": "external-secrets",
        "Repository": "https://charts.external-secrets.io",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
        "Values": "{"installCRDs":true,"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}],"webhook":{"port":9443}}",
        "Version": "0.9.5",
      },
      "Type": "Custom::AWSCDK-EKS-HelmChart",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "Chart": "aws-privateca-issuer",
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Namespace": "cert-manager",
        "Release": "aws-privateca-issuer",
        "Repository": "https://cert-manager.github.io/aws-privateca-issuer",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
        "Values": "{"installCRDs":true,"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}],"serviceAccount":{"create":false,"name":"private-ca-service-account"}}",
        "Version": "1.2.5",
      },
      "Type": "Custom::AWSCDK-EKS-HelmChart",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/cluster/arn",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":eks:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":fargateprofile/test-org-test-env-test-domain-test-nificluster-main/*",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:655:25] Resource names not known at deployment time.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "",
        "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-clu-126c9ec1",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "eks:DescribeCluster",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "ssm:UpdateInstanceInformation",
                "ssm:UpdateInstanceAssociationStatus",
                "ssm:UpdateAssociationStatus",
                "ssm:PutInventory",
                "ssm:PutConfigurePackageResult",
                "ssm:PutComplianceItems",
                "ssm:ListInstanceAssociations",
                "ssm:ListAssociations",
                "ssm:GetManifest",
                "ssm:GetDocument",
                "ssm:GetDeployablePatchSnapshotForInstance",
                "ssm:DescribeDocument",
                "ssm:DescribeAssociation",
                "ssmmessages:OpenDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:CreateControlChannel",
                "ec2messages:SendReply",
                "ec2messages:GetMessages",
                "ec2messages:GetEndpoint",
                "ec2messages:FailMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:AcknowledgeMessage",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "SecretsManager:GetSecretValue",
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "Sid": "GetSecretValue",
            },
            {
              "Action": [
                "acm-pca:IssueCertificate",
                "acm-pca:GetCertificate",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:acm-pca:test-region:test-account:certificate-authority/test-acm-pca-id",
              "Sid": "IssueCert",
            },
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "Sid": "ProjectKms",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:655:25] Resource names not known at deployment time.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/managed-policy/cluster-mgmt/arn",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:655:25] Resource names not known at deployment time.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/managed-policy/cluster-mgmt/name",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::Select": [
            1,
            {
              "Fn::Split": [
                "/",
                {
                  "Fn::Select": [
                    5,
                    {
                      "Fn::Split": [
                        ":",
                        {
                          "Ref": "REPLACED-CFN-LOGICAL-ID",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/cluster/name",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": "[{"apiVersion":"storage.k8s.io/v1","kind":"StorageClass","metadata":{"name":"efs-sc","labels":{"aws.cdk.eks/prune-c87186a17e17220b1f195caf2f196eec5737b630ce":""}},"provisioner":"efs.csi.aws.com"}]",
        "PruneLabel": "aws.cdk.eks/prune-c87186a17e17220b1f195caf2f196eec5737b630ce",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              ""},"labels":{"aws.cdk.eks/prune-c845eedb1276fbbaf904eb04af180b4bb6000e917e":"","app.kubernetes.io/name":"external-dns"},"name":"external-dns","namespace":"external-dns"}},{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"aws.cdk.eks/prune-c845eedb1276fbbaf904eb04af180b4bb6000e917e":"","app.kubernetes.io/name":"external-dns"},"name":"external-dns","namespace":"external-dns"},"rules":[{"apiGroups":[""],"resources":["services","endpoints","pods","nodes"],"verbs":["get","watch","list"]},{"apiGroups":["extensions","networking.k8s.io"],"resources":["ingresses"],"verbs":["get","watch","list"]}]},{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"aws.cdk.eks/prune-c845eedb1276fbbaf904eb04af180b4bb6000e917e":"","app.kubernetes.io/name":"external-dns"},"name":"external-dns-viewer","namespace":"external-dns"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"external-dns"},"subjects":[{"kind":"ServiceAccount","name":"external-dns","namespace":"external-dns"}]},{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"aws.cdk.eks/prune-c845eedb1276fbbaf904eb04af180b4bb6000e917e":"","app.kubernetes.io/name":"external-dns"},"name":"external-dns","namespace":"external-dns"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/name":"external-dns"}},"strategy":{"type":"Recreate"},"template":{"metadata":{"labels":{"app.kubernetes.io/name":"external-dns"}},"spec":{"containers":[{"args":["--source=service","--source=ingress","--provider=aws","--policy=upsert-only","--aws-zone-type=private","--registry=txt","--txt-owner-id=external-dns"],"env":[{"name":"AWS_DEFAULT_REGION","value":"",
              {
                "Ref": "AWS::Region",
              },
              ""}],"image":"registry.k8s.io/external-dns/external-dns:v0.13.5","name":"external-dns"}],"serviceAccountName":"external-dns"}}}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c845eedb1276fbbaf904eb04af180b4bb6000e917e",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"external-dns","labels":{"aws.cdk.eks/prune-c844fe6be982bda4449ca9a373a734b5c610135b76":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"external-dns","labels":{"aws.cdk.eks/prune-c844fe6be982bda4449ca9a373a734b5c610135b76":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
              ""]}}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c844fe6be982bda4449ca9a373a734b5c610135b76",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"external-secrets","labels":{"aws.cdk.eks/prune-c884a955bde237b67757d1a25793664ae2590dc4b9":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"external-secrets","labels":{"aws.cdk.eks/prune-c884a955bde237b67757d1a25793664ae2590dc4b9":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
              ""]}}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c884a955bde237b67757d1a25793664ae2590dc4b9",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Policy::arn:<AWS::Partition>:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:750:25] AmazonEKSFargatePodExecutionRolePolicy is required for proper cluster function.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] ecr:GetAuthorizationToken does not accept a resource.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] Permissions are appropriate as inline policy.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] Permissions are appropriate as inline policy.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] Permissions are appropriate as inline policy.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":eks:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":fargateprofile/test-org-test-env-test-domain-test-nificluster-main/*",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "eks-fargate-pods.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
              ],
            ],
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-nif-60e6a43c",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] ecr:GetAuthorizationToken does not accept a resource.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] Permissions are appropriate as inline policy.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] Permissions are appropriate as inline policy.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:207:25] Permissions are appropriate as inline policy.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":repository/",
                    {
                      "Fn::Sub": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Policy::arn:<AWS::Partition>:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:750:25] AmazonEKSFargatePodExecutionRolePolicy is required for proper cluster function.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":eks:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":fargateprofile/test-org-test-env-test-domain-test-nificluster-main/*",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "eks-fargate-pods.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
              ],
            ],
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-serv--4271a4",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Policy::arn:<AWS::Partition>:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:750:25] AmazonEKSFargatePodExecutionRolePolicy is required for proper cluster function.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":eks:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":fargateprofile/test-org-test-env-test-domain-test-nificluster-main/*",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "eks-fargate-pods.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
              ],
            ],
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-system",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "AssumeRoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Config": {
          "clusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "fargateProfileName": "nifi",
          "podExecutionRoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "selectors": [
            {
              "namespace": "nifi-test1",
            },
            {
              "namespace": "nifi-test2",
            },
          ],
          "tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksClusterResourceProviderframeworkonEvent26D3AFA7Arn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-FargateProfile",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "AssumeRoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Config": {
          "clusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "fargateProfileName": "services",
          "podExecutionRoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "selectors": [
            {
              "namespace": "external-dns",
            },
            {
              "namespace": "external-secrets",
            },
            {
              "namespace": "cert-manager",
            },
            {
              "namespace": "zookeeper",
            },
            {
              "namespace": "registry",
            },
          ],
          "tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksClusterResourceProviderframeworkonEvent26D3AFA7Arn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-FargateProfile",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AssumeRoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Config": {
          "clusterName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "fargateProfileName": "system",
          "podExecutionRoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "selectors": [
            {
              "namespace": "default",
            },
            {
              "namespace": "kube-system",
            },
            {
              "namespace": "aws-observability",
            },
          ],
          "tags": {
            "mdaa_cdk_app": "dataops-nifi",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-nificluster-main",
            "mdaa_org": "test-org",
          },
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksClusterResourceProviderframeworkonEvent26D3AFA7Arn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-FargateProfile",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ClientIDList": [
          "sts.amazonaws.com",
        ],
        "CodeHash": "REPLACED-ASSET-HASH",
        "RejectUnauthorized": false,
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Url": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "OpenIdConnectIssuerUrl",
          ],
        },
      },
      "Type": "Custom::AWSCDKOpenIdConnectProvider",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC29",
              "reason": "[MDAA:@aws-mdaa/ec2-constructs/lib/instance.ts:245:25] Remediated through property override.",
            },
            {
              "id": "NIST.800.53.R5-EC2IMDSv2Enabled",
              "reason": "[MDAA:@aws-mdaa/ec2-constructs/lib/instance.ts:245:25] Remediated through property override.",
            },
            {
              "id": "HIPAA.Security-EC2IMDSv2Enabled",
              "reason": "[MDAA:@aws-mdaa/ec2-constructs/lib/instance.ts:245:25] Remediated through property override.",
            },
            {
              "id": "PCI.DSS.321-EC2IMDSv2Enabled",
              "reason": "[MDAA:@aws-mdaa/ec2-constructs/lib/instance.ts:245:25] Remediated through property override.",
            },
          ],
        },
      },
      "Properties": {
        "AvailabilityZone": "test-az",
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": false,
              "Encrypted": true,
              "KmsKeyId": {
                "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "VolumeSize": 50,
            },
          },
        ],
        "DisableApiTermination": true,
        "IamInstanceProfile": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t3.micro",
        "KeyName": "test-key-pair",
        "LaunchTemplate": {
          "LaunchTemplateName": "test-org-test-env-test-domain-test-nificluster-main-mgmt",
          "Version": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "LatestVersionNumber",
            ],
          },
        },
        "Monitoring": true,
        "PropagateTagsToVolumeOnCreation": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "ClusterSecurityGroupId",
            ],
          },
        ],
        "SubnetId": "test-subnet-id",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
          {
            "Key": "Name",
            "Value": "test-org-test-env-test-domain-test-nificluster-main-mgmt",
          },
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash
mkdir -p /usr/local/bin && cd /usr/local/bin && curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.9/2024-01-04/bin/linux/amd64/kubectl && chmod +x /usr/local/bin/kubectl && cd ~
aws eks update-kubeconfig --region ",
                {
                  "Ref": "AWS::Region",
                },
                " --name ",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "
cp /root/.kube/config /etc/kubeconfig && chmod o+r /etc/kubeconfig
echo 'export KUBECONFIG=/etc/kubeconfig' >> /etc/profile.d/kubectl.sh
yum install -y java-21-amazon-corretto.x86_64
aws secretsmanager get-secret-value --secret-id ",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                " |jq -r '.SecretString' > /tmp/keystore-passwd
openssl ecparam -name secp384r1 -genkey -noout -out /root/mgmt-instance.key.pem
openssl req -new -sha256 -key /root/mgmt-instance.key.pem -out /root/mgmt-instance.csr -subj "/CN=mgmt-instance"
aws acm-pca issue-certificate --certificate-authority-arn arn:aws:acm-pca:test-region:test-account:certificate-authority/test-acm-pca-id --csr fileb:///root/mgmt-instance.csr  --signing-algorithm "SHA512WITHECDSA" --validity Value=7,Type="DAYS"|jq -r '.CertificateArn' > /tmp/certificate-arn
cd /root && wget https://dlcdn.apache.org/nifi/1.25.0/nifi-toolkit-1.25.0-bin.zip && unzip nifi-toolkit-1.25.0-bin.zip && mv /root/nifi-toolkit-1.25.0 /opt/nifi-toolkit
export CERT_ARN=\`cat /tmp/certificate-arn\` && aws acm-pca get-certificate --certificate-authority-arn arn:aws:acm-pca:test-region:test-account:certificate-authority/test-acm-pca-id --certificate-arn $CERT_ARN | jq -r .Certificate > /root/mgmt-instance.cert.pem
export CERT_ARN=\`cat /tmp/certificate-arn\` && aws acm-pca get-certificate --certificate-authority-arn arn:aws:acm-pca:test-region:test-account:certificate-authority/test-acm-pca-id --certificate-arn $CERT_ARN | jq -r .CertificateChain > /root/ca.cert.pem
openssl pkcs12 -export -in /root/mgmt-instance.cert.pem -inkey /root/mgmt-instance.key.pem -out /opt/nifi-toolkit/conf/mgmt-instance.cert.p12 -name mgmt-instance -password pass:\`cat /tmp/keystore-passwd\`
",
              ],
            ],
          },
        },
      },
      "Type": "AWS::EC2::Instance",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/instance/id-test-org-test-env-test-domain-test-nificluster-main-mgmt",
        "Tags": {
          "Name": "test-org-test-env-test-domain-test-nificluster-main-mgmt",
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "LaunchTemplateData": {
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvda",
              "Ebs": {
                "DeleteOnTermination": false,
                "Encrypted": true,
                "KmsKeyId": {
                  "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
                "VolumeSize": 50,
              },
            },
          ],
          "MetadataOptions": {
            "HttpTokens": "required",
          },
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "mdaa_cdk_app",
                  "Value": "dataops-nifi",
                },
                {
                  "Key": "mdaa_domain",
                  "Value": "test-domain",
                },
                {
                  "Key": "mdaa_env",
                  "Value": "test-env",
                },
                {
                  "Key": "mdaa_module_name",
                  "Value": "test-nificluster-main",
                },
                {
                  "Key": "mdaa_org",
                  "Value": "test-org",
                },
                {
                  "Key": "Name",
                  "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/eks-cluster/mgmt-instance/launch-template",
                },
              ],
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "mdaa_cdk_app",
                  "Value": "dataops-nifi",
                },
                {
                  "Key": "mdaa_domain",
                  "Value": "test-domain",
                },
                {
                  "Key": "mdaa_env",
                  "Value": "test-env",
                },
                {
                  "Key": "mdaa_module_name",
                  "Value": "test-nificluster-main",
                },
                {
                  "Key": "mdaa_org",
                  "Value": "test-org",
                },
                {
                  "Key": "Name",
                  "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/eks-cluster/mgmt-instance/launch-template",
                },
              ],
            },
          ],
        },
        "LaunchTemplateName": "test-org-test-env-test-domain-test-nificluster-main-mgmt",
        "TagSpecifications": [
          {
            "ResourceType": "launch-template",
            "Tags": [
              {
                "Key": "mdaa_cdk_app",
                "Value": "dataops-nifi",
              },
              {
                "Key": "mdaa_domain",
                "Value": "test-domain",
              },
              {
                "Key": "mdaa_env",
                "Value": "test-env",
              },
              {
                "Key": "mdaa_module_name",
                "Value": "test-nificluster-main",
              },
              {
                "Key": "mdaa_org",
                "Value": "test-org",
              },
              {
                "Key": "Name",
                "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/eks-cluster/mgmt-instance/launch-template",
              },
            ],
          },
        ],
      },
      "Type": "AWS::EC2::LaunchTemplate",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-mg--284ac04c",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/role/mgmt-instance/arn",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/role/mgmt-instance/id",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "RoleId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/role/mgmt-instance/name",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "instanceId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "kmsKeyArn": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
      },
      "Type": "Custom::Ec2VolumeEncryptionCheck",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"nifi-test1","labels":{"aws.cdk.eks/prune-c88907e94ec2e3c380257d7b5883d3cf35e61db1b8":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c88907e94ec2e3c380257d7b5883d3cf35e61db1b8":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
              ""]}}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c88907e94ec2e3c380257d7b5883d3cf35e61db1b8",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"nifi-test2","labels":{"aws.cdk.eks/prune-c86696c9e57d50ecf5a71f4c831342c7a037cd5e71":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c86696c9e57d50ecf5a71f4c831342c7a037cd5e71":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
              ""]}}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c86696c9e57d50ecf5a71f4c831342c7a037cd5e71",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"external-dns.alpha.kubernetes.io/hostname":"nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal","external-dns.alpha.kubernetes.io/ttl":"60"},"labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":"","app":"nifi"},"name":"nifi-svc","namespace":"nifi-test1"},"spec":{"clusterIP":"None","ports":[{"name":"nifi-ui","port":8443}],"selector":{"app":"nifi"}}},{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              ""},"name":"external-secret-store","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"SecretStore","metadata":{"name":"external-secret-store","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"spec":{"provider":{"aws":{"auth":{"jwt":{"serviceAccountRef":{"name":"external-secret-store"}}},"region":"",
              {
                "Ref": "AWS::Region",
              },
              "","service":"SecretsManager"}}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"ExternalSecret","metadata":{"name":"nifi-external-secret","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"spec":{"data":[{"remoteRef":{"key":"",
              {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        1,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        2,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        3,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        4,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        5,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        7,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        8,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        9,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        10,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        11,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        12,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                ],
              },
              ""},"secretKey":"admin-creds"},{"remoteRef":{"key":"",
              {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        1,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        2,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        3,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        4,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        5,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        7,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        8,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        9,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        10,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        11,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        12,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                ],
              },
              ""},"secretKey":"sensitive-props-key"},{"remoteRef":{"key":"",
              {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        1,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        2,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        3,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        4,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        5,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        7,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        8,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        9,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        10,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        11,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                ],
              },
              ""},"secretKey":"keystore-password"}],"refreshInterval":"1h","secretStoreRef":{"kind":"SecretStore","name":"external-secret-store"},"target":{"creationPolicy":"Owner","name":"nifi-secret"}}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"nifi-init-scripts","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"data":{"nifi_registry_start.sh":"#!/bin/bash\\n\\n# tail -f /dev/null\\n\\nrm -rf $NIFI_HOME/conf/*\\ncp -rL $NIFI_INIT_DIR/conf/* $NIFI_HOME/conf\\n\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_KEYSTORE_PASSWORD/\${NIFI_KEYSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_TRUSTSTORE_PASSWORD/\${NIFI_TRUSTSTORE_PASSWORD}/g\\" {} \\\\;\\n\\nmkdir -p \\"\${NIFI_REGISTRY_HOME}/logs/\\"\\ntouch \\"\${NIFI_REGISTRY_HOME}/logs/nifi-registry-app.log\\"\\n\\n# Continuously provide logs so that 'docker logs' can produce them\\ntail -F \\"\${NIFI_REGISTRY_HOME}/logs/nifi-registry-app.log\\" &\\n\\"\${NIFI_REGISTRY_HOME}/bin/nifi-registry.sh\\" run &\\nnifi_registry_pid=\\"$!\\"\\n\\ntrap \\"echo Received trapped signal, beginning shutdown...;\\" KILL TERM HUP INT EXIT;\\n\\necho NiFi-Registry running with PID \${nifi_registry_pid}.\\nwait \${nifi_registry_pid}","nifi_start.sh":"#!/bin/bash\\n\\n# tail -f /dev/null\\n\\nrm -rf $NIFI_HOME/conf/*\\ncp -rL $NIFI_INIT_DIR/conf/* $NIFI_HOME/conf\\n\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_HOSTNAME/\${HOSTNAME}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_KEYSTORE_PASSWORD/\${NIFI_KEYSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_TRUSTSTORE_PASSWORD/\${NIFI_TRUSTSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_SENSITIVE_PROPS_KEY/\${NIFI_SENSITIVE_PROPS_KEY}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_NIFI_ZOOKEEPER_CONNECT_STRING/\${NIFI_ZOOKEEPER_CONNECT_STRING}/g\\" {} \\\\;\\n\\nif [ -n \\"\${SINGLE_USER_CREDENTIALS_USERNAME}\\" ] && [ -n \\"\${SINGLE_USER_CREDENTIALS_PASSWORD}\\" ]; then\\n    \${NIFI_HOME}/bin/nifi.sh set-single-user-credentials \\"\${SINGLE_USER_CREDENTIALS_USERNAME}\\" \\"\${SINGLE_USER_CREDENTIALS_PASSWORD}\\"\\nfi\\n\\n\${NIFI_TOOLKIT_HOME}/bin/cli.sh session set nifi.props \\"\${NIFI_HOME}/conf/nifi-cli.config\\"\\n\\n# Continuously provide logs so that 'docker logs' can produce them\\n\\"\${NIFI_HOME}/bin/nifi.sh\\" run &\\nnifi_pid=\\"$!\\"\\ntail -F --pid=\${nifi_pid} \\"\${NIFI_HOME}/logs/nifi-app.log\\" &\\n\\ntrap 'echo Received trapped signal, beginning shutdown...;./bin/nifi.sh stop;exit 0;' TERM HUP INT;\\ntrap \\":\\" EXIT\\n\\necho NiFi running with PID \${nifi_pid}.\\nwait \${nifi_pid}"}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"nifi-config","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"data":{"authorizers.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<authorizers>\\n  <userGroupProvider>\\n    <identifier>file-user-group-provider</identifier>\\n    <class>org.apache.nifi.authorization.FileUserGroupProvider</class>\\n    <property name=\\"Users File\\">/opt/nifi/data/users.xml</property>\\n    <property name=\\"Legacy Authorized Users File\\"></property>\\n    <property name=\\"Initial User Identity 1\\">CN=cluster-manager.nifi-test1</property>\\n    <property name=\\"Initial User Identity nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Initial User Identity nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n  </userGroupProvider>\\n  <accessPolicyProvider>\\n    <identifier>file-access-policy-provider</identifier>\\n    <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>\\n    <property name=\\"User Group Provider\\">file-user-group-provider</property>\\n    <property name=\\"Authorizations File\\">/opt/nifi/data/authorizations.xml</property>\\n    <property name=\\"Initial Admin Identity\\">CN=cluster-manager.nifi-test1</property>\\n    <property name=\\"Legacy Authorized Users File\\"></property>\\n    <property name=\\"Node Identity 1\\"></property>\\n    <property name=\\"Node Group\\"></property>\\n    <property name=\\"Node Identity nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Node Identity nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n  </accessPolicyProvider>\\n  <authorizer>\\n    <identifier>managed-authorizer</identifier>\\n    <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>\\n    <property name=\\"Access Policy Provider\\">file-access-policy-provider</property>\\n  </authorizer>\\n  <authorizer>\\n    <identifier>single-user-authorizer</identifier>\\n    <class>org.apache.nifi.authorization.single.user.SingleUserAuthorizer</class>\\n  </authorizer>\\n</authorizers>\\n","bootstrap.conf":"#\\n# Licensed to the Apache Software Foundation (ASF) under one or more\\n# contributor license agreements.  See the NOTICE file distributed with\\n# this work for additional information regarding copyright ownership.\\n# The ASF licenses this file to You under the Apache License, Version 2.0\\n# (the \\"License\\"); you may not use this file except in compliance with\\n# the License.  You may obtain a copy of the License at\\n#\\n#   http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing, software\\n# distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n# See the License for the specific language governing permissions and\\n# limitations under the License.\\n#\\n\\n# Java command to use when running NiFi\\njava=java\\n\\n# Username to use when running NiFi. This value will be ignored on Windows.\\nrun.as=\\n\\n# Preserve shell environment while runnning as \\"run.as\\" user\\npreserve.environment=false\\n\\n# Configure where NiFi's lib and conf directories live\\nlib.dir=./lib\\nconf.dir=./conf\\n\\n# How long to wait after telling NiFi to shutdown before explicitly killing the Process\\ngraceful.shutdown.seconds=20\\n\\n# Disable JSR 199 so that we can use JSP's without running a JDK\\njava.arg.1=-Dorg.apache.jasper.compiler.disablejsr199=true\\n\\n# JVM memory settings\\njava.arg.2=-Xms512m\\njava.arg.3=-Xmx512m\\n\\n# Enable Remote Debugging\\n# java.arg.debug=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000\\n\\njava.arg.4=-Djava.net.preferIPv4Stack=true\\n\\n# allowRestrictedHeaders is required for Cluster/Node communications to work properly\\njava.arg.5=-Dsun.net.http.allowRestrictedHeaders=true\\njava.arg.6=-Djava.protocol.handler.pkgs=sun.net.www.protocol\\n\\n# The G1GC is known to cause some problems in Java 8 and earlier, but the issues were addressed in Java 9. If using Java 8 or earlier,\\n# it is recommended that G1GC not be used, especially in conjunction with the Write Ahead Provenance Repository. However, if using a newer\\n# version of Java, it can result in better performance without significant \\"stop-the-world\\" delays.\\n#java.arg.13=-XX:+UseG1GC\\n\\n#Set headless mode by default\\njava.arg.14=-Djava.awt.headless=true\\n\\n# Root key in hexadecimal format for encrypted sensitive configuration values\\nnifi.bootstrap.sensitive.key=\\n\\n# Sensitive Property Provider configuration\\n\\n# HashiCorp Vault Sensitive Property Providers\\n#nifi.bootstrap.protection.hashicorp.vault.conf=./conf/bootstrap-hashicorp-vault.conf\\n\\n# AWS Sensitive Property Providers\\n#nifi.bootstrap.protection.aws.conf=./conf/bootstrap-aws.conf\\n\\n# Azure Key Vault Sensitive Property Providers\\n#nifi.bootstrap.protection.azure.keyvault.conf=./conf/bootstrap-azure.conf\\n\\n# GCP KMS Sensitive Property Providers\\n#nifi.bootstrap.protection.gcp.kms.conf=./conf/bootstrap-gcp.conf\\n\\n# Sets the provider of SecureRandom to /dev/urandom to prevent blocking on VMs\\njava.arg.15=-Djava.security.egd=file:/dev/urandom\\n\\n# Requires JAAS to use only the provided JAAS configuration to authenticate a Subject, without using any \\"fallback\\" methods (such as prompting for username/password)\\n# Please see https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/single-signon.html, section \\"EXCEPTIONS TO THE MODEL\\"\\njava.arg.16=-Djavax.security.auth.useSubjectCredsOnly=true\\n\\n# Zookeeper 3.5 now includes an Admin Server that starts on port 8080, since NiFi is already using that port disable by default.\\n# Please see https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_adminserver_config for configuration options.\\njava.arg.17=-Dzookeeper.admin.enableServer=false\\n\\n# The following options configure a Java Agent to handle native library loading.\\n# It is needed when a custom jar (eg. JDBC driver) has been configured on a component in the flow and this custom jar depends on a native library\\n# and tries to load it by its absolute path (java.lang.System.load(String filename) method call).\\n# Use this Java Agent only if you get \\"Native Library ... already loaded in another classloader\\" errors otherwise!\\n#java.arg.18=-javaagent:./lib/aspectj/aspectjweaver-1.9.6.jar\\n#java.arg.19=-Daj.weaving.loadersToSkip=sun.misc.Launcher$AppClassLoader,jdk.internal.loader.ClassLoaders$AppClassLoader,org.eclipse.jetty.webapp.WebAppClassLoader,\\\\\\n#            org.apache.jasper.servlet.JasperLoader,org.jvnet.hk2.internal.DelegatingClassLoader,org.apache.nifi.nar.NarClassLoader\\n# End of Java Agent config for native library loading.\\n\\n###\\n# Notification Services for notifying interested parties when NiFi is stopped, started, dies\\n###\\n\\n# XML File that contains the definitions of the notification services\\nnotification.services.file=./conf/bootstrap-notification-services.xml\\n\\n# In the case that we are unable to send a notification for an event, how many times should we retry?\\nnotification.max.attempts=5\\n\\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is started?\\n#nifi.start.notification.services=email-notification\\n\\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is stopped?\\n#nifi.stop.notification.services=email-notification\\n\\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi dies?\\n#nifi.dead.notification.services=email-notification\\n\\n# The first curator connection issue is logged as ERROR, for example when NiFi cannot connect to one of the Zookeeper nodes.\\n# Additional connection issues are logged as DEBUG until the connection is restored.\\njava.arg.curator.supress.excessive.logs=-Dcurator-log-only-first-connection-issue-as-error-level=true\\n\\n# Port used to listen for communications from NiFi. If this property is missing, empty, or 0, a random ephemeral port is used.\\nnifi.bootstrap.listen.port=0\\n","logback.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n-->\\n\\n<configuration scan=\\"true\\" scanPeriod=\\"30 seconds\\">\\n    <shutdownHook class=\\"ch.qos.logback.core.hook.DefaultShutdownHook\\" />\\n\\n    <contextListener class=\\"ch.qos.logback.classic.jul.LevelChangePropagator\\">\\n        <resetJUL>true</resetJUL>\\n    </contextListener>\\n\\n    <appender name=\\"APP_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-app.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'app_%d.log'.\\n              For hourly rollover, use 'app_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\\n                \${org.apache.nifi.bootstrap.config.log.dir}/nifi-app_%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>\\n            <maxFileSize>100MB</maxFileSize>\\n            <!-- keep 30 log files worth of history -->\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <immediateFlush>true</immediateFlush>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"SSL_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-ssl.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'app_%d.log'.\\n              For hourly rollover, use 'app_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\\n                \${org.apache.nifi.bootstrap.config.log.dir}/nifi-ssl_%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>\\n            <maxFileSize>100MB</maxFileSize>\\n            <!-- keep 30 log files worth of history -->\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <immediateFlush>true</immediateFlush>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"USER_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-user.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'user_%d.log'.\\n              For hourly rollover, use 'user_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-user_%d.log</fileNamePattern>\\n            <!-- keep 30 log files worth of history -->\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"REQUEST_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-request.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-request_%d.log</fileNamePattern>\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"BOOTSTRAP_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-bootstrap.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'bootstrap_%d.log'.\\n              For hourly rollover, use 'bootstrap_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-bootstrap_%d.log</fileNamePattern>\\n            <!-- keep 5 log files worth of history -->\\n            <maxHistory>5</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"DEPRECATION_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-deprecation.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\">\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-deprecation_%d.%i.log</fileNamePattern>\\n            <maxFileSize>10MB</maxFileSize>\\n            <maxHistory>10</maxHistory>\\n            <totalSizeCap>100MB</totalSizeCap>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"CONSOLE\\" class=\\"ch.qos.logback.core.ConsoleAppender\\">\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <!-- valid logging levels: TRACE, DEBUG, INFO, WARN, ERROR -->\\n\\n    <!-- Deprecation Log -->\\n    <logger name=\\"deprecation\\" level=\\"WARN\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"DEPRECATION_FILE\\" />\\n    </logger>\\n\\n    <logger name=\\"org.apache.nifi\\" level=\\"INFO\\" />\\n    <logger name=\\"org.apache.nifi.processors\\" level=\\"WARN\\" />\\n    <logger name=\\"org.apache.nifi.processors.standard.LogAttribute\\" level=\\"INFO\\" />\\n    <logger name=\\"org.apache.nifi.processors.standard.LogMessage\\" level=\\"INFO\\" />\\n    <logger name=\\"org.apache.nifi.controller.repository.StandardProcessSession\\" level=\\"WARN\\" />\\n\\n\\n    <logger name=\\"org.apache.zookeeper.ClientCnxn\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.NIOServerCnxn\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.NIOServerCnxnFactory\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.NettyServerCnxnFactory\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.quorum\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.ZooKeeper\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.PrepRequestProcessor\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.nifi.controller.reporting.LogComponentStatuses\\" level=\\"ERROR\\" />\\n\\n    <logger name=\\"org.apache.calcite.runtime.CalciteException\\" level=\\"OFF\\" />\\n\\n    <logger name=\\"org.apache.curator.framework.recipes.leader.LeaderSelector\\" level=\\"OFF\\" />\\n    <logger name=\\"org.apache.curator.ConnectionState\\" level=\\"OFF\\" />\\n\\n    <!-- Logger for managing logging statements for nifi clusters. -->\\n    <logger name=\\"org.apache.nifi.cluster\\" level=\\"INFO\\" />\\n\\n    <!-- Logger for logging HTTP requests received by the web server. -->\\n    <logger name=\\"org.apache.nifi.server.JettyServer\\" level=\\"INFO\\" />\\n\\n    <!-- Logger for managing logging statements for jetty -->\\n    <logger name=\\"org.eclipse.jetty\\" level=\\"INFO\\" />\\n\\n    <!-- Suppress non-error messages due to excessive logging by class or library -->\\n    <logger name=\\"org.springframework\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.springframework.security\\" level=\\"INFO\\" />\\n\\n    <!-- Suppress non-error messages due to known warning about redundant path annotation (NIFI-574) -->\\n    <logger name=\\"org.glassfish.jersey.internal.Errors\\" level=\\"ERROR\\" />\\n\\n    <!-- Suppress non-error messages due to Jetty AnnotationParser emitting a large amount of WARNS.\\n    Issue described in NIFI-5479. -->\\n    <logger name=\\"org.eclipse.jetty.annotations.AnnotationParser\\" level=\\"ERROR\\" />\\n\\n    <!-- Suppress non-error messages from SSHJ which was emitting large amounts of INFO logs by\\n    default -->\\n    <logger name=\\"net.schmizz.sshj\\" level=\\"WARN\\" />\\n    <logger name=\\"com.hierynomus.sshj\\" level=\\"WARN\\" />\\n\\n    <!-- Suppress non-error messages from SMBJ which was emitting large amounts of INFO logs by\\n    default -->\\n    <logger name=\\"com.hierynomus.smbj\\" level=\\"WARN\\" />\\n\\n    <!-- Suppress non-error messages from AWS KCL which was emitting large amounts of INFO logs by\\n    default -->\\n    <logger name=\\"com.amazonaws.services.kinesis\\" level=\\"WARN\\" />\\n\\n    <!-- Suppress non-error messages from Apache Atlas which was emitting large amounts of INFO logs\\n    by default -->\\n    <logger name=\\"org.apache.atlas\\" level=\\"WARN\\" />\\n\\n    <!-- These log messages would normally go to the USER_FILE log, but they belong in the APP_FILE -->\\n    <logger name=\\"org.apache.nifi.web.security.requests\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"APP_FILE\\" />\\n    </logger>\\n\\n    <!--\\n        Logger for capturing user events. We do not want to propagate these\\n        log events to the root logger. These messages are only sent to the\\n        user-log appender.\\n    -->\\n    <logger name=\\"org.apache.nifi.web.security\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.web.api.config\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.authorization\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.cluster.authorization\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.web.api.AccessResource\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.opensaml\\" level=\\"WARN\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n\\n    <!-- Web Server Request Log -->\\n    <logger name=\\"org.apache.nifi.web.server.RequestLog\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"REQUEST_FILE\\" />\\n    </logger>\\n\\n    <!--\\n        Logger for capturing Bootstrap logs and NiFi's standard error and standard out.\\n    -->\\n    <logger name=\\"org.apache.nifi.bootstrap\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.bootstrap.Command\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"CONSOLE\\" />\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!-- Everything written to NiFi's Standard Out will be logged with the logger\\n    org.apache.nifi.StdOut at INFO level -->\\n    <logger name=\\"org.apache.nifi.StdOut\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!-- Everything written to NiFi's Standard Error will be logged with the logger\\n    org.apache.nifi.StdErr at ERROR level -->\\n    <logger name=\\"org.apache.nifi.StdErr\\" level=\\"ERROR\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!--DEBUG\\n    SSL Cert Reloading-->\\n    <logger name=\\"org.apache.nifi.web.server.util.StoreScanner\\" level=\\"DEBUG\\">\\n        <appender-ref ref=\\"SSL_FILE\\" />\\n    </logger>\\n\\n    <logger name=\\"org.eclipse.jetty.util.ssl.SslContextFactory\\" level=\\"DEBUG\\">\\n        <appender-ref ref=\\"SSL_FILE\\" />\\n    </logger>\\n\\n    <logger name=\\"org.apache.nifi.security.util.SslContextFactory\\" level=\\"DEBUG\\">\\n        <appender-ref ref=\\"SSL_FILE\\" />\\n    </logger>\\n\\n    <root level=\\"INFO\\">\\n        <appender-ref ref=\\"APP_FILE\\" />\\n    </root>\\n\\n</configuration>","login-identity-providers.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"no\\"?><!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n--><!--\\n    This file lists the login identity providers to use when running securely. In order\\n    to use a specific provider it must be configured here and it's identifier\\n    must be specified in the nifi.properties file.\\n--><loginIdentityProviders>\\n    <!--\\n        Single User Login Identity Provider supporting automated generation of Username and Password\\n\\n        The provider will write the following log messages when 'Username' and 'Password' are empty:\\n\\n        Generated Username [USERNAME]\\n        Generated Password [PASSWORD]\\n\\n        The 'Username' will be a random UUID and the 'Password' will be stored using bcrypt hashing\\n    -->\\n    <provider>\\n        <identifier>single-user-provider</identifier>\\n        <class>org.apache.nifi.authentication.single.user.SingleUserLoginIdentityProvider</class>\\n        <property name=\\"Username\\"></property>\\n        <property name=\\"Password\\"></property>\\n    </provider>\\n    <!--\\n        Identity Provider for users logging in with username/password against an LDAP server.\\n        \\n        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible\\n            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.\\n        \\n        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.\\n        'Manager Password' - The password of the manager that is used to bind to the LDAP server to\\n            search for users.\\n            \\n        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.\\n        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP\\n            using LDAPS or START_TLS.\\n        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using\\n            LDAPS or START_TLS such as PKCS12.\\n        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.\\n        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to\\n            LDAP using LDAPS or START_TLS.\\n        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using\\n            LDAPS or START_TLS such as PKCS12.\\n        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.\\n            Possible values are REQUIRED, WANT, NONE.\\n        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,\\n            TLSv1.1, TLSv1.2, etc).\\n        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully \\n            before the target context is closed. Defaults to false.\\n            \\n        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.\\n        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).\\n        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).\\n       \\n        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).\\n        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).\\n        'User Search Filter' - Filter for searching for users against the 'User Search Base'.\\n            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.\\n\\n        'Identity Strategy' - Strategy to identify users. Possible values are USE_DN and USE_USERNAME.\\n            The default functionality if this property is missing is USE_DN in order to retain\\n            backward compatibility. USE_DN will use the full DN of the user entry if possible.\\n            USE_USERNAME will use the username the user logged in with.\\n        'Authentication Expiration' - The duration of how long the user authentication is valid\\n            for. If the user never logs out, they will be required to log back in following\\n            this duration.\\n    -->\\n    <!-- To enable the ldap-provider remove 2 lines. This is 1 of 2. \\n    <provider>\\n        <identifier>ldap-provider</identifier>\\n        <class>org.apache.nifi.ldap.LdapProvider</class>\\n        <property name=\\"Authentication Strategy\\">START_TLS</property>\\n\\n        <property name=\\"Manager DN\\"></property>\\n        <property name=\\"Manager Password\\"></property>\\n\\n        <property name=\\"TLS - Keystore\\"></property>\\n        <property name=\\"TLS - Keystore Password\\"></property>\\n        <property name=\\"TLS - Keystore Type\\"></property>\\n        <property name=\\"TLS - Truststore\\"></property>\\n        <property name=\\"TLS - Truststore Password\\"></property>\\n        <property name=\\"TLS - Truststore Type\\"></property>\\n        <property name=\\"TLS - Client Auth\\"></property>\\n        <property name=\\"TLS - Protocol\\"></property>\\n        <property name=\\"TLS - Shutdown Gracefully\\"></property>\\n        \\n        <property name=\\"Referral Strategy\\">FOLLOW</property>\\n        <property name=\\"Connect Timeout\\">10 secs</property>\\n        <property name=\\"Read Timeout\\">10 secs</property>\\n\\n        <property name=\\"Url\\"></property>\\n        <property name=\\"User Search Base\\"></property>\\n        <property name=\\"User Search Filter\\"></property>\\n\\n        <property name=\\"Identity Strategy\\">USE_DN</property>\\n        <property name=\\"Authentication Expiration\\">12 hours</property>\\n    </provider>\\n    To enable the ldap-provider remove 2 lines. This is 2 of 2. -->\\n\\n    <!--\\n        Identity Provider for users logging in with username/password against a Kerberos KDC server.\\n\\n        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).\\n        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.\\n    -->\\n    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.\\n    <provider>\\n        <identifier>kerberos-provider</identifier>\\n        <class>org.apache.nifi.kerberos.KerberosProvider</class>\\n        <property name=\\"Default Realm\\">NIFI.APACHE.ORG</property>\\n        <property name=\\"Authentication Expiration\\">12 hours</property>\\n    </provider>\\n    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->\\n</loginIdentityProviders>","nifi-cli.config":"baseUrl=https://INIT_HOSTNAME.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal:8443\\nkeystore=/opt/nifi/ssl/manager/keystore.jks\\nkeystoreType=JKS\\nkeystorePasswd=INIT_KEYSTORE_PASSWORD\\nkeyPasswd=INIT_KEYSTORE_PASSWORD\\ntruststore=/opt/nifi/ssl/manager/truststore.jks\\ntruststoreType=JKS\\ntruststorePasswd=INIT_KEYSTORE_PASSWORD","nifi.properties":"nifi.flow.configuration.file=/opt/nifi/data/flow.xml.gz\\nnifi.flow.configuration.json.file=/opt/nifi/data/flow.json.gz\\nnifi.flow.configuration.archive.enabled=true\\nnifi.flow.configuration.archive.dir=/opt/nifi/data/flow_archive/\\nnifi.flow.configuration.archive.max.time=30 days\\nnifi.flow.configuration.archive.max.storage=5 GB\\nnifi.flow.configuration.archive.max.count=\\nnifi.flowcontroller.autoResumeState=true\\nnifi.flowcontroller.graceful.shutdown.period=10 sec\\nnifi.flowservice.writedelay.interval=500 ms\\nnifi.administrative.yield.duration=30 sec\\nnifi.bored.yield.duration=10 millis\\nnifi.queue.backpressure.count=10000\\nnifi.queue.backpressure.size=1 GB\\nnifi.authorizer.configuration.file=./conf/authorizers.xml\\nnifi.login.identity.provider.configuration.file=./conf/login-identity-providers.xml\\nnifi.templates.directory=/opt/nifi/data/templates\\nnifi.ui.banner.text=\\nnifi.ui.autorefresh.interval=30 sec\\nnifi.nar.library.directory=./lib\\nnifi.nar.library.autoload.directory=./extensions\\nnifi.nar.working.directory=./work/nar/\\nnifi.documentation.working.directory=./work/docs/components\\nnifi.nar.unpack.uber.jar=false\\nnifi.state.management.configuration.file=./conf/state-management.xml\\nnifi.state.management.provider.local=local-provider\\nnifi.state.management.provider.cluster=zk-provider\\nnifi.state.management.embedded.zookeeper.start=false\\nnifi.state.management.embedded.zookeeper.properties=./conf/zookeeper.properties\\nnifi.database.directory=/opt/nifi/data/database_repository\\nnifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE\\nnifi.repository.encryption.protocol.version=\\nnifi.repository.encryption.key.id=\\nnifi.repository.encryption.key.provider=\\nnifi.repository.encryption.key.provider.keystore.location=\\nnifi.repository.encryption.key.provider.keystore.password=\\nnifi.flowfile.repository.implementation=org.apache.nifi.controller.repository.WriteAheadFlowFileRepository\\nnifi.flowfile.repository.wal.implementation=org.apache.nifi.wali.SequentialAccessWriteAheadLog\\nnifi.flowfile.repository.directory=/opt/nifi/data/flowfile_repository\\nnifi.flowfile.repository.checkpoint.interval=20 secs\\nnifi.flowfile.repository.always.sync=false\\nnifi.flowfile.repository.retain.orphaned.flowfiles=true\\nnifi.swap.manager.implementation=org.apache.nifi.controller.FileSystemSwapManager\\nnifi.queue.swap.threshold=20000\\nnifi.content.repository.implementation=org.apache.nifi.controller.repository.FileSystemRepository\\nnifi.content.claim.max.appendable.size=50 KB\\nnifi.content.repository.directory.default=/opt/nifi/data/content_repository\\nnifi.content.repository.archive.max.retention.period=7 days\\nnifi.content.repository.archive.max.usage.percentage=50%\\nnifi.content.repository.archive.enabled=true\\nnifi.content.repository.always.sync=false\\nnifi.content.viewer.url=../nifi-content-viewer/\\nnifi.provenance.repository.implementation=org.apache.nifi.provenance.WriteAheadProvenanceRepository\\nnifi.provenance.repository.directory.default=/opt/nifi/data/provenance_repository\\nnifi.provenance.repository.max.storage.time=30 days\\nnifi.provenance.repository.max.storage.size=10 GB\\nnifi.provenance.repository.rollover.time=10 mins\\nnifi.provenance.repository.rollover.size=100 MB\\nnifi.provenance.repository.query.threads=2\\nnifi.provenance.repository.index.threads=2\\nnifi.provenance.repository.compress.on.rollover=true\\nnifi.provenance.repository.always.sync=false\\nnifi.provenance.repository.indexed.fields=EventType, FlowFileUUID, Filename, ProcessorID, Relationship\\nnifi.provenance.repository.indexed.attributes=\\nnifi.provenance.repository.index.shard.size=500 MB\\nnifi.provenance.repository.max.attribute.length=65536\\nnifi.provenance.repository.concurrent.merge.threads=2\\nnifi.provenance.repository.buffer.size=100000\\nnifi.components.status.repository.implementation=org.apache.nifi.controller.status.history.VolatileComponentStatusRepository\\nnifi.components.status.repository.buffer.size=1440\\nnifi.components.status.snapshot.frequency=1 min\\nnifi.status.repository.questdb.persist.node.days=14\\nnifi.status.repository.questdb.persist.component.days=3\\nnifi.status.repository.questdb.persist.location=/opt/nifi/data/status_repository\\nnifi.remote.input.host=INIT_HOSTNAME.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\nnifi.remote.input.secure=true\\nnifi.remote.input.socket.port=10000\\nnifi.remote.input.http.enabled=true\\nnifi.remote.input.http.transaction.ttl=30 sec\\nnifi.remote.contents.cache.expiration=30 secs\\nnifi.web.http.host=\\nnifi.web.http.port=\\nnifi.web.http.network.interface.default=\\nnifi.web.https.host=INIT_HOSTNAME.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\nnifi.web.https.port=8443\\nnifi.web.https.network.interface.default=\\nnifi.web.https.application.protocols=http/1.1\\nnifi.web.jetty.working.directory=./work/jetty\\nnifi.web.jetty.threads=200\\nnifi.web.max.header.size=16 KB\\nnifi.web.proxy.context.path=\\nnifi.web.proxy.host=\\nnifi.web.max.content.size=\\nnifi.web.max.requests.per.second=30000\\nnifi.web.max.access.token.requests.per.second=25\\nnifi.web.request.timeout=60 secs\\nnifi.web.request.ip.whitelist=\\nnifi.web.should.send.server.version=true\\nnifi.web.request.log.format=%{client}a - %u %t \\"%r\\" %s %O \\"%{Referer}i\\" \\"%{User-Agent}i\\"\\nnifi.web.https.ciphersuites.include=\\nnifi.web.https.ciphersuites.exclude=\\nnifi.sensitive.props.key=INIT_SENSITIVE_PROPS_KEY\\nnifi.sensitive.props.key.protected=\\nnifi.sensitive.props.algorithm=NIFI_PBKDF2_AES_GCM_256\\nnifi.sensitive.props.additional.keys=\\nnifi.security.autoreload.enabled=true\\nnifi.security.autoreload.interval=10 secs\\nnifi.security.keystore=/opt/nifi/data/ssl/keystore/keystore.jks\\nnifi.security.keystoreType=JKS\\nnifi.security.keystorePasswd=INIT_KEYSTORE_PASSWORD\\nnifi.security.keyPasswd=INIT_KEYSTORE_PASSWORD\\nnifi.security.truststore=/opt/nifi/data/ssl/truststore/truststore.jks\\nnifi.security.truststoreType=JKS\\nnifi.security.truststorePasswd=INIT_TRUSTSTORE_PASSWORD\\nnifi.security.user.authorizer=managed-authorizer\\nnifi.security.allow.anonymous.authentication=false\\nnifi.security.user.jws.key.rotation.period=PT1H\\nnifi.security.ocsp.responder.url=\\nnifi.security.ocsp.responder.certificate=\\nnifi.security.user.oidc.discovery.url=\\nnifi.security.user.oidc.connect.timeout=5 secs\\nnifi.security.user.oidc.read.timeout=5 secs\\nnifi.security.user.oidc.client.id=\\nnifi.security.user.oidc.client.secret=\\nnifi.security.user.oidc.preferred.jwsalgorithm=\\nnifi.security.user.oidc.additional.scopes=\\nnifi.security.user.oidc.claim.identifying.user=\\nnifi.security.user.oidc.fallback.claims.identifying.user=\\nnifi.security.user.oidc.claim.groups=groups\\nnifi.security.user.oidc.truststore.strategy=JDK\\nnifi.security.user.oidc.token.refresh.window=60 secs\\nnifi.security.user.knox.url=\\nnifi.security.user.knox.publicKey=\\nnifi.security.user.knox.cookieName=hadoop-jwt\\nnifi.security.user.knox.audiences=\\nnifi.security.user.saml.idp.metadata.url=https://portal.sso.ca-central-1.amazonaws.com/saml/metadata/abc-123\\nnifi.security.user.saml.sp.entity.id=org:apache:nifi:saml:sp-test1\\nnifi.security.user.saml.identity.attribute.name=\\nnifi.security.user.saml.group.attribute.name=\\nnifi.security.user.saml.request.signing.enabled=false\\nnifi.security.user.saml.want.assertions.signed=true\\nnifi.security.user.saml.signature.algorithm=http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\\nnifi.security.user.saml.authentication.expiration=12 hours\\nnifi.security.user.saml.single.logout.enabled=false\\nnifi.security.user.saml.http.client.truststore.strategy=JDK\\nnifi.security.user.saml.http.client.connect.timeout=30 secs\\nnifi.security.user.saml.http.client.read.timeout=30 secs\\nnifi.listener.bootstrap.port=0\\nnifi.cluster.protocol.heartbeat.interval=5 sec\\nnifi.cluster.protocol.heartbeat.missable.max=8\\nnifi.cluster.protocol.is.secure=true\\nnifi.cluster.is.node=true\\nnifi.cluster.node.address=INIT_HOSTNAME.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\nnifi.cluster.node.protocol.port=14443\\nnifi.cluster.node.protocol.max.threads=50\\nnifi.cluster.node.event.history.size=25\\nnifi.cluster.node.connection.timeout=5 sec\\nnifi.cluster.node.read.timeout=5 sec\\nnifi.cluster.node.max.concurrent.requests=100\\nnifi.cluster.firewall.file=\\nnifi.cluster.flow.election.max.wait.time=150 secs\\nnifi.cluster.flow.election.max.candidates=\\nnifi.cluster.load.balance.host=\\nnifi.cluster.load.balance.port=6342\\nnifi.cluster.load.balance.connections.per.node=1\\nnifi.cluster.load.balance.max.thread.count=8\\nnifi.cluster.load.balance.comms.timeout=30 sec\\nnifi.zookeeper.connect.string=zookeeper-0.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-1.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-2.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181\\nnifi.zookeeper.connect.timeout=10 secs\\nnifi.zookeeper.session.timeout=10 secs\\nnifi.zookeeper.root.node=/nifi/test1\\nnifi.zookeeper.client.secure=true\\nnifi.zookeeper.security.keystore=\\nnifi.zookeeper.security.keystoreType=\\nnifi.zookeeper.security.keystorePasswd=\\nnifi.zookeeper.security.truststore=\\nnifi.zookeeper.security.truststoreType=\\nnifi.zookeeper.security.truststorePasswd=\\nnifi.zookeeper.jute.maxbuffer=\\nnifi.zookeeper.auth.type=\\nnifi.zookeeper.kerberos.removeHostFromPrincipal=\\nnifi.zookeeper.kerberos.removeRealmFromPrincipal=\\nnifi.kerberos.krb5.file=\\nnifi.kerberos.service.principal=\\nnifi.kerberos.service.keytab.location=\\nnifi.kerberos.spnego.principal=\\nnifi.kerberos.spnego.keytab.location=\\nnifi.kerberos.spnego.authentication.expiration=12 hours\\nnifi.variable.registry.properties=\\nnifi.analytics.predict.enabled=false\\nnifi.analytics.predict.interval=3 mins\\nnifi.analytics.query.interval=5 mins\\nnifi.analytics.connection.model.implementation=org.apache.nifi.controller.status.analytics.models.OrdinaryLeastSquares\\nnifi.analytics.connection.model.score.name=rSquared\\nnifi.analytics.connection.model.score.threshold=.90\\nnifi.monitor.long.running.task.schedule=\\nnifi.monitor.long.running.task.threshold=\\nnifi.diagnostics.on.shutdown.enabled=false\\nnifi.diagnostics.on.shutdown.verbose=false\\nnifi.diagnostics.on.shutdown.directory=/opt/nifi/data/diagnostics\\nnifi.diagnostics.on.shutdown.max.filecount=10\\nnifi.diagnostics.on.shutdown.max.directory.size=10 MB\\nnifi.performance.tracking.percentage=0\\nnifi.cluster.leader.election.implementation=CuratorLeaderElectionManager\\nnifi.security.user.login.identity.provider=","nifi_manager.json":"{\\n  \\"registry_clients\\": {\\n    \\"example-extra-client\\": {\\n      \\"url\\": \\"https://some-external-registry-url:8443\\"\\n    },\\n    \\"test-org-test-env-test-domain-test-nificluster-main-registry\\": {\\n      \\"url\\": \\"https://nifi-registry.test-org-test-env-test-domain-test-nificluster-main.internal:8443\\"\\n    }\\n  },\\n  \\"identities\\": [\\n    \\"test-identity-1\\",\\n    \\"test-identity-2\\",\\n    \\"test-identity-3\\",\\n    \\"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"some-admin-identity\\",\\n    \\"some-other-admin-identity\\",\\n    \\"CN=test-external-node1\\",\\n    \\"CN=test-external-node2\\",\\n    \\"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n  ],\\n  \\"groups\\": {\\n    \\"test_group\\": [\\n      \\"test-identity-1\\",\\n      \\"test-identity-2\\"\\n    ],\\n    \\"cluster_nodes\\": [\\n      \\"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n    ],\\n    \\"admins\\": [\\n      \\"some-admin-identity\\",\\n      \\"some-other-admin-identity\\"\\n    ],\\n    \\"external_nodes\\": [\\n      \\"CN=test-external-node1\\",\\n      \\"CN=test-external-node2\\",\\n      \\"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n    ]\\n  },\\n  \\"policies\\": [\\n    {\\n      \\"resource\\": \\"/site-to-site\\",\\n      \\"action\\": \\"READ\\"\\n    },\\n    {\\n      \\"resource\\": \\"/process-groups/ROOT_ID\\",\\n      \\"action\\": \\"READ\\"\\n    },\\n    {\\n      \\"resource\\": \\"/process-groups/ROOT_ID\\",\\n      \\"action\\": \\"WRITE\\"\\n    }\\n  ],\\n  \\"authorizations\\": [\\n    {\\n      \\"policyResourcePattern\\": \\"/data/ROOT_ID\\",\\n      \\"actions\\": [\\n        \\"READ\\"\\n      ],\\n      \\"groups\\": [\\n        \\"test_group\\"\\n      ],\\n      \\"identities\\": [\\n        \\"test-identity-1\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/data/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"test_group\\"\\n      ],\\n      \\"identities\\": [\\n        \\"test-identity-1\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/data/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"cluster_nodes\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"admins\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/site-to-site\\",\\n      \\"actions\\": [\\n        \\"READ\\"\\n      ],\\n      \\"groups\\": [\\n        \\"external_nodes\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/data-transfer/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"external_nodes\\"\\n      ]\\n    }\\n  ]\\n}","state-management.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n-->\\n<!--\\n  This file provides a mechanism for defining and configuring the State Providers\\n  that should be used for storing state locally and across a NiFi cluster. In order\\n  to use a specific provider, it must be configured here and its identifier\\n  must be specified in the nifi.properties file.\\n-->\\n<stateManagement>\\n    <!--\\n        State Provider that stores state locally in a configurable directory. This Provider requires the\\n    following properties:\\n        \\n        Directory - the directory to store components' state in. If the directory being used is a\\n    sub-directory of the NiFi installation, it\\n                    is important that the directory be copied over to the new version when upgrading NiFi.\\n        Always Sync - If set to true, any change to the repository will be synchronized to the disk,\\n    meaning that NiFi will ask the operating system not to cache the information. This is very\\n                expensive and can significantly reduce NiFi performance. However, if it is false, there could be\\n    the potential for data loss if either there is a sudden power loss or the\\n                operating system crashes. The default value is false.\\n        Partitions - The number of partitions.\\n        Checkpoint Interval - The amount of time between checkpoints.\\n     -->\\n    <local-provider>\\n        <id>local-provider</id>\\n        <class>org.apache.nifi.controller.state.providers.local.WriteAheadLocalStateProvider</class>\\n        <property name=\\"Directory\\">./state/local</property>\\n        <property name=\\"Always Sync\\">false</property>\\n        <property name=\\"Partitions\\">16</property>\\n        <property name=\\"Checkpoint Interval\\">2 mins</property>\\n    </local-provider>\\n\\n    <!--\\n        State Provider that is used to store state in ZooKeeper. This Provider requires the following\\n    properties:\\n        \\n        Root Node - the root node in ZooKeeper where state should be stored. The default is '/nifi', but it\\n    is advisable to change this to a different value if not using\\n                   the embedded ZooKeeper server and if multiple NiFi instances may all be using the same ZooKeeper\\n    Server.\\n                   \\n        Connect String - A comma-separated list of host:port pairs to connect to ZooKeeper. For example,\\n    myhost.mydomain:2181,host2.mydomain:5555,host3:6666\\n        \\n        Session Timeout - Specifies how long this instance of NiFi is allowed to be disconnected from\\n    ZooKeeper before creating a new ZooKeeper Session. Default value is \\"30 seconds\\"\\n        \\n        Access Control - Specifies which Access Controls will be applied to the ZooKeeper ZNodes that are\\n    created by this State Provider. This value must be set to one of:\\n                            - Open  : ZNodes will be open to any ZooKeeper client.\\n                            - CreatorOnly  : ZNodes will be accessible only by the creator. The creator will have full access to\\n    create children, read, write, delete, and administer the ZNodes.\\n                                             This option is available only if access to ZooKeeper is secured via Kerberos or if a Username and\\n    Password are set.\\n    -->\\n    <cluster-provider>\\n        <id>zk-provider</id>\\n        <class>org.apache.nifi.controller.state.providers.zookeeper.ZooKeeperStateProvider</class>\\n        <property name=\\"Connect String\\">INIT_NIFI_ZOOKEEPER_CONNECT_STRING</property>\\n        <property name=\\"Root Node\\">/nifi</property>\\n        <property name=\\"Session Timeout\\">10 seconds</property>\\n        <property name=\\"Access Control\\">Open</property>\\n    </cluster-provider>\\n\\n    <!--\\n        Cluster State Provider that stores state in Redis. This can be used as an alternative to the\\n    ZooKeeper State Provider.\\n\\n        This provider requires the following properties:\\n\\n            Redis Mode - The type of Redis instance:\\n                            - Standalone\\n                            - Sentinel\\n                            - Cluster (currently not supported for state-management due to use of WATCH command which Redis\\n    does not support in clustered mode)\\n\\n            Connection String - The connection string for Redis.\\n                        - In a standalone instance this value will be of the form hostname:port.\\n                        - In a sentinel instance this value will be the comma-separated list of sentinels, such as\\n    host1:port1,host2:port2,host3:port3.\\n                        - In a clustered instance this value will be the comma-separated list of cluster masters, such as\\n    host1:port,host2:port,host3:port.\\n\\n        This provider has the following optional properties:\\n\\n            Key Prefix - The prefix for each key stored by this state provider. When sharing a single Redis\\n    across multiple NiFi instances, setting a unique\\n                        value for the Key Prefix will make it easier to identify which instances the keys came from\\n    (default nifi/components/).\\n\\n            Database Index - The database index to be used by connections created from this connection pool.\\n                        See the databases property in redis.conf, by default databases 0-15 will be available.\\n\\n            Communication Timeout - The timeout to use when attempting to communicate with Redis.\\n\\n            Cluster Max Redirects - The maximum number of redirects that can be performed when clustered.\\n\\n            Sentinel Master - The name of the sentinel master, require when Mode is set to Sentinel.\\n\\n            Password - The password used to authenticate to the Redis server. See the requirepass property in\\n    redis.conf.\\n\\n            Enable TLS - If true, the Redis connection will be configured to use TLS, using the keystore and\\n    truststore settings configured in\\n                    nifi.properties.  This means that a TLS-enabled Redis connection is only possible if the Apache NiFi\\n    instance is running in secure mode.\\n                    If this property is false, an insecure Redis connection will be used even if the Apache NiFi\\n    instance is secure (default false).\\n\\n            Pool - Max Total - The maximum number of connections that can be allocated by the pool (checked out\\n    to clients, or idle awaiting checkout).\\n                        A negative value indicates that there is no limit.\\n\\n            Pool - Max Idle - The maximum number of idle connections that can be held in the pool, or a\\n    negative value if there is no limit.\\n\\n            Pool - Min Idle - The target for the minimum number of idle connections to maintain in the pool. If\\n    the configured value of Min Idle is\\n                    greater than the configured value for Max Idle, then the value of Max Idle will be used instead.\\n\\n            Pool - Block When Exhausted - Whether or not clients should block and wait when trying to obtain a\\n    connection from the pool when the pool\\n                    has no available connections. Setting this to false means an error will occur immediately when a\\n    client requests a connection and\\n                    none are available.\\n\\n            Pool - Max Wait Time - The amount of time to wait for an available connection when Block When\\n    Exhausted is set to true.\\n\\n            Pool - Min Evictable Idle Time - The minimum amount of time an object may sit idle in the pool\\n    before it is eligible for eviction.\\n\\n            Pool - Time Between Eviction Runs - The amount of time between attempting to evict idle connections\\n    from the pool.\\n\\n            Pool - Num Tests Per Eviction Run - The number of connections to tests per eviction attempt. A\\n    negative value indicates to test all connections.\\n\\n            Pool - Test On Create - Whether or not connections should be tested upon creation (default false).\\n\\n            Pool - Test On Borrow - Whether or not connections should be tested upon borrowing from the pool\\n    (default false).\\n\\n            Pool - Test On Return - Whether or not connections should be tested upon returning to the pool\\n    (default false).\\n\\n            Pool - Test While Idle - Whether or not connections should be tested while idle (default true).\\n\\n        <cluster-provider>\\n            <id>redis-provider</id>\\n            <class>org.apache.nifi.redis.state.RedisStateProvider</class>\\n            <property name=\\"Redis Mode\\">Standalone</property>\\n            <property name=\\"Connection String\\">localhost:6379</property>\\n        </cluster-provider>\\n    -->\\n\\n</stateManagement>"}},{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              ""},"name":"nifi","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":"","app":"nifi"},"name":"nifi-vol-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","namespace":"nifi-test1"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"nifi-data-nifi-0","namespace":"nifi-test1"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "::",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":"","app":"nifi"},"name":"nifi-vol-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","namespace":"nifi-test1"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"nifi-data-nifi-1","namespace":"nifi-test1"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "::",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"name":"nifi","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"spec":{"persistentVolumeClaimRetentionPolicy":{"whenDeleted":"Retain","whenScaled":"Delete"},"podManagementPolicy":"Parallel","replicas":2,"selector":{"matchLabels":{"app":"nifi"}},"serviceName":"nifi-svc","template":{"metadata":{"labels":{"app":"nifi"}},"spec":{"containers":[{"command":["sh","/opt/nifi/scripts/nifi_manager.sh"],"env":[{"name":"NIFI_APP","value":"nifi"},{"name":"MANAGER_CONFIG","value":"/opt/nifi/init/conf/nifi_manager.json"},{"name":"NIFI_INIT_DIR","value":"/opt/nifi/init"},{"name":"NIFI_DATA_DIR","value":"/opt/nifi/data"},{"name":"NIFI_SENSITIVE_PROPS_KEY","valueFrom":{"secretKeyRef":{"key":"sensitive-props-key","name":"nifi-secret","optional":false}}},{"name":"NIFI_SSL_BASE_PATH","value":"/opt/nifi/ssl"},{"name":"NIFI_ZOOKEEPER_CONNECT_STRING","value":"zookeeper-0.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-1.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-2.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181"},{"name":"NIFI_KEYSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}},{"name":"NIFI_TRUSTSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}},{"name":"PYTHONUNBUFFERED","value":"1"},{"name":"NIFI_NODES","value":"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal,CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal"}],"image":"",
              {
                "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:0008f52ad2d4c5b502dcecef172136d1f1d40ebdb528a0a94a0ec5d27ebad8bc",
              },
              "","name":"nifi-manager","resources":{"limits":{"cpu":"250m","memory":"0.5Gi"},"requests":{"cpu":"250m","memory":"0.5Gi"}},"volumeMounts":[{"mountPath":"/opt/nifi/init/conf","name":"nifi-config"},{"mountPath":"/home/nifi/.aws","name":"aws-creds"},{"mountPath":"/.local","name":"pip-local"},{"mountPath":"/opt/nifi/init/scripts","name":"nifi-init-scripts"},{"mountPath":"/opt/nifi/data","name":"nifi-data"},{"mountPath":"/opt/nifi/ssl/manager","name":"manager-ssl","readOnly":true},{"mountPath":"/opt/nifi/ssl/nifi-0","name":"nifi-0-ssl","readOnly":true},{"mountPath":"/opt/nifi/ssl/nifi-1","name":"nifi-1-ssl","readOnly":true}]},{"command":["bash","-c","/opt/nifi/init/scripts/nifi_start.sh"],"env":[{"name":"NIFI_INIT_DIR","value":"/opt/nifi/init"},{"name":"NIFI_DATA_DIR","value":"/opt/nifi/data"},{"name":"NIFI_HOME","value":"/opt/nifi/nifi-current"},{"name":"NIFI_SENSITIVE_PROPS_KEY","valueFrom":{"secretKeyRef":{"key":"sensitive-props-key","name":"nifi-secret","optional":false}}},{"name":"NIFI_SSL_BASE_PATH","value":"/opt/nifi/ssl"},{"name":"NIFI_ZOOKEEPER_CONNECT_STRING","value":"zookeeper-0.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-1.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-2.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181"},{"name":"NIFI_KEYSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}},{"name":"NIFI_TRUSTSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}}],"image":"apache/nifi:1.25.0","name":"nifi","ports":[{"containerPort":8443}],"resources":{"limits":{"cpu":"1","memory":"2Gi"},"requests":{"cpu":"1","memory":"2Gi"}},"volumeMounts":[{"mountPath":"/opt/nifi/init/conf","name":"nifi-config"},{"mountPath":"/opt/nifi/init/scripts","name":"nifi-init-scripts"},{"mountPath":"/opt/nifi/data","name":"nifi-data"},{"mountPath":"/home/nifi/.aws","name":"aws-creds"},{"mountPath":"/opt/nifi/ssl/nifi-0","name":"nifi-0-ssl","readOnly":true},{"mountPath":"/opt/nifi/ssl/nifi-1","name":"nifi-1-ssl","readOnly":true}]}],"dnsConfig":{"searches":["nifi-svc.nifi-test1.svc.cluster.local"]},"securityContext":{"fsGroup":1000,"runAsGroup":1000,"runAsUser":1000},"serviceAccountName":"nifi","shareProcessNamespace":true,"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}],"volumes":[{"configMap":{"defaultMode":493,"name":"nifi-init-scripts"},"name":"nifi-init-scripts"},{"configMap":{"defaultMode":493,"name":"nifi-config"},"name":"nifi-config"},{"emptyDir":{},"name":"aws-creds"},{"emptyDir":{},"name":"pip-local"},{"name":"manager-ssl","secret":{"secretName":"manager-ssl"}},{"name":"nifi-0-ssl","secret":{"secretName":"nifi-0-ssl"}},{"name":"nifi-1-ssl","secret":{"secretName":"nifi-1-ssl"}}]}},"volumeClaimTemplates":[{"metadata":{"name":"nifi-data"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"5Gi"}},"selector":{"matchLabels":{"app":"nifi"}},"storageClassName":"efs-sc"}}]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"manager-cert","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"spec":{"commonName":"cluster-manager.nifi-test1","duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"manager-ssl","usages":["server auth","client auth"]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"nifi-0-cert","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"spec":{"commonName":"nifi-0.nifi-test1","dnsNames":["localhost","nifi-0.nifi-svc.nifi-test1.svc.cluster.local","nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"nifi-0-ssl","usages":["server auth","client auth"]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"nifi-1-cert","namespace":"nifi-test1","labels":{"aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052":""}},"spec":{"commonName":"nifi-1.nifi-test1","dnsNames":["localhost","nifi-1.nifi-svc.nifi-test1.svc.cluster.local","nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"nifi-1-ssl","usages":["server auth","client auth"]}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c8b2c06b95e89a82a9fcd90dc01c30ee5982efe052",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"external-dns.alpha.kubernetes.io/hostname":"nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal","external-dns.alpha.kubernetes.io/ttl":"60"},"labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":"","app":"nifi"},"name":"nifi-svc","namespace":"nifi-test2"},"spec":{"clusterIP":"None","ports":[{"name":"nifi-ui","port":8444}],"selector":{"app":"nifi"}}},{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              ""},"name":"external-secret-store","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"SecretStore","metadata":{"name":"external-secret-store","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"spec":{"provider":{"aws":{"auth":{"jwt":{"serviceAccountRef":{"name":"external-secret-store"}}},"region":"",
              {
                "Ref": "AWS::Region",
              },
              "","service":"SecretsManager"}}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"ExternalSecret","metadata":{"name":"nifi-external-secret","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"spec":{"data":[{"remoteRef":{"key":"",
              {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        1,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        2,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        3,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        4,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        5,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        7,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        8,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        9,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        10,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        11,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        12,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                ],
              },
              ""},"secretKey":"admin-creds"},{"remoteRef":{"key":"",
              {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        1,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        2,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        3,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        4,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        5,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        7,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        8,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        9,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        10,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        11,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        12,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                ],
              },
              ""},"secretKey":"sensitive-props-key"},{"remoteRef":{"key":"",
              {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        1,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        2,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        3,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        4,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        5,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        7,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        8,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        9,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        10,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        11,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                ],
              },
              ""},"secretKey":"keystore-password"}],"refreshInterval":"1h","secretStoreRef":{"kind":"SecretStore","name":"external-secret-store"},"target":{"creationPolicy":"Owner","name":"nifi-secret"}}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"nifi-init-scripts","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"data":{"nifi_registry_start.sh":"#!/bin/bash\\n\\n# tail -f /dev/null\\n\\nrm -rf $NIFI_HOME/conf/*\\ncp -rL $NIFI_INIT_DIR/conf/* $NIFI_HOME/conf\\n\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_KEYSTORE_PASSWORD/\${NIFI_KEYSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_TRUSTSTORE_PASSWORD/\${NIFI_TRUSTSTORE_PASSWORD}/g\\" {} \\\\;\\n\\nmkdir -p \\"\${NIFI_REGISTRY_HOME}/logs/\\"\\ntouch \\"\${NIFI_REGISTRY_HOME}/logs/nifi-registry-app.log\\"\\n\\n# Continuously provide logs so that 'docker logs' can produce them\\ntail -F \\"\${NIFI_REGISTRY_HOME}/logs/nifi-registry-app.log\\" &\\n\\"\${NIFI_REGISTRY_HOME}/bin/nifi-registry.sh\\" run &\\nnifi_registry_pid=\\"$!\\"\\n\\ntrap \\"echo Received trapped signal, beginning shutdown...;\\" KILL TERM HUP INT EXIT;\\n\\necho NiFi-Registry running with PID \${nifi_registry_pid}.\\nwait \${nifi_registry_pid}","nifi_start.sh":"#!/bin/bash\\n\\n# tail -f /dev/null\\n\\nrm -rf $NIFI_HOME/conf/*\\ncp -rL $NIFI_INIT_DIR/conf/* $NIFI_HOME/conf\\n\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_HOSTNAME/\${HOSTNAME}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_KEYSTORE_PASSWORD/\${NIFI_KEYSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_TRUSTSTORE_PASSWORD/\${NIFI_TRUSTSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_SENSITIVE_PROPS_KEY/\${NIFI_SENSITIVE_PROPS_KEY}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_NIFI_ZOOKEEPER_CONNECT_STRING/\${NIFI_ZOOKEEPER_CONNECT_STRING}/g\\" {} \\\\;\\n\\nif [ -n \\"\${SINGLE_USER_CREDENTIALS_USERNAME}\\" ] && [ -n \\"\${SINGLE_USER_CREDENTIALS_PASSWORD}\\" ]; then\\n    \${NIFI_HOME}/bin/nifi.sh set-single-user-credentials \\"\${SINGLE_USER_CREDENTIALS_USERNAME}\\" \\"\${SINGLE_USER_CREDENTIALS_PASSWORD}\\"\\nfi\\n\\n\${NIFI_TOOLKIT_HOME}/bin/cli.sh session set nifi.props \\"\${NIFI_HOME}/conf/nifi-cli.config\\"\\n\\n# Continuously provide logs so that 'docker logs' can produce them\\n\\"\${NIFI_HOME}/bin/nifi.sh\\" run &\\nnifi_pid=\\"$!\\"\\ntail -F --pid=\${nifi_pid} \\"\${NIFI_HOME}/logs/nifi-app.log\\" &\\n\\ntrap 'echo Received trapped signal, beginning shutdown...;./bin/nifi.sh stop;exit 0;' TERM HUP INT;\\ntrap \\":\\" EXIT\\n\\necho NiFi running with PID \${nifi_pid}.\\nwait \${nifi_pid}"}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"nifi-config","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"data":{"authorizers.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<authorizers>\\n  <userGroupProvider>\\n    <identifier>file-user-group-provider</identifier>\\n    <class>org.apache.nifi.authorization.FileUserGroupProvider</class>\\n    <property name=\\"Users File\\">/opt/nifi/data/users.xml</property>\\n    <property name=\\"Legacy Authorized Users File\\"></property>\\n    <property name=\\"Initial User Identity 1\\">CN=cluster-manager.nifi-test2</property>\\n    <property name=\\"Initial User Identity nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Initial User Identity nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n  </userGroupProvider>\\n  <accessPolicyProvider>\\n    <identifier>file-access-policy-provider</identifier>\\n    <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>\\n    <property name=\\"User Group Provider\\">file-user-group-provider</property>\\n    <property name=\\"Authorizations File\\">/opt/nifi/data/authorizations.xml</property>\\n    <property name=\\"Initial Admin Identity\\">CN=cluster-manager.nifi-test2</property>\\n    <property name=\\"Legacy Authorized Users File\\"></property>\\n    <property name=\\"Node Identity 1\\"></property>\\n    <property name=\\"Node Group\\"></property>\\n    <property name=\\"Node Identity nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Node Identity nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n  </accessPolicyProvider>\\n  <authorizer>\\n    <identifier>managed-authorizer</identifier>\\n    <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>\\n    <property name=\\"Access Policy Provider\\">file-access-policy-provider</property>\\n  </authorizer>\\n  <authorizer>\\n    <identifier>single-user-authorizer</identifier>\\n    <class>org.apache.nifi.authorization.single.user.SingleUserAuthorizer</class>\\n  </authorizer>\\n</authorizers>\\n","bootstrap.conf":"#\\n# Licensed to the Apache Software Foundation (ASF) under one or more\\n# contributor license agreements.  See the NOTICE file distributed with\\n# this work for additional information regarding copyright ownership.\\n# The ASF licenses this file to You under the Apache License, Version 2.0\\n# (the \\"License\\"); you may not use this file except in compliance with\\n# the License.  You may obtain a copy of the License at\\n#\\n#   http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing, software\\n# distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n# See the License for the specific language governing permissions and\\n# limitations under the License.\\n#\\n\\n# Java command to use when running NiFi\\njava=java\\n\\n# Username to use when running NiFi. This value will be ignored on Windows.\\nrun.as=\\n\\n# Preserve shell environment while runnning as \\"run.as\\" user\\npreserve.environment=false\\n\\n# Configure where NiFi's lib and conf directories live\\nlib.dir=./lib\\nconf.dir=./conf\\n\\n# How long to wait after telling NiFi to shutdown before explicitly killing the Process\\ngraceful.shutdown.seconds=20\\n\\n# Disable JSR 199 so that we can use JSP's without running a JDK\\njava.arg.1=-Dorg.apache.jasper.compiler.disablejsr199=true\\n\\n# JVM memory settings\\njava.arg.2=-Xms512m\\njava.arg.3=-Xmx512m\\n\\n# Enable Remote Debugging\\n# java.arg.debug=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000\\n\\njava.arg.4=-Djava.net.preferIPv4Stack=true\\n\\n# allowRestrictedHeaders is required for Cluster/Node communications to work properly\\njava.arg.5=-Dsun.net.http.allowRestrictedHeaders=true\\njava.arg.6=-Djava.protocol.handler.pkgs=sun.net.www.protocol\\n\\n# The G1GC is known to cause some problems in Java 8 and earlier, but the issues were addressed in Java 9. If using Java 8 or earlier,\\n# it is recommended that G1GC not be used, especially in conjunction with the Write Ahead Provenance Repository. However, if using a newer\\n# version of Java, it can result in better performance without significant \\"stop-the-world\\" delays.\\n#java.arg.13=-XX:+UseG1GC\\n\\n#Set headless mode by default\\njava.arg.14=-Djava.awt.headless=true\\n\\n# Root key in hexadecimal format for encrypted sensitive configuration values\\nnifi.bootstrap.sensitive.key=\\n\\n# Sensitive Property Provider configuration\\n\\n# HashiCorp Vault Sensitive Property Providers\\n#nifi.bootstrap.protection.hashicorp.vault.conf=./conf/bootstrap-hashicorp-vault.conf\\n\\n# AWS Sensitive Property Providers\\n#nifi.bootstrap.protection.aws.conf=./conf/bootstrap-aws.conf\\n\\n# Azure Key Vault Sensitive Property Providers\\n#nifi.bootstrap.protection.azure.keyvault.conf=./conf/bootstrap-azure.conf\\n\\n# GCP KMS Sensitive Property Providers\\n#nifi.bootstrap.protection.gcp.kms.conf=./conf/bootstrap-gcp.conf\\n\\n# Sets the provider of SecureRandom to /dev/urandom to prevent blocking on VMs\\njava.arg.15=-Djava.security.egd=file:/dev/urandom\\n\\n# Requires JAAS to use only the provided JAAS configuration to authenticate a Subject, without using any \\"fallback\\" methods (such as prompting for username/password)\\n# Please see https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/single-signon.html, section \\"EXCEPTIONS TO THE MODEL\\"\\njava.arg.16=-Djavax.security.auth.useSubjectCredsOnly=true\\n\\n# Zookeeper 3.5 now includes an Admin Server that starts on port 8080, since NiFi is already using that port disable by default.\\n# Please see https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_adminserver_config for configuration options.\\njava.arg.17=-Dzookeeper.admin.enableServer=false\\n\\n# The following options configure a Java Agent to handle native library loading.\\n# It is needed when a custom jar (eg. JDBC driver) has been configured on a component in the flow and this custom jar depends on a native library\\n# and tries to load it by its absolute path (java.lang.System.load(String filename) method call).\\n# Use this Java Agent only if you get \\"Native Library ... already loaded in another classloader\\" errors otherwise!\\n#java.arg.18=-javaagent:./lib/aspectj/aspectjweaver-1.9.6.jar\\n#java.arg.19=-Daj.weaving.loadersToSkip=sun.misc.Launcher$AppClassLoader,jdk.internal.loader.ClassLoaders$AppClassLoader,org.eclipse.jetty.webapp.WebAppClassLoader,\\\\\\n#            org.apache.jasper.servlet.JasperLoader,org.jvnet.hk2.internal.DelegatingClassLoader,org.apache.nifi.nar.NarClassLoader\\n# End of Java Agent config for native library loading.\\n\\n###\\n# Notification Services for notifying interested parties when NiFi is stopped, started, dies\\n###\\n\\n# XML File that contains the definitions of the notification services\\nnotification.services.file=./conf/bootstrap-notification-services.xml\\n\\n# In the case that we are unable to send a notification for an event, how many times should we retry?\\nnotification.max.attempts=5\\n\\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is started?\\n#nifi.start.notification.services=email-notification\\n\\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is stopped?\\n#nifi.stop.notification.services=email-notification\\n\\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi dies?\\n#nifi.dead.notification.services=email-notification\\n\\n# The first curator connection issue is logged as ERROR, for example when NiFi cannot connect to one of the Zookeeper nodes.\\n# Additional connection issues are logged as DEBUG until the connection is restored.\\njava.arg.curator.supress.excessive.logs=-Dcurator-log-only-first-connection-issue-as-error-level=true\\n\\n# Port used to listen for communications from NiFi. If this property is missing, empty, or 0, a random ephemeral port is used.\\nnifi.bootstrap.listen.port=0\\n","logback.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n-->\\n\\n<configuration scan=\\"true\\" scanPeriod=\\"30 seconds\\">\\n    <shutdownHook class=\\"ch.qos.logback.core.hook.DefaultShutdownHook\\" />\\n\\n    <contextListener class=\\"ch.qos.logback.classic.jul.LevelChangePropagator\\">\\n        <resetJUL>true</resetJUL>\\n    </contextListener>\\n\\n    <appender name=\\"APP_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-app.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'app_%d.log'.\\n              For hourly rollover, use 'app_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\\n                \${org.apache.nifi.bootstrap.config.log.dir}/nifi-app_%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>\\n            <maxFileSize>100MB</maxFileSize>\\n            <!-- keep 30 log files worth of history -->\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <immediateFlush>true</immediateFlush>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"SSL_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-ssl.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'app_%d.log'.\\n              For hourly rollover, use 'app_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\\n                \${org.apache.nifi.bootstrap.config.log.dir}/nifi-ssl_%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>\\n            <maxFileSize>100MB</maxFileSize>\\n            <!-- keep 30 log files worth of history -->\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <immediateFlush>true</immediateFlush>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"USER_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-user.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'user_%d.log'.\\n              For hourly rollover, use 'user_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-user_%d.log</fileNamePattern>\\n            <!-- keep 30 log files worth of history -->\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"REQUEST_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-request.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-request_%d.log</fileNamePattern>\\n            <maxHistory>30</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"BOOTSTRAP_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-bootstrap.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'bootstrap_%d.log'.\\n              For hourly rollover, use 'bootstrap_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-bootstrap_%d.log</fileNamePattern>\\n            <!-- keep 5 log files worth of history -->\\n            <maxHistory>5</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"DEPRECATION_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-deprecation.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\">\\n            <fileNamePattern>\${org.apache.nifi.bootstrap.config.log.dir}/nifi-deprecation_%d.%i.log</fileNamePattern>\\n            <maxFileSize>10MB</maxFileSize>\\n            <maxHistory>10</maxHistory>\\n            <totalSizeCap>100MB</totalSizeCap>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"CONSOLE\\" class=\\"ch.qos.logback.core.ConsoleAppender\\">\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <!-- valid logging levels: TRACE, DEBUG, INFO, WARN, ERROR -->\\n\\n    <!-- Deprecation Log -->\\n    <logger name=\\"deprecation\\" level=\\"WARN\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"DEPRECATION_FILE\\" />\\n    </logger>\\n\\n    <logger name=\\"org.apache.nifi\\" level=\\"INFO\\" />\\n    <logger name=\\"org.apache.nifi.processors\\" level=\\"WARN\\" />\\n    <logger name=\\"org.apache.nifi.processors.standard.LogAttribute\\" level=\\"INFO\\" />\\n    <logger name=\\"org.apache.nifi.processors.standard.LogMessage\\" level=\\"INFO\\" />\\n    <logger name=\\"org.apache.nifi.controller.repository.StandardProcessSession\\" level=\\"WARN\\" />\\n\\n\\n    <logger name=\\"org.apache.zookeeper.ClientCnxn\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.NIOServerCnxn\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.NIOServerCnxnFactory\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.NettyServerCnxnFactory\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.quorum\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.ZooKeeper\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.zookeeper.server.PrepRequestProcessor\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.apache.nifi.controller.reporting.LogComponentStatuses\\" level=\\"ERROR\\" />\\n\\n    <logger name=\\"org.apache.calcite.runtime.CalciteException\\" level=\\"OFF\\" />\\n\\n    <logger name=\\"org.apache.curator.framework.recipes.leader.LeaderSelector\\" level=\\"OFF\\" />\\n    <logger name=\\"org.apache.curator.ConnectionState\\" level=\\"OFF\\" />\\n\\n    <!-- Logger for managing logging statements for nifi clusters. -->\\n    <logger name=\\"org.apache.nifi.cluster\\" level=\\"INFO\\" />\\n\\n    <!-- Logger for logging HTTP requests received by the web server. -->\\n    <logger name=\\"org.apache.nifi.server.JettyServer\\" level=\\"INFO\\" />\\n\\n    <!-- Logger for managing logging statements for jetty -->\\n    <logger name=\\"org.eclipse.jetty\\" level=\\"INFO\\" />\\n\\n    <!-- Suppress non-error messages due to excessive logging by class or library -->\\n    <logger name=\\"org.springframework\\" level=\\"ERROR\\" />\\n    <logger name=\\"org.springframework.security\\" level=\\"INFO\\" />\\n\\n    <!-- Suppress non-error messages due to known warning about redundant path annotation (NIFI-574) -->\\n    <logger name=\\"org.glassfish.jersey.internal.Errors\\" level=\\"ERROR\\" />\\n\\n    <!-- Suppress non-error messages due to Jetty AnnotationParser emitting a large amount of WARNS.\\n    Issue described in NIFI-5479. -->\\n    <logger name=\\"org.eclipse.jetty.annotations.AnnotationParser\\" level=\\"ERROR\\" />\\n\\n    <!-- Suppress non-error messages from SSHJ which was emitting large amounts of INFO logs by\\n    default -->\\n    <logger name=\\"net.schmizz.sshj\\" level=\\"WARN\\" />\\n    <logger name=\\"com.hierynomus.sshj\\" level=\\"WARN\\" />\\n\\n    <!-- Suppress non-error messages from SMBJ which was emitting large amounts of INFO logs by\\n    default -->\\n    <logger name=\\"com.hierynomus.smbj\\" level=\\"WARN\\" />\\n\\n    <!-- Suppress non-error messages from AWS KCL which was emitting large amounts of INFO logs by\\n    default -->\\n    <logger name=\\"com.amazonaws.services.kinesis\\" level=\\"WARN\\" />\\n\\n    <!-- Suppress non-error messages from Apache Atlas which was emitting large amounts of INFO logs\\n    by default -->\\n    <logger name=\\"org.apache.atlas\\" level=\\"WARN\\" />\\n\\n    <!-- These log messages would normally go to the USER_FILE log, but they belong in the APP_FILE -->\\n    <logger name=\\"org.apache.nifi.web.security.requests\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"APP_FILE\\" />\\n    </logger>\\n\\n    <!--\\n        Logger for capturing user events. We do not want to propagate these\\n        log events to the root logger. These messages are only sent to the\\n        user-log appender.\\n    -->\\n    <logger name=\\"org.apache.nifi.web.security\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.web.api.config\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.authorization\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.cluster.authorization\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.web.api.AccessResource\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.opensaml\\" level=\\"WARN\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"USER_FILE\\" />\\n    </logger>\\n\\n    <!-- Web Server Request Log -->\\n    <logger name=\\"org.apache.nifi.web.server.RequestLog\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"REQUEST_FILE\\" />\\n    </logger>\\n\\n    <!--\\n        Logger for capturing Bootstrap logs and NiFi's standard error and standard out.\\n    -->\\n    <logger name=\\"org.apache.nifi.bootstrap\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.bootstrap.Command\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"CONSOLE\\" />\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!-- Everything written to NiFi's Standard Out will be logged with the logger\\n    org.apache.nifi.StdOut at INFO level -->\\n    <logger name=\\"org.apache.nifi.StdOut\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!-- Everything written to NiFi's Standard Error will be logged with the logger\\n    org.apache.nifi.StdErr at ERROR level -->\\n    <logger name=\\"org.apache.nifi.StdErr\\" level=\\"ERROR\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!--DEBUG\\n    SSL Cert Reloading-->\\n    <logger name=\\"org.apache.nifi.web.server.util.StoreScanner\\" level=\\"DEBUG\\">\\n        <appender-ref ref=\\"SSL_FILE\\" />\\n    </logger>\\n\\n    <logger name=\\"org.eclipse.jetty.util.ssl.SslContextFactory\\" level=\\"DEBUG\\">\\n        <appender-ref ref=\\"SSL_FILE\\" />\\n    </logger>\\n\\n    <logger name=\\"org.apache.nifi.security.util.SslContextFactory\\" level=\\"DEBUG\\">\\n        <appender-ref ref=\\"SSL_FILE\\" />\\n    </logger>\\n\\n    <root level=\\"INFO\\">\\n        <appender-ref ref=\\"APP_FILE\\" />\\n    </root>\\n\\n</configuration>","login-identity-providers.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"no\\"?><!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n--><!--\\n    This file lists the login identity providers to use when running securely. In order\\n    to use a specific provider it must be configured here and it's identifier\\n    must be specified in the nifi.properties file.\\n--><loginIdentityProviders>\\n    <!--\\n        Single User Login Identity Provider supporting automated generation of Username and Password\\n\\n        The provider will write the following log messages when 'Username' and 'Password' are empty:\\n\\n        Generated Username [USERNAME]\\n        Generated Password [PASSWORD]\\n\\n        The 'Username' will be a random UUID and the 'Password' will be stored using bcrypt hashing\\n    -->\\n    <provider>\\n        <identifier>single-user-provider</identifier>\\n        <class>org.apache.nifi.authentication.single.user.SingleUserLoginIdentityProvider</class>\\n        <property name=\\"Username\\"></property>\\n        <property name=\\"Password\\"></property>\\n    </provider>\\n    <!--\\n        Identity Provider for users logging in with username/password against an LDAP server.\\n        \\n        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible\\n            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.\\n        \\n        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.\\n        'Manager Password' - The password of the manager that is used to bind to the LDAP server to\\n            search for users.\\n            \\n        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.\\n        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP\\n            using LDAPS or START_TLS.\\n        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using\\n            LDAPS or START_TLS such as PKCS12.\\n        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.\\n        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to\\n            LDAP using LDAPS or START_TLS.\\n        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using\\n            LDAPS or START_TLS such as PKCS12.\\n        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.\\n            Possible values are REQUIRED, WANT, NONE.\\n        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,\\n            TLSv1.1, TLSv1.2, etc).\\n        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully \\n            before the target context is closed. Defaults to false.\\n            \\n        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.\\n        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).\\n        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).\\n       \\n        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).\\n        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).\\n        'User Search Filter' - Filter for searching for users against the 'User Search Base'.\\n            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.\\n\\n        'Identity Strategy' - Strategy to identify users. Possible values are USE_DN and USE_USERNAME.\\n            The default functionality if this property is missing is USE_DN in order to retain\\n            backward compatibility. USE_DN will use the full DN of the user entry if possible.\\n            USE_USERNAME will use the username the user logged in with.\\n        'Authentication Expiration' - The duration of how long the user authentication is valid\\n            for. If the user never logs out, they will be required to log back in following\\n            this duration.\\n    -->\\n    <!-- To enable the ldap-provider remove 2 lines. This is 1 of 2. \\n    <provider>\\n        <identifier>ldap-provider</identifier>\\n        <class>org.apache.nifi.ldap.LdapProvider</class>\\n        <property name=\\"Authentication Strategy\\">START_TLS</property>\\n\\n        <property name=\\"Manager DN\\"></property>\\n        <property name=\\"Manager Password\\"></property>\\n\\n        <property name=\\"TLS - Keystore\\"></property>\\n        <property name=\\"TLS - Keystore Password\\"></property>\\n        <property name=\\"TLS - Keystore Type\\"></property>\\n        <property name=\\"TLS - Truststore\\"></property>\\n        <property name=\\"TLS - Truststore Password\\"></property>\\n        <property name=\\"TLS - Truststore Type\\"></property>\\n        <property name=\\"TLS - Client Auth\\"></property>\\n        <property name=\\"TLS - Protocol\\"></property>\\n        <property name=\\"TLS - Shutdown Gracefully\\"></property>\\n        \\n        <property name=\\"Referral Strategy\\">FOLLOW</property>\\n        <property name=\\"Connect Timeout\\">10 secs</property>\\n        <property name=\\"Read Timeout\\">10 secs</property>\\n\\n        <property name=\\"Url\\"></property>\\n        <property name=\\"User Search Base\\"></property>\\n        <property name=\\"User Search Filter\\"></property>\\n\\n        <property name=\\"Identity Strategy\\">USE_DN</property>\\n        <property name=\\"Authentication Expiration\\">12 hours</property>\\n    </provider>\\n    To enable the ldap-provider remove 2 lines. This is 2 of 2. -->\\n\\n    <!--\\n        Identity Provider for users logging in with username/password against a Kerberos KDC server.\\n\\n        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).\\n        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.\\n    -->\\n    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.\\n    <provider>\\n        <identifier>kerberos-provider</identifier>\\n        <class>org.apache.nifi.kerberos.KerberosProvider</class>\\n        <property name=\\"Default Realm\\">NIFI.APACHE.ORG</property>\\n        <property name=\\"Authentication Expiration\\">12 hours</property>\\n    </provider>\\n    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->\\n</loginIdentityProviders>","nifi-cli.config":"baseUrl=https://INIT_HOSTNAME.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal:8444\\nkeystore=/opt/nifi/ssl/manager/keystore.jks\\nkeystoreType=JKS\\nkeystorePasswd=INIT_KEYSTORE_PASSWORD\\nkeyPasswd=INIT_KEYSTORE_PASSWORD\\ntruststore=/opt/nifi/ssl/manager/truststore.jks\\ntruststoreType=JKS\\ntruststorePasswd=INIT_KEYSTORE_PASSWORD","nifi.properties":"nifi.flow.configuration.file=/opt/nifi/data/flow.xml.gz\\nnifi.flow.configuration.json.file=/opt/nifi/data/flow.json.gz\\nnifi.flow.configuration.archive.enabled=true\\nnifi.flow.configuration.archive.dir=/opt/nifi/data/flow_archive/\\nnifi.flow.configuration.archive.max.time=30 days\\nnifi.flow.configuration.archive.max.storage=5 GB\\nnifi.flow.configuration.archive.max.count=\\nnifi.flowcontroller.autoResumeState=true\\nnifi.flowcontroller.graceful.shutdown.period=10 sec\\nnifi.flowservice.writedelay.interval=500 ms\\nnifi.administrative.yield.duration=30 sec\\nnifi.bored.yield.duration=10 millis\\nnifi.queue.backpressure.count=10000\\nnifi.queue.backpressure.size=1 GB\\nnifi.authorizer.configuration.file=./conf/authorizers.xml\\nnifi.login.identity.provider.configuration.file=./conf/login-identity-providers.xml\\nnifi.templates.directory=/opt/nifi/data/templates\\nnifi.ui.banner.text=\\nnifi.ui.autorefresh.interval=30 sec\\nnifi.nar.library.directory=./lib\\nnifi.nar.library.autoload.directory=./extensions\\nnifi.nar.working.directory=./work/nar/\\nnifi.documentation.working.directory=./work/docs/components\\nnifi.nar.unpack.uber.jar=false\\nnifi.state.management.configuration.file=./conf/state-management.xml\\nnifi.state.management.provider.local=local-provider\\nnifi.state.management.provider.cluster=zk-provider\\nnifi.state.management.embedded.zookeeper.start=false\\nnifi.state.management.embedded.zookeeper.properties=./conf/zookeeper.properties\\nnifi.database.directory=/opt/nifi/data/database_repository\\nnifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE\\nnifi.repository.encryption.protocol.version=\\nnifi.repository.encryption.key.id=\\nnifi.repository.encryption.key.provider=\\nnifi.repository.encryption.key.provider.keystore.location=\\nnifi.repository.encryption.key.provider.keystore.password=\\nnifi.flowfile.repository.implementation=org.apache.nifi.controller.repository.WriteAheadFlowFileRepository\\nnifi.flowfile.repository.wal.implementation=org.apache.nifi.wali.SequentialAccessWriteAheadLog\\nnifi.flowfile.repository.directory=/opt/nifi/data/flowfile_repository\\nnifi.flowfile.repository.checkpoint.interval=20 secs\\nnifi.flowfile.repository.always.sync=false\\nnifi.flowfile.repository.retain.orphaned.flowfiles=true\\nnifi.swap.manager.implementation=org.apache.nifi.controller.FileSystemSwapManager\\nnifi.queue.swap.threshold=20000\\nnifi.content.repository.implementation=org.apache.nifi.controller.repository.FileSystemRepository\\nnifi.content.claim.max.appendable.size=50 KB\\nnifi.content.repository.directory.default=/opt/nifi/data/content_repository\\nnifi.content.repository.archive.max.retention.period=7 days\\nnifi.content.repository.archive.max.usage.percentage=50%\\nnifi.content.repository.archive.enabled=true\\nnifi.content.repository.always.sync=false\\nnifi.content.viewer.url=../nifi-content-viewer/\\nnifi.provenance.repository.implementation=org.apache.nifi.provenance.WriteAheadProvenanceRepository\\nnifi.provenance.repository.directory.default=/opt/nifi/data/provenance_repository\\nnifi.provenance.repository.max.storage.time=30 days\\nnifi.provenance.repository.max.storage.size=10 GB\\nnifi.provenance.repository.rollover.time=10 mins\\nnifi.provenance.repository.rollover.size=100 MB\\nnifi.provenance.repository.query.threads=2\\nnifi.provenance.repository.index.threads=2\\nnifi.provenance.repository.compress.on.rollover=true\\nnifi.provenance.repository.always.sync=false\\nnifi.provenance.repository.indexed.fields=EventType, FlowFileUUID, Filename, ProcessorID, Relationship\\nnifi.provenance.repository.indexed.attributes=\\nnifi.provenance.repository.index.shard.size=500 MB\\nnifi.provenance.repository.max.attribute.length=65536\\nnifi.provenance.repository.concurrent.merge.threads=2\\nnifi.provenance.repository.buffer.size=100000\\nnifi.components.status.repository.implementation=org.apache.nifi.controller.status.history.VolatileComponentStatusRepository\\nnifi.components.status.repository.buffer.size=1440\\nnifi.components.status.snapshot.frequency=1 min\\nnifi.status.repository.questdb.persist.node.days=14\\nnifi.status.repository.questdb.persist.component.days=3\\nnifi.status.repository.questdb.persist.location=/opt/nifi/data/status_repository\\nnifi.remote.input.host=INIT_HOSTNAME.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\nnifi.remote.input.secure=true\\nnifi.remote.input.socket.port=10001\\nnifi.remote.input.http.enabled=true\\nnifi.remote.input.http.transaction.ttl=30 sec\\nnifi.remote.contents.cache.expiration=30 secs\\nnifi.web.http.host=\\nnifi.web.http.port=\\nnifi.web.http.network.interface.default=\\nnifi.web.https.host=INIT_HOSTNAME.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\nnifi.web.https.port=8444\\nnifi.web.https.network.interface.default=\\nnifi.web.https.application.protocols=http/1.1\\nnifi.web.jetty.working.directory=./work/jetty\\nnifi.web.jetty.threads=200\\nnifi.web.max.header.size=16 KB\\nnifi.web.proxy.context.path=\\nnifi.web.proxy.host=\\nnifi.web.max.content.size=\\nnifi.web.max.requests.per.second=30000\\nnifi.web.max.access.token.requests.per.second=25\\nnifi.web.request.timeout=60 secs\\nnifi.web.request.ip.whitelist=\\nnifi.web.should.send.server.version=true\\nnifi.web.request.log.format=%{client}a - %u %t \\"%r\\" %s %O \\"%{Referer}i\\" \\"%{User-Agent}i\\"\\nnifi.web.https.ciphersuites.include=\\nnifi.web.https.ciphersuites.exclude=\\nnifi.sensitive.props.key=INIT_SENSITIVE_PROPS_KEY\\nnifi.sensitive.props.key.protected=\\nnifi.sensitive.props.algorithm=NIFI_PBKDF2_AES_GCM_256\\nnifi.sensitive.props.additional.keys=\\nnifi.security.autoreload.enabled=true\\nnifi.security.autoreload.interval=10 secs\\nnifi.security.keystore=/opt/nifi/data/ssl/keystore/keystore.jks\\nnifi.security.keystoreType=JKS\\nnifi.security.keystorePasswd=INIT_KEYSTORE_PASSWORD\\nnifi.security.keyPasswd=INIT_KEYSTORE_PASSWORD\\nnifi.security.truststore=/opt/nifi/data/ssl/truststore/truststore.jks\\nnifi.security.truststoreType=JKS\\nnifi.security.truststorePasswd=INIT_TRUSTSTORE_PASSWORD\\nnifi.security.user.authorizer=managed-authorizer\\nnifi.security.allow.anonymous.authentication=false\\nnifi.security.user.jws.key.rotation.period=PT1H\\nnifi.security.ocsp.responder.url=\\nnifi.security.ocsp.responder.certificate=\\nnifi.security.user.oidc.discovery.url=\\nnifi.security.user.oidc.connect.timeout=5 secs\\nnifi.security.user.oidc.read.timeout=5 secs\\nnifi.security.user.oidc.client.id=\\nnifi.security.user.oidc.client.secret=\\nnifi.security.user.oidc.preferred.jwsalgorithm=\\nnifi.security.user.oidc.additional.scopes=\\nnifi.security.user.oidc.claim.identifying.user=\\nnifi.security.user.oidc.fallback.claims.identifying.user=\\nnifi.security.user.oidc.claim.groups=groups\\nnifi.security.user.oidc.truststore.strategy=JDK\\nnifi.security.user.oidc.token.refresh.window=60 secs\\nnifi.security.user.knox.url=\\nnifi.security.user.knox.publicKey=\\nnifi.security.user.knox.cookieName=hadoop-jwt\\nnifi.security.user.knox.audiences=\\nnifi.security.user.saml.idp.metadata.url=https://portal.sso.ca-central-1.amazonaws.com/saml/metadata/abc-123\\nnifi.security.user.saml.sp.entity.id=org:apache:nifi:saml:sp-test2\\nnifi.security.user.saml.identity.attribute.name=\\nnifi.security.user.saml.group.attribute.name=\\nnifi.security.user.saml.request.signing.enabled=false\\nnifi.security.user.saml.want.assertions.signed=true\\nnifi.security.user.saml.signature.algorithm=http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\\nnifi.security.user.saml.authentication.expiration=12 hours\\nnifi.security.user.saml.single.logout.enabled=false\\nnifi.security.user.saml.http.client.truststore.strategy=JDK\\nnifi.security.user.saml.http.client.connect.timeout=30 secs\\nnifi.security.user.saml.http.client.read.timeout=30 secs\\nnifi.listener.bootstrap.port=0\\nnifi.cluster.protocol.heartbeat.interval=5 sec\\nnifi.cluster.protocol.heartbeat.missable.max=8\\nnifi.cluster.protocol.is.secure=true\\nnifi.cluster.is.node=true\\nnifi.cluster.node.address=INIT_HOSTNAME.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\nnifi.cluster.node.protocol.port=14444\\nnifi.cluster.node.protocol.max.threads=50\\nnifi.cluster.node.event.history.size=25\\nnifi.cluster.node.connection.timeout=5 sec\\nnifi.cluster.node.read.timeout=5 sec\\nnifi.cluster.node.max.concurrent.requests=100\\nnifi.cluster.firewall.file=\\nnifi.cluster.flow.election.max.wait.time=150 secs\\nnifi.cluster.flow.election.max.candidates=\\nnifi.cluster.load.balance.host=\\nnifi.cluster.load.balance.port=6342\\nnifi.cluster.load.balance.connections.per.node=1\\nnifi.cluster.load.balance.max.thread.count=8\\nnifi.cluster.load.balance.comms.timeout=30 sec\\nnifi.zookeeper.connect.string=zookeeper-0.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-1.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-2.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181\\nnifi.zookeeper.connect.timeout=10 secs\\nnifi.zookeeper.session.timeout=10 secs\\nnifi.zookeeper.root.node=/nifi/test2\\nnifi.zookeeper.client.secure=true\\nnifi.zookeeper.security.keystore=\\nnifi.zookeeper.security.keystoreType=\\nnifi.zookeeper.security.keystorePasswd=\\nnifi.zookeeper.security.truststore=\\nnifi.zookeeper.security.truststoreType=\\nnifi.zookeeper.security.truststorePasswd=\\nnifi.zookeeper.jute.maxbuffer=\\nnifi.zookeeper.auth.type=\\nnifi.zookeeper.kerberos.removeHostFromPrincipal=\\nnifi.zookeeper.kerberos.removeRealmFromPrincipal=\\nnifi.kerberos.krb5.file=\\nnifi.kerberos.service.principal=\\nnifi.kerberos.service.keytab.location=\\nnifi.kerberos.spnego.principal=\\nnifi.kerberos.spnego.keytab.location=\\nnifi.kerberos.spnego.authentication.expiration=12 hours\\nnifi.variable.registry.properties=\\nnifi.analytics.predict.enabled=false\\nnifi.analytics.predict.interval=3 mins\\nnifi.analytics.query.interval=5 mins\\nnifi.analytics.connection.model.implementation=org.apache.nifi.controller.status.analytics.models.OrdinaryLeastSquares\\nnifi.analytics.connection.model.score.name=rSquared\\nnifi.analytics.connection.model.score.threshold=.90\\nnifi.monitor.long.running.task.schedule=\\nnifi.monitor.long.running.task.threshold=\\nnifi.diagnostics.on.shutdown.enabled=false\\nnifi.diagnostics.on.shutdown.verbose=false\\nnifi.diagnostics.on.shutdown.directory=/opt/nifi/data/diagnostics\\nnifi.diagnostics.on.shutdown.max.filecount=10\\nnifi.diagnostics.on.shutdown.max.directory.size=10 MB\\nnifi.performance.tracking.percentage=0\\nnifi.cluster.leader.election.implementation=CuratorLeaderElectionManager\\nnifi.security.user.login.identity.provider=","nifi_manager.json":"{\\n  \\"registry_clients\\": {\\n    \\"test-org-test-env-test-domain-test-nificluster-main-registry\\": {\\n      \\"url\\": \\"https://nifi-registry.test-org-test-env-test-domain-test-nificluster-main.internal:8443\\"\\n    }\\n  },\\n  \\"identities\\": [\\n    \\"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"example_admin_identity\\",\\n    \\"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n  ],\\n  \\"groups\\": {\\n    \\"cluster_nodes\\": [\\n      \\"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n    ],\\n    \\"admins\\": [\\n      \\"example_admin_identity\\"\\n    ],\\n    \\"external_nodes\\": [\\n      \\"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n    ]\\n  },\\n  \\"policies\\": [\\n    {\\n      \\"resource\\": \\"/site-to-site\\",\\n      \\"action\\": \\"READ\\"\\n    },\\n    {\\n      \\"resource\\": \\"/process-groups/ROOT_ID\\",\\n      \\"action\\": \\"READ\\"\\n    },\\n    {\\n      \\"resource\\": \\"/process-groups/ROOT_ID\\",\\n      \\"action\\": \\"WRITE\\"\\n    }\\n  ],\\n  \\"authorizations\\": [\\n    {\\n      \\"policyResourcePattern\\": \\"/data/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"cluster_nodes\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"admins\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/site-to-site\\",\\n      \\"actions\\": [\\n        \\"READ\\"\\n      ],\\n      \\"groups\\": [\\n        \\"external_nodes\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/data-transfer/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"external_nodes\\"\\n      ]\\n    }\\n  ]\\n}","state-management.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n-->\\n<!--\\n  This file provides a mechanism for defining and configuring the State Providers\\n  that should be used for storing state locally and across a NiFi cluster. In order\\n  to use a specific provider, it must be configured here and its identifier\\n  must be specified in the nifi.properties file.\\n-->\\n<stateManagement>\\n    <!--\\n        State Provider that stores state locally in a configurable directory. This Provider requires the\\n    following properties:\\n        \\n        Directory - the directory to store components' state in. If the directory being used is a\\n    sub-directory of the NiFi installation, it\\n                    is important that the directory be copied over to the new version when upgrading NiFi.\\n        Always Sync - If set to true, any change to the repository will be synchronized to the disk,\\n    meaning that NiFi will ask the operating system not to cache the information. This is very\\n                expensive and can significantly reduce NiFi performance. However, if it is false, there could be\\n    the potential for data loss if either there is a sudden power loss or the\\n                operating system crashes. The default value is false.\\n        Partitions - The number of partitions.\\n        Checkpoint Interval - The amount of time between checkpoints.\\n     -->\\n    <local-provider>\\n        <id>local-provider</id>\\n        <class>org.apache.nifi.controller.state.providers.local.WriteAheadLocalStateProvider</class>\\n        <property name=\\"Directory\\">./state/local</property>\\n        <property name=\\"Always Sync\\">false</property>\\n        <property name=\\"Partitions\\">16</property>\\n        <property name=\\"Checkpoint Interval\\">2 mins</property>\\n    </local-provider>\\n\\n    <!--\\n        State Provider that is used to store state in ZooKeeper. This Provider requires the following\\n    properties:\\n        \\n        Root Node - the root node in ZooKeeper where state should be stored. The default is '/nifi', but it\\n    is advisable to change this to a different value if not using\\n                   the embedded ZooKeeper server and if multiple NiFi instances may all be using the same ZooKeeper\\n    Server.\\n                   \\n        Connect String - A comma-separated list of host:port pairs to connect to ZooKeeper. For example,\\n    myhost.mydomain:2181,host2.mydomain:5555,host3:6666\\n        \\n        Session Timeout - Specifies how long this instance of NiFi is allowed to be disconnected from\\n    ZooKeeper before creating a new ZooKeeper Session. Default value is \\"30 seconds\\"\\n        \\n        Access Control - Specifies which Access Controls will be applied to the ZooKeeper ZNodes that are\\n    created by this State Provider. This value must be set to one of:\\n                            - Open  : ZNodes will be open to any ZooKeeper client.\\n                            - CreatorOnly  : ZNodes will be accessible only by the creator. The creator will have full access to\\n    create children, read, write, delete, and administer the ZNodes.\\n                                             This option is available only if access to ZooKeeper is secured via Kerberos or if a Username and\\n    Password are set.\\n    -->\\n    <cluster-provider>\\n        <id>zk-provider</id>\\n        <class>org.apache.nifi.controller.state.providers.zookeeper.ZooKeeperStateProvider</class>\\n        <property name=\\"Connect String\\">INIT_NIFI_ZOOKEEPER_CONNECT_STRING</property>\\n        <property name=\\"Root Node\\">/nifi</property>\\n        <property name=\\"Session Timeout\\">10 seconds</property>\\n        <property name=\\"Access Control\\">Open</property>\\n    </cluster-provider>\\n\\n    <!--\\n        Cluster State Provider that stores state in Redis. This can be used as an alternative to the\\n    ZooKeeper State Provider.\\n\\n        This provider requires the following properties:\\n\\n            Redis Mode - The type of Redis instance:\\n                            - Standalone\\n                            - Sentinel\\n                            - Cluster (currently not supported for state-management due to use of WATCH command which Redis\\n    does not support in clustered mode)\\n\\n            Connection String - The connection string for Redis.\\n                        - In a standalone instance this value will be of the form hostname:port.\\n                        - In a sentinel instance this value will be the comma-separated list of sentinels, such as\\n    host1:port1,host2:port2,host3:port3.\\n                        - In a clustered instance this value will be the comma-separated list of cluster masters, such as\\n    host1:port,host2:port,host3:port.\\n\\n        This provider has the following optional properties:\\n\\n            Key Prefix - The prefix for each key stored by this state provider. When sharing a single Redis\\n    across multiple NiFi instances, setting a unique\\n                        value for the Key Prefix will make it easier to identify which instances the keys came from\\n    (default nifi/components/).\\n\\n            Database Index - The database index to be used by connections created from this connection pool.\\n                        See the databases property in redis.conf, by default databases 0-15 will be available.\\n\\n            Communication Timeout - The timeout to use when attempting to communicate with Redis.\\n\\n            Cluster Max Redirects - The maximum number of redirects that can be performed when clustered.\\n\\n            Sentinel Master - The name of the sentinel master, require when Mode is set to Sentinel.\\n\\n            Password - The password used to authenticate to the Redis server. See the requirepass property in\\n    redis.conf.\\n\\n            Enable TLS - If true, the Redis connection will be configured to use TLS, using the keystore and\\n    truststore settings configured in\\n                    nifi.properties.  This means that a TLS-enabled Redis connection is only possible if the Apache NiFi\\n    instance is running in secure mode.\\n                    If this property is false, an insecure Redis connection will be used even if the Apache NiFi\\n    instance is secure (default false).\\n\\n            Pool - Max Total - The maximum number of connections that can be allocated by the pool (checked out\\n    to clients, or idle awaiting checkout).\\n                        A negative value indicates that there is no limit.\\n\\n            Pool - Max Idle - The maximum number of idle connections that can be held in the pool, or a\\n    negative value if there is no limit.\\n\\n            Pool - Min Idle - The target for the minimum number of idle connections to maintain in the pool. If\\n    the configured value of Min Idle is\\n                    greater than the configured value for Max Idle, then the value of Max Idle will be used instead.\\n\\n            Pool - Block When Exhausted - Whether or not clients should block and wait when trying to obtain a\\n    connection from the pool when the pool\\n                    has no available connections. Setting this to false means an error will occur immediately when a\\n    client requests a connection and\\n                    none are available.\\n\\n            Pool - Max Wait Time - The amount of time to wait for an available connection when Block When\\n    Exhausted is set to true.\\n\\n            Pool - Min Evictable Idle Time - The minimum amount of time an object may sit idle in the pool\\n    before it is eligible for eviction.\\n\\n            Pool - Time Between Eviction Runs - The amount of time between attempting to evict idle connections\\n    from the pool.\\n\\n            Pool - Num Tests Per Eviction Run - The number of connections to tests per eviction attempt. A\\n    negative value indicates to test all connections.\\n\\n            Pool - Test On Create - Whether or not connections should be tested upon creation (default false).\\n\\n            Pool - Test On Borrow - Whether or not connections should be tested upon borrowing from the pool\\n    (default false).\\n\\n            Pool - Test On Return - Whether or not connections should be tested upon returning to the pool\\n    (default false).\\n\\n            Pool - Test While Idle - Whether or not connections should be tested while idle (default true).\\n\\n        <cluster-provider>\\n            <id>redis-provider</id>\\n            <class>org.apache.nifi.redis.state.RedisStateProvider</class>\\n            <property name=\\"Redis Mode\\">Standalone</property>\\n            <property name=\\"Connection String\\">localhost:6379</property>\\n        </cluster-provider>\\n    -->\\n\\n</stateManagement>"}},{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              ""},"name":"nifi","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":"","app":"nifi"},"name":"nifi-vol-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","namespace":"nifi-test2"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"nifi-data-nifi-0","namespace":"nifi-test2"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "::",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":"","app":"nifi"},"name":"nifi-vol-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","namespace":"nifi-test2"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"nifi-data-nifi-1","namespace":"nifi-test2"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "::",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"name":"nifi","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"spec":{"persistentVolumeClaimRetentionPolicy":{"whenDeleted":"Retain","whenScaled":"Delete"},"podManagementPolicy":"Parallel","replicas":2,"selector":{"matchLabels":{"app":"nifi"}},"serviceName":"nifi-svc","template":{"metadata":{"labels":{"app":"nifi"}},"spec":{"containers":[{"command":["sh","/opt/nifi/scripts/nifi_manager.sh"],"env":[{"name":"NIFI_APP","value":"nifi"},{"name":"MANAGER_CONFIG","value":"/opt/nifi/init/conf/nifi_manager.json"},{"name":"NIFI_INIT_DIR","value":"/opt/nifi/init"},{"name":"NIFI_DATA_DIR","value":"/opt/nifi/data"},{"name":"NIFI_SENSITIVE_PROPS_KEY","valueFrom":{"secretKeyRef":{"key":"sensitive-props-key","name":"nifi-secret","optional":false}}},{"name":"NIFI_SSL_BASE_PATH","value":"/opt/nifi/ssl"},{"name":"NIFI_ZOOKEEPER_CONNECT_STRING","value":"zookeeper-0.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-1.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-2.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181"},{"name":"NIFI_KEYSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}},{"name":"NIFI_TRUSTSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}},{"name":"PYTHONUNBUFFERED","value":"1"},{"name":"NIFI_NODES","value":"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal,CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal"}],"image":"",
              {
                "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:0008f52ad2d4c5b502dcecef172136d1f1d40ebdb528a0a94a0ec5d27ebad8bc",
              },
              "","name":"nifi-manager","resources":{"limits":{"cpu":"250m","memory":"0.5Gi"},"requests":{"cpu":"250m","memory":"0.5Gi"}},"volumeMounts":[{"mountPath":"/opt/nifi/init/conf","name":"nifi-config"},{"mountPath":"/home/nifi/.aws","name":"aws-creds"},{"mountPath":"/.local","name":"pip-local"},{"mountPath":"/opt/nifi/init/scripts","name":"nifi-init-scripts"},{"mountPath":"/opt/nifi/data","name":"nifi-data"},{"mountPath":"/opt/nifi/ssl/manager","name":"manager-ssl","readOnly":true},{"mountPath":"/opt/nifi/ssl/nifi-0","name":"nifi-0-ssl","readOnly":true},{"mountPath":"/opt/nifi/ssl/nifi-1","name":"nifi-1-ssl","readOnly":true}]},{"command":["bash","-c","/opt/nifi/init/scripts/nifi_start.sh"],"env":[{"name":"NIFI_INIT_DIR","value":"/opt/nifi/init"},{"name":"NIFI_DATA_DIR","value":"/opt/nifi/data"},{"name":"NIFI_HOME","value":"/opt/nifi/nifi-current"},{"name":"NIFI_SENSITIVE_PROPS_KEY","valueFrom":{"secretKeyRef":{"key":"sensitive-props-key","name":"nifi-secret","optional":false}}},{"name":"NIFI_SSL_BASE_PATH","value":"/opt/nifi/ssl"},{"name":"NIFI_ZOOKEEPER_CONNECT_STRING","value":"zookeeper-0.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-1.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181,zookeeper-2.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal:2181"},{"name":"NIFI_KEYSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}},{"name":"NIFI_TRUSTSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-secret","optional":false}}}],"image":"apache/nifi:1.25.0","name":"nifi","ports":[{"containerPort":8444}],"resources":{"limits":{"cpu":"1","memory":"2Gi"},"requests":{"cpu":"1","memory":"2Gi"}},"volumeMounts":[{"mountPath":"/opt/nifi/init/conf","name":"nifi-config"},{"mountPath":"/opt/nifi/init/scripts","name":"nifi-init-scripts"},{"mountPath":"/opt/nifi/data","name":"nifi-data"},{"mountPath":"/home/nifi/.aws","name":"aws-creds"},{"mountPath":"/opt/nifi/ssl/nifi-0","name":"nifi-0-ssl","readOnly":true},{"mountPath":"/opt/nifi/ssl/nifi-1","name":"nifi-1-ssl","readOnly":true}]}],"dnsConfig":{"searches":["nifi-svc.nifi-test2.svc.cluster.local"]},"securityContext":{"fsGroup":1000,"runAsGroup":1000,"runAsUser":1000},"serviceAccountName":"nifi","shareProcessNamespace":true,"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}],"volumes":[{"configMap":{"defaultMode":493,"name":"nifi-init-scripts"},"name":"nifi-init-scripts"},{"configMap":{"defaultMode":493,"name":"nifi-config"},"name":"nifi-config"},{"emptyDir":{},"name":"aws-creds"},{"emptyDir":{},"name":"pip-local"},{"name":"manager-ssl","secret":{"secretName":"manager-ssl"}},{"name":"nifi-0-ssl","secret":{"secretName":"nifi-0-ssl"}},{"name":"nifi-1-ssl","secret":{"secretName":"nifi-1-ssl"}}]}},"volumeClaimTemplates":[{"metadata":{"name":"nifi-data"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"5Gi"}},"selector":{"matchLabels":{"app":"nifi"}},"storageClassName":"efs-sc"}}]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"manager-cert","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"spec":{"commonName":"cluster-manager.nifi-test2","duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"manager-ssl","usages":["server auth","client auth"]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"nifi-0-cert","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"spec":{"commonName":"nifi-0.nifi-test2","dnsNames":["localhost","nifi-0.nifi-svc.nifi-test2.svc.cluster.local","nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"nifi-0-ssl","usages":["server auth","client auth"]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"nifi-1-cert","namespace":"nifi-test2","labels":{"aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796":""}},"spec":{"commonName":"nifi-1.nifi-test2","dnsNames":["localhost","nifi-1.nifi-svc.nifi-test2.svc.cluster.local","nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"nifi-1-ssl","usages":["server auth","client auth"]}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c8d384c8c97f384511d3d616279d835da4630ba796",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:333:25] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:333:25] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:333:25] LogGroup retention is set to RetentionDays.INFINITE.",
            },
          ],
        },
      },
      "Properties": {
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/eks/test-org-test-env-test-domain-test-nificluster-main/",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId",
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              "/pods",
            ],
          ],
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"awspca.cert-manager.io/v1beta1","kind":"AWSPCAClusterIssuer","metadata":{"name":"private-ca-cluster-issuer","labels":{"aws.cdk.eks/prune-c8d9cdd840facc4c683fee649147cf57268eab4e82":""}},"spec":{"arn":"arn:aws:acm-pca:test-region:test-account:certificate-authority/test-acm-pca-id","region":"",
              {
                "Ref": "AWS::Region",
              },
              ""}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c8d9cdd840facc4c683fee649147cf57268eab4e82",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              ""},"labels":{"aws.cdk.eks/prune-c8b3f2ffd05a2d2b5f61afe46052347d5171cae33e":"","app.kubernetes.io/name":"private-ca"},"name":"private-ca-service-account","namespace":"cert-manager"}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c8b3f2ffd05a2d2b5f61afe46052347d5171cae33e",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"external-dns.alpha.kubernetes.io/hostname":"nifi-registry.test-org-test-env-test-domain-test-nificluster-main.internal","external-dns.alpha.kubernetes.io/ttl":"60"},"labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":"","app":"nifi-registry"},"name":"nifi-registry-svc","namespace":"registry"},"spec":{"clusterIP":"None","ports":[{"name":"nifi-registry-ui","port":8443}],"selector":{"app":"nifi-registry"}}},{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              ""},"name":"external-secret-store","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"SecretStore","metadata":{"name":"external-secret-store","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"spec":{"provider":{"aws":{"auth":{"jwt":{"serviceAccountRef":{"name":"external-secret-store"}}},"region":"",
              {
                "Ref": "AWS::Region",
              },
              "","service":"SecretsManager"}}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"ExternalSecret","metadata":{"name":"external-secret","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"spec":{"data":[{"remoteRef":{"key":"",
              {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        1,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        2,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        3,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        4,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        5,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        7,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        8,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        9,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        10,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        11,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        12,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                ],
              },
              ""},"secretKey":"admin-creds"},{"remoteRef":{"key":"",
              {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        1,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        2,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        3,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        4,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        5,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        7,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        8,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        9,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        10,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        11,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                ],
              },
              ""},"secretKey":"keystore-password"}],"refreshInterval":"1h","secretStoreRef":{"kind":"SecretStore","name":"external-secret-store"},"target":{"creationPolicy":"Owner","name":"nifi-registry-secret"}}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"nifi-registry-init-scripts","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"data":{"nifi_registry_start.sh":"#!/bin/bash\\n\\n# tail -f /dev/null\\n\\nrm -rf $NIFI_HOME/conf/*\\ncp -rL $NIFI_INIT_DIR/conf/* $NIFI_HOME/conf\\n\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_KEYSTORE_PASSWORD/\${NIFI_KEYSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_TRUSTSTORE_PASSWORD/\${NIFI_TRUSTSTORE_PASSWORD}/g\\" {} \\\\;\\n\\nmkdir -p \\"\${NIFI_REGISTRY_HOME}/logs/\\"\\ntouch \\"\${NIFI_REGISTRY_HOME}/logs/nifi-registry-app.log\\"\\n\\n# Continuously provide logs so that 'docker logs' can produce them\\ntail -F \\"\${NIFI_REGISTRY_HOME}/logs/nifi-registry-app.log\\" &\\n\\"\${NIFI_REGISTRY_HOME}/bin/nifi-registry.sh\\" run &\\nnifi_registry_pid=\\"$!\\"\\n\\ntrap \\"echo Received trapped signal, beginning shutdown...;\\" KILL TERM HUP INT EXIT;\\n\\necho NiFi-Registry running with PID \${nifi_registry_pid}.\\nwait \${nifi_registry_pid}","nifi_start.sh":"#!/bin/bash\\n\\n# tail -f /dev/null\\n\\nrm -rf $NIFI_HOME/conf/*\\ncp -rL $NIFI_INIT_DIR/conf/* $NIFI_HOME/conf\\n\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_HOSTNAME/\${HOSTNAME}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_KEYSTORE_PASSWORD/\${NIFI_KEYSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_TRUSTSTORE_PASSWORD/\${NIFI_TRUSTSTORE_PASSWORD}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_SENSITIVE_PROPS_KEY/\${NIFI_SENSITIVE_PROPS_KEY}/g\\" {} \\\\;\\nfind \\"\${NIFI_HOME}/conf/\\" -type f -exec sed -i \\"s/INIT_NIFI_ZOOKEEPER_CONNECT_STRING/\${NIFI_ZOOKEEPER_CONNECT_STRING}/g\\" {} \\\\;\\n\\nif [ -n \\"\${SINGLE_USER_CREDENTIALS_USERNAME}\\" ] && [ -n \\"\${SINGLE_USER_CREDENTIALS_PASSWORD}\\" ]; then\\n    \${NIFI_HOME}/bin/nifi.sh set-single-user-credentials \\"\${SINGLE_USER_CREDENTIALS_USERNAME}\\" \\"\${SINGLE_USER_CREDENTIALS_PASSWORD}\\"\\nfi\\n\\n\${NIFI_TOOLKIT_HOME}/bin/cli.sh session set nifi.props \\"\${NIFI_HOME}/conf/nifi-cli.config\\"\\n\\n# Continuously provide logs so that 'docker logs' can produce them\\n\\"\${NIFI_HOME}/bin/nifi.sh\\" run &\\nnifi_pid=\\"$!\\"\\ntail -F --pid=\${nifi_pid} \\"\${NIFI_HOME}/logs/nifi-app.log\\" &\\n\\ntrap 'echo Received trapped signal, beginning shutdown...;./bin/nifi.sh stop;exit 0;' TERM HUP INT;\\ntrap \\":\\" EXIT\\n\\necho NiFi running with PID \${nifi_pid}.\\nwait \${nifi_pid}"}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"nifi-registry-config","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"data":{"authorizers.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<authorizers>\\n  <userGroupProvider>\\n    <identifier>file-user-group-provider</identifier>\\n    <class>org.apache.nifi.registry.security.authorization.file.FileUserGroupProvider</class>\\n    <property name=\\"Users File\\">/opt/nifi-registry/data/users.xml</property>\\n    <property name=\\"Initial User Identity 1\\">CN=nifi-registry-manager</property>\\n    <property name=\\"Initial User Identity nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Initial User Identity nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Initial User Identity nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Initial User Identity nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n  </userGroupProvider>\\n  <accessPolicyProvider>\\n    <identifier>file-access-policy-provider</identifier>\\n    <class>org.apache.nifi.registry.security.authorization.file.FileAccessPolicyProvider</class>\\n    <property name=\\"User Group Provider\\">file-user-group-provider</property>\\n    <property name=\\"Authorizations File\\">/opt/nifi-registry/data/authorizations.xml</property>\\n    <property name=\\"Initial Admin Identity\\">CN=nifi-registry-manager</property>\\n    <property name=\\"NiFi Group Name\\"></property>\\n    <property name=\\"Nifi Identity nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Nifi Identity nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Nifi Identity nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n    <property name=\\"Nifi Identity nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\">CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal</property>\\n  </accessPolicyProvider>\\n  <authorizer>\\n    <identifier>managed-authorizer</identifier>\\n    <class>org.apache.nifi.registry.security.authorization.StandardManagedAuthorizer</class>\\n    <property name=\\"Access Policy Provider\\">file-access-policy-provider</property>\\n  </authorizer>\\n</authorizers>\\n","bootstrap.conf":"#\\n# Licensed to the Apache Software Foundation (ASF) under one or more\\n# contributor license agreements.  See the NOTICE file distributed with\\n# this work for additional information regarding copyright ownership.\\n# The ASF licenses this file to You under the Apache License, Version 2.0\\n# (the \\"License\\"); you may not use this file except in compliance with\\n# the License.  You may obtain a copy of the License at\\n#\\n#   http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing, software\\n# distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n# See the License for the specific language governing permissions and\\n# limitations under the License.\\n#\\n\\n# Java command to use when running nifi-registry\\njava=java\\n\\n# Username to use when running nifi-registry. This value will be ignored on Windows.\\nrun.as=\\n\\n# Configure the working directory for launching the NiFi Registry process\\n# If not specified, the working directory will fall back to using the NIFI_REGISTRY_HOME env variable\\n# If the environment variable is not specified, the working directory will fall back to the parent of this file's parent\\nworking.dir=\\n\\n# Configure where nifi-registry's lib and conf directories live\\nlib.dir=./lib\\nconf.dir=./conf\\ndocs.dir=./docs\\n\\n# How long to wait after telling nifi-registry to shutdown before explicitly killing the Process\\ngraceful.shutdown.seconds=20\\n\\n# Disable JSR 199 so that we can use JSP's without running a JDK\\njava.arg.1=-Dorg.apache.jasper.compiler.disablejsr199=true\\n\\n# JVM memory settings\\njava.arg.2=-Xms512m\\njava.arg.3=-Xmx512m\\n\\n# Enable Remote Debugging\\n#java.arg.debug=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000\\n\\njava.arg.4=-Djava.net.preferIPv4Stack=true\\n\\n# allowRestrictedHeaders is required for Cluster/Node communications to work properly\\njava.arg.5=-Dsun.net.http.allowRestrictedHeaders=true\\njava.arg.6=-Djava.protocol.handler.pkgs=sun.net.www.protocol\\n\\n# Master key in hexadecimal format for encrypted sensitive configuration values\\nnifi.registry.bootstrap.sensitive.key=\\n\\n# Sensitive Property Provider configuration\\n\\n# HashiCorp Vault Sensitive Property Providers\\n#nifi.registry.bootstrap.protection.hashicorp.vault.conf=./conf/bootstrap-hashicorp-vault.conf\\n\\n# AWS Sensitive Property Providers\\n#nifi.registry.bootstrap.protection.aws.conf=./conf/bootstrap-aws.conf\\n\\n# Azure Key Vault Sensitive Property Providers\\n#nifi.registry.bootstrap.protection.azure.keyvault.conf=./conf/bootstrap-azure.conf\\n\\n# GCP KMS Sensitive Property Providers\\n#nifi.registry.bootstrap.protection.gcp.kms.conf=./conf/bootstrap-gcp.conf","identity-providers.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<!--\\n  ~ Licensed to the Apache Software Foundation (ASF) under one or more\\n  ~ contributor license agreements.  See the NOTICE file distributed with\\n  ~ this work for additional information regarding copyright ownership.\\n  ~ The ASF licenses this file to You under the Apache License, Version 2.0\\n  ~ (the \\"License\\"); you may not use this file except in compliance with\\n  ~ the License.  You may obtain a copy of the License at\\n  ~\\n  ~     http://www.apache.org/licenses/LICENSE-2.0\\n  ~\\n  ~ Unless required by applicable law or agreed to in writing, software\\n  ~ distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  ~ See the License for the specific language governing permissions and\\n  ~ limitations under the License.\\n  -->\\n<!--\\n    This file lists the identity providers to use when running securely. In order\\n    to use a specific provider it must be configured here and its identifier\\n    must be specified in the nifi-registry.properties file.\\n-->\\n<identityProviders>\\n    <!--\\n        Identity Provider for users logging in with username/password against an LDAP server.\\n        \\n        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible\\n            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.\\n        \\n        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.\\n        'Manager Password' - The password of the manager that is used to bind to the LDAP server to\\n            search for users.\\n            \\n        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or\\n    START_TLS.\\n        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP\\n            using LDAPS or START_TLS.\\n        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using\\n            LDAPS or START_TLS (i.e. JKS or PKCS12).\\n        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or\\n    START_TLS.\\n        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to\\n            LDAP using LDAPS or START_TLS.\\n        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using\\n            LDAPS or START_TLS (i.e. JKS or PKCS12).\\n        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or\\n    START_TLS.\\n            Possible values are REQUIRED, WANT, NONE.\\n        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,\\n            TLSv1.1, TLSv1.2, etc).\\n        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully \\n            before the target context is closed. Defaults to false.\\n            \\n        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.\\n        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).\\n        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).\\n       \\n        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).\\n        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).\\n        'User Search Filter' - Filter for searching for users against the 'User Search Base'.\\n            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.\\n\\n        'Identity Strategy' - Strategy to identify users. Possible values are USE_DN and USE_USERNAME.\\n            The default functionality if this property is missing is USE_DN in order to retain\\n            backward compatibility. USE_DN will use the full DN of the user entry if possible.\\n            USE_USERNAME will use the username the user logged in with.\\n        'Authentication Expiration' - The duration of how long the user authentication is valid\\n            for. If the user never logs out, they will be required to log back in following\\n            this duration.\\n    -->\\n    <!-- To enable the ldap-identity-provider remove 2 lines. This is 1 of 2.\\n    <provider>\\n        <identifier>ldap-identity-provider</identifier>\\n        <class>org.apache.nifi.registry.security.ldap.LdapIdentityProvider</class>\\n        <property name=\\"Authentication Strategy\\">SIMPLE</property>\\n\\n        <property name=\\"Manager DN\\"></property>\\n        <property name=\\"Manager Password\\"></property>\\n        \\n        <property name=\\"Referral Strategy\\">FOLLOW</property>\\n        <property name=\\"Connect Timeout\\">10 secs</property>\\n        <property name=\\"Read Timeout\\">10 secs</property>\\n\\n        <property name=\\"Url\\"></property>\\n        <property name=\\"User Search Base\\"></property>\\n        <property name=\\"User Search Filter\\"></property>\\n\\n        <property name=\\"Identity Strategy\\">USE_USERNAME</property>\\n        <property name=\\"Authentication Expiration\\">12 hours</property>\\n    </provider>\\n    To enable the ldap-identity-provider remove 2 lines. This is 2 of 2. -->\\n\\n    <!--\\n        Identity Provider for users logging in with username/password against a Kerberos KDC server.\\n\\n        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e.\\n    NIFI.APACHE.ORG).\\n        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the\\n    user never logs out, they will be required to log back in following this duration.\\n    -->\\n    <!-- To enable the kerberos-identity-provider remove 2 lines. This is 1 of 2.\\n    <provider>\\n        <identifier>kerberos-identity-provider</identifier>\\n    <class>org.apache.nifi.registry.web.security.authentication.kerberos.KerberosIdentityProvider</class>\\n        <property name=\\"Default Realm\\">NIFI.APACHE.ORG</property>\\n        <property name=\\"Authentication Expiration\\">12 hours</property>\\n        <property name=\\"Enable Debug\\">false</property>\\n    </provider>\\n    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->\\n\\n</identityProviders>","logback.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n-->\\n<configuration scan=\\"true\\" scanPeriod=\\"30 seconds\\">\\n    <contextListener class=\\"ch.qos.logback.classic.jul.LevelChangePropagator\\">\\n        <resetJUL>true</resetJUL>\\n    </contextListener>\\n\\n    <appender name=\\"APP_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.registry.bootstrap.config.log.dir}/nifi-registry-app.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'app_%d.log'.\\n              For hourly rollover, use 'app_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\\n                \${org.apache.nifi.registry.bootstrap.config.log.dir}/nifi-registry-app_%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>\\n            <maxFileSize>100MB</maxFileSize>\\n            <!-- keep 30 log files worth of history -->\\n            <maxHistory>30</maxHistory>\\n            <!-- keep 10GB total of log files -->\\n            <totalSizeCap>10GB</totalSizeCap>\\n        </rollingPolicy>\\n        <immediateFlush>true</immediateFlush>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"BOOTSTRAP_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.registry.bootstrap.config.log.dir}/nifi-registry-bootstrap.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'bootstrap_%d.log'.\\n              For hourly rollover, use 'bootstrap_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\\n                \${org.apache.nifi.registry.bootstrap.config.log.dir}/nifi-registry-bootstrap_%d.log</fileNamePattern>\\n            <!-- keep 5 log files worth of history -->\\n            <maxHistory>5</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"EVENTS_FILE\\" class=\\"ch.qos.logback.core.rolling.RollingFileAppender\\">\\n        <file>\${org.apache.nifi.registry.bootstrap.config.log.dir}/nifi-registry-event.log</file>\\n        <rollingPolicy class=\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\">\\n            <!--\\n              For daily rollover, use 'event_%d.log'.\\n              For hourly rollover, use 'event_%d{yyyy-MM-dd_HH}.log'.\\n              To GZIP rolled files, replace '.log' with '.log.gz'.\\n              To ZIP rolled files, replace '.log' with '.log.zip'.\\n            -->\\n            <fileNamePattern>\\n                \${org.apache.nifi.registry.bootstrap.config.log.dir}/nifi-registry-event_%d.log</fileNamePattern>\\n            <!-- keep 5 log files worth of history -->\\n            <maxHistory>5</maxHistory>\\n        </rollingPolicy>\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date ## %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <appender name=\\"CONSOLE\\" class=\\"ch.qos.logback.core.ConsoleAppender\\">\\n        <encoder class=\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\">\\n            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>\\n        </encoder>\\n    </appender>\\n\\n    <!-- valid logging levels: TRACE, DEBUG, INFO, WARN, ERROR -->\\n\\n    <logger name=\\"org.apache.nifi.registry\\" level=\\"INFO\\" />\\n\\n    <!-- To see SQL statements and parameters set this to TRACE -->\\n    <logger name=\\"org.springframework.jdbc\\" level=\\"INFO\\" />\\n\\n    <!--\\n        Logger for capturing Bootstrap logs and NiFi Registry's standard error and standard out.\\n    -->\\n    <logger name=\\"org.apache.nifi.registry.bootstrap\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n    <logger name=\\"org.apache.nifi.registry.bootstrap.Command\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"CONSOLE\\" />\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!-- Everything written to NiFi Registry's Standard Out will be logged with the logger\\n    org.apache.nifi.StdOut at INFO level -->\\n    <logger name=\\"org.apache.nifi.registry.StdOut\\" level=\\"INFO\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!-- Everything written to NiFi Registry's Standard Error will be logged with the logger\\n    org.apache.nifi.StdErr at ERROR level -->\\n    <logger name=\\"org.apache.nifi.registry.StdErr\\" level=\\"ERROR\\" additivity=\\"false\\">\\n        <appender-ref ref=\\"BOOTSTRAP_FILE\\" />\\n    </logger>\\n\\n    <!-- This will log all events to a separate file when the LoggingEventHookProvider is enabled in\\n    providers.xml -->\\n    <logger name=\\"org.apache.nifi.registry.provider.hook.LoggingEventHookProvider\\" level=\\"INFO\\"\\n        additivity=\\"false\\">\\n        <appender-ref ref=\\"EVENTS_FILE\\" />\\n    </logger>\\n\\n    <root level=\\"INFO\\">\\n        <appender-ref ref=\\"APP_FILE\\" />\\n    </root>\\n\\n</configuration>","nifi-reg-cli.config":"baseUrl=https://nifi-registry.test-org-test-env-test-domain-test-nificluster-main.internal:8443\\nkeystore=/opt/nifi-registry/ssl/manager/keystore.jks\\nkeystoreType=JKS\\nkeystorePasswd=INIT_KEYSTORE_PASSWORD\\nkeyPasswd=INIT_KEYSTORE_PASSWORD\\ntruststore=/opt/nifi-registry/ssl/manager/truststore.jks\\ntruststoreType=JKS\\ntruststorePasswd=INIT_KEYSTORE_PASSWORD","nifi-registry.properties":"nifi.registry.web.war.directory=./lib\\nnifi.registry.web.http.host=\\nnifi.registry.web.http.port=\\nnifi.registry.web.https.host=nifi-registry.test-org-test-env-test-domain-test-nificluster-main.internal\\nnifi.registry.web.https.port=8443\\nnifi.registry.web.https.application.protocols=http/1.1\\nnifi.registry.web.jetty.working.directory=./work/jetty\\nnifi.registry.web.jetty.threads=200\\nnifi.registry.web.should.send.server.version=true\\nnifi.registry.security.keystore=/opt/nifi-registry/data/ssl/keystore/keystore.jks\\nnifi.registry.security.keystoreType=JKS\\nnifi.registry.security.keystorePasswd=INIT_KEYSTORE_PASSWORD\\nnifi.registry.security.keyPasswd=INIT_KEYSTORE_PASSWORD\\nnifi.registry.security.truststore=/opt/nifi-registry/data/ssl/truststore/truststore.jks\\nnifi.registry.security.truststoreType=JKS\\nnifi.registry.security.truststorePasswd=INIT_TRUSTSTORE_PASSWORD\\nnifi.registry.security.needClientAuth=true\\nnifi.registry.security.authorizers.configuration.file=./conf/authorizers.xml\\nnifi.registry.security.authorizer=managed-authorizer\\nnifi.registry.security.identity.providers.configuration.file=./conf/identity-providers.xml\\nnifi.registry.security.identity.provider=\\nnifi.registry.providers.configuration.file=./conf/providers.xml\\nnifi.registry.registry.alias.configuration.file=./conf/registry-aliases.xml\\nnifi.registry.extensions.working.directory=./work/extensions\\nnifi.registry.db.directory=\\nnifi.registry.db.url.append=\\nnifi.registry.db.url=jdbc:h2:./database/nifi-registry-primary;AUTOCOMMIT=OFF;DB_CLOSE_ON_EXIT=FALSE;LOCK_MODE=3;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE\\nnifi.registry.db.driver.class=org.h2.Driver\\nnifi.registry.db.driver.directory=\\nnifi.registry.db.username=nifireg\\nnifi.registry.db.password=nifireg\\nnifi.registry.db.maxConnections=5\\nnifi.registry.db.sql.debug=false\\nnifi.registry.extension.dir.aws=./ext/aws/lib\\nnifi.registry.kerberos.krb5.file=\\nnifi.registry.kerberos.spnego.principal=\\nnifi.registry.kerberos.spnego.keytab.location=\\nnifi.registry.kerberos.spnego.authentication.expiration=12 hours\\nnifi.registry.security.user.oidc.discovery.url=\\nnifi.registry.security.user.oidc.connect.timeout=\\nnifi.registry.security.user.oidc.read.timeout=\\nnifi.registry.security.user.oidc.client.id=\\nnifi.registry.security.user.oidc.client.secret=\\nnifi.registry.security.user.oidc.preferred.jwsalgorithm=\\nnifi.registry.revisions.enabled=false\\nnifi.registry.security.user.authorizer=managed-authorizer\\nnifi.registry.security.autoreload.enabled=true\\nnifi.registry.security.autoreload.interval=10 secs\\nnifi.registry.security.user.login.identity.provider=single-user-provider","providers.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n-->\\n<providers>\\n\\n    <!-- NOTE: The providers in this file must be listed in the order defined in providers.xsd which\\n    is the following:\\n            1) Flow Persistence Provider (Must occur once and only once)\\n            2) Event Hook Providers (May occur 0 or more times)\\n            3) Bundle Persistence Provider (Must occur once and only once)\\n     -->\\n\\n    <flowPersistenceProvider>\\n        <class>org.apache.nifi.registry.provider.flow.FileSystemFlowPersistenceProvider</class>\\n        <property name=\\"Flow Storage Directory\\">./flow_storage</property>\\n    </flowPersistenceProvider>\\n\\n    <!--\\n    <flowPersistenceProvider>\\n        <class>org.apache.nifi.registry.provider.flow.git.GitFlowPersistenceProvider</class>\\n        <property name=\\"Flow Storage Directory\\">./flow_storage</property>\\n        <property name=\\"Remote To Push\\"></property>\\n        <property name=\\"Remote Access User\\"></property>\\n        <property name=\\"Remote Access Password\\"></property>\\n        <property name=\\"Remote Clone Repository\\"></property>\\n    </flowPersistenceProvider>\\n    -->\\n\\n    <!--\\n    <flowPersistenceProvider>\\n        <class>org.apache.nifi.registry.provider.flow.DatabaseFlowPersistenceProvider</class>\\n    </flowPersistenceProvider>\\n    -->\\n\\n    <!--\\n    <eventHookProvider>\\n        <class>org.apache.nifi.registry.provider.hook.ScriptEventHookProvider</class>\\n        <property name=\\"Script Path\\"></property>\\n        <property name=\\"Working Directory\\"></property>\\n        -->\\n    <!-- Optional Whitelist Event types\\n        <property name=\\"Whitelisted Event Type 1\\">CREATE_FLOW</property>\\n        <property name=\\"Whitelisted Event Type 2\\">DELETE_FLOW</property>\\n        -->\\n    <!--\\n    </eventHookProvider>\\n    -->\\n\\n    <!-- This will log all events to a separate file specified by the EVENT_APPENDER in logback.xml -->\\n    <!--\\n    <eventHookProvider>\\n        <class>org.apache.nifi.registry.provider.hook.LoggingEventHookProvider</class>\\n    </eventHookProvider>\\n    -->\\n\\n    <extensionBundlePersistenceProvider>\\n        <class>org.apache.nifi.registry.provider.extension.FileSystemBundlePersistenceProvider</class>\\n        <property name=\\"Extension Bundle Storage Directory\\">./extension_bundles</property>\\n    </extensionBundlePersistenceProvider>\\n\\n    <!-- Example S3 Bundle Persistence Provider\\n            - Requires nifi-registry-aws-assembly to be added to the classpath via a custom extension dir in\\n    nifi-registry.properties\\n                Example: nifi.registry.extension.dir.aws=./ext/aws/lib\\n                Where \\"./ext/aws/lib\\" contains the extracted contents of nifi-registry-aws-assembly\\n            - \\"Region\\" - The name of the S3 region where the bucket exists\\n            - \\"Bucket Name\\" - The name of an existing bucket to store extension bundles\\n            - \\"Key Prefix\\" - An optional prefix that if specified will be added to the beginning of all S3 keys\\n            - \\"Credentials Provider\\" - Indicates how credentials will be provided, must be a value of\\n    DEFAULT_CHAIN or STATIC\\n                - DEFAULT_CHAIN will consider in order: Java system properties, environment variables, credential\\n    profiles (~/.aws/credentials)\\n                - STATIC requires that \\"Access Key\\" and \\"Secret Access Key\\" be specified directly in this file\\n            - \\"Access Key\\" - The access key to use when using STATIC credentials provider\\n            - \\"Secret Access Key\\" - The secret access key to use when using STATIC credentials provider\\n            - \\"Endpoint URL\\" - An optional URL that overrides the default AWS S3 endpoint URL.\\n                 Set this when using an AWS S3 API compatible service hosted at a different URL.\\n     -->\\n    <!--\\n    <extensionBundlePersistenceProvider>\\n        <class>org.apache.nifi.registry.aws.S3BundlePersistenceProvider</class>\\n        <property name=\\"Region\\">us-east-1</property>\\n        <property name=\\"Bucket Name\\">my-bundles</property>\\n        <property name=\\"Key Prefix\\"></property>\\n        <property name=\\"Credentials Provider\\">DEFAULT_CHAIN</property>\\n        <property name=\\"Access Key\\"></property>\\n        <property name=\\"Secret Access Key\\"></property>\\n        <property name=\\"Endpoint URL\\"></property>\\n    </extensionBundlePersistenceProvider>\\n    -->\\n\\n</providers>","registry-aliases.xml":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n<!--\\n  Licensed to the Apache Software Foundation (ASF) under one or more\\n  contributor license agreements.  See the NOTICE file distributed with\\n  this work for additional information regarding copyright ownership.\\n  The ASF licenses this file to You under the Apache License, Version 2.0\\n  (the \\"License\\"); you may not use this file except in compliance with\\n  the License.  You may obtain a copy of the License at\\n      http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\"AS IS\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n-->\\n<aliases>\\n    <!--\\n    <alias>\\n        <internal>LOCAL_NIFI_REGISTRY</internal>\\n        <external>http://registry.nifi.apache.org:18080</external>\\n    </alias>\\n    -->\\n</aliases>","registry_manager.json":"{\\n  \\"buckets\\": {\\n    \\"example-extra-bucket\\": {\\n      \\"READ\\": {\\n        \\"groups\\": [\\n          \\"test_group\\"\\n        ],\\n        \\"identities\\": [\\n          \\"test-identity-1\\"\\n        ]\\n      },\\n      \\"WRITE\\": {\\n        \\"identities\\": [\\n          \\"test-identity-2\\"\\n        ]\\n      }\\n    },\\n    \\"test1\\": {\\n      \\"WRITE\\": {\\n        \\"groups\\": [\\n          \\"test1_admins\\"\\n        ]\\n      },\\n      \\"READ\\": {\\n        \\"groups\\": [\\n          \\"test1_admins\\",\\n          \\"test1_nodes\\"\\n        ]\\n      }\\n    },\\n    \\"test2\\": {\\n      \\"WRITE\\": {\\n        \\"groups\\": [\\n          \\"test2_admins\\"\\n        ]\\n      },\\n      \\"READ\\": {\\n        \\"groups\\": [\\n          \\"test2_admins\\",\\n          \\"test2_nodes\\"\\n        ]\\n      }\\n    }\\n  },\\n  \\"identities\\": [\\n    \\"CN=some-admin-identity\\",\\n    \\"CN=some-other-admin-identity\\",\\n    \\"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n    \\"some-admin-identity\\",\\n    \\"some-other-admin-identity\\",\\n    \\"example_admin_identity\\"\\n  ],\\n  \\"groups\\": {\\n    \\"admins\\": [\\n      \\"CN=some-admin-identity\\",\\n      \\"CN=some-other-admin-identity\\"\\n    ],\\n    \\"all_nifi_nodes\\": [\\n      \\"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n    ],\\n    \\"test1_admins\\": [\\n      \\"some-admin-identity\\",\\n      \\"some-other-admin-identity\\"\\n    ],\\n    \\"test1_nodes\\": [\\n      \\"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n    ],\\n    \\"test2_admins\\": [\\n      \\"example_admin_identity\\"\\n    ],\\n    \\"test2_nodes\\": [\\n      \\"CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\",\\n      \\"CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal\\"\\n    ]\\n  },\\n  \\"policies\\": [],\\n  \\"authorizations\\": [\\n    {\\n      \\"policyResourcePattern\\": \\"/.*\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\",\\n        \\"DELETE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"admins\\"\\n      ]\\n    },\\n    {\\n      \\"policyResourcePattern\\": \\"/proxy\\",\\n      \\"actions\\": [\\n        \\"READ\\",\\n        \\"WRITE\\",\\n        \\"DELETE\\"\\n      ],\\n      \\"groups\\": [\\n        \\"all_nifi_nodes\\"\\n      ]\\n    }\\n  ]\\n}"}},{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              ""},"name":"nifi-registry","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":"","app":"nifi-registry"},"name":"nifi-registry-vol-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","namespace":"registry"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"nifi-registry-data-pvc","namespace":"registry"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "::",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"v1","kind":"PersistentVolumeClaim","metadata":{"name":"nifi-registry-data-pvc","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"3Gi"}},"storageClassName":"efs-sc"}},{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"name":"nifi-registry","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"nifi-registry"}},"template":{"metadata":{"labels":{"app":"nifi-registry"}},"spec":{"containers":[{"command":["sh","/opt/nifi/scripts/nifi_registry_manager.sh"],"env":[{"name":"NIFI_APP","value":"registry"},{"name":"MANAGER_CONFIG","value":"/opt/nifi-registry/init/conf/registry_manager.json"},{"name":"NIFI_INIT_DIR","value":"/opt/nifi-registry/init"},{"name":"PYTHONUNBUFFERED","value":"1"},{"name":"NIFI_DATA_DIR","value":"/opt/nifi-registry/data"},{"name":"NIFI_SSL_BASE_PATH","value":"/opt/nifi-registry/ssl/registry"},{"name":"NIFI_CERT_NAME","value":"nifi-registry"},{"name":"NIFI_NODES","value":"CN=nifi-0.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal,CN=nifi-1.nifi-test1.test-org-test-env-test-domain-test-nificluster-main.internal,CN=nifi-0.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal,CN=nifi-1.nifi-test2.test-org-test-env-test-domain-test-nificluster-main.internal"},{"name":"NIFI_KEYSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-registry-secret","optional":false}}},{"name":"NIFI_TRUSTSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-registry-secret","optional":false}}}],"image":"",
              {
                "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:0008f52ad2d4c5b502dcecef172136d1f1d40ebdb528a0a94a0ec5d27ebad8bc",
              },
              "","name":"nifi-registry-manager","resources":{"limits":{"cpu":"250m","memory":"0.5Gi"},"requests":{"cpu":"250m","memory":"0.5Gi"}},"volumeMounts":[{"mountPath":"/opt/nifi-registry/init/conf","name":"nifi-registry-config"},{"mountPath":"/home/nifi/.aws","name":"aws-creds"},{"mountPath":"/opt/nifi-registry/init/scripts","name":"nifi-registry-init-scripts"},{"mountPath":"/opt/nifi-registry/data","name":"nifi-registry-data"},{"mountPath":"/opt/nifi-registry/ssl/manager","name":"nifi-registry-manager-ssl","readOnly":true},{"mountPath":"/opt/nifi-registry/ssl/registry/nifi-registry","name":"nifi-registry-ssl","readOnly":true}]},{"command":["bash","-c","/opt/nifi-registry/init/scripts/nifi_registry_start.sh"],"env":[{"name":"NIFI_INIT_DIR","value":"/opt/nifi-registry/init"},{"name":"NIFI_DATA_DIR","value":"/opt/nifi-registry/data"},{"name":"NIFI_HOME","value":"/opt/nifi-registry/nifi-registry-current"},{"name":"NIFI_SSL_BASE_PATH","value":"/opt/nifi-registry/ssl"},{"name":"NIFI_KEYSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-registry-secret","optional":false}}},{"name":"NIFI_TRUSTSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"nifi-registry-secret","optional":false}}}],"image":"apache/nifi-registry:1.25.0","name":"nifi-registry","ports":[{"containerPort":8443}],"resources":{"limits":{"cpu":"500m","memory":"1Gi"},"requests":{"cpu":"500m","memory":"1Gi"}},"volumeMounts":[{"mountPath":"/opt/nifi-registry/init/conf","name":"nifi-registry-config"},{"mountPath":"/opt/nifi-registry/init/scripts","name":"nifi-registry-init-scripts"},{"mountPath":"/opt/nifi-registry/data","name":"nifi-registry-data"},{"mountPath":"/home/nifi/.aws","name":"aws-creds"},{"mountPath":"/opt/nifi-registry/ssl","name":"nifi-registry-ssl","readOnly":true}]}],"dnsConfig":{"searches":["nifi-registry-svc.registry.svc.cluster.local"]},"securityContext":{"fsGroup":1000,"runAsGroup":1000,"runAsUser":1000},"serviceAccountName":"nifi-registry","shareProcessNamespace":true,"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}],"volumes":[{"configMap":{"defaultMode":493,"name":"nifi-registry-init-scripts"},"name":"nifi-registry-init-scripts"},{"configMap":{"defaultMode":493,"name":"nifi-registry-config"},"name":"nifi-registry-config"},{"emptyDir":{},"name":"aws-creds"},{"emptyDir":{},"name":"pip-local"},{"name":"nifi-registry-ssl","secret":{"secretName":"nifi-registry-ssl"}},{"name":"nifi-registry-manager-ssl","secret":{"secretName":"nifi-registry-manager-ssl"}},{"name":"nifi-registry-data","persistentVolumeClaim":{"claimName":"nifi-registry-data-pvc"}}]}}}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"nifi-registry-cert","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"spec":{"commonName":"nifi-registry","dnsNames":["localhost","nifi-registry.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-registry-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"nifi-registry-ssl","usages":["server auth","client auth"]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"nifi-registry-manager-cert","namespace":"registry","labels":{"aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e":""}},"spec":{"commonName":"nifi-registry-manager","duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"nifi-registry-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"nifi-registry-manager-ssl","usages":["client auth"]}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c8907cf66da53e99b87f0dd43b056f859eff2a552e",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"registry","labels":{"aws.cdk.eks/prune-c8492a107df40ba60e8b5fb0d0328e84477443217d":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"registry","labels":{"aws.cdk.eks/prune-c8492a107df40ba60e8b5fb0d0328e84477443217d":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
              ""]}}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c8492a107df40ba60e8b5fb0d0328e84477443217d",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:374:25] Log stream name not known at deployment time.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                      "*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                      ":log-stream:*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"external-dns.alpha.kubernetes.io/hostname":"zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal","external-dns.alpha.kubernetes.io/ttl":"60"},"labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":"","app":"zookeeper"},"name":"zookeeper-svc","namespace":"zookeeper"},"spec":{"clusterIP":"None","ports":[{"name":"zookeeper","port":2181}],"selector":{"app":"zookeeper"}}},{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"eks.amazonaws.com/role-arn":"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              ""},"name":"external-secret-store","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"SecretStore","metadata":{"name":"external-secret-store","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"spec":{"provider":{"aws":{"auth":{"jwt":{"serviceAccountRef":{"name":"external-secret-store"}}},"region":"",
              {
                "Ref": "AWS::Region",
              },
              "","service":"SecretsManager"}}}},{"apiVersion":"external-secrets.io/v1beta1","kind":"ExternalSecret","metadata":{"name":"zk-external-secret","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"spec":{"data":[{"remoteRef":{"key":"",
              {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        1,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        2,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        3,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        4,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        5,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        7,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        8,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        9,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        10,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Fn::Select": [
                        11,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                6,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                ],
              },
              ""},"secretKey":"keystore-password"}],"refreshInterval":"1h","secretStoreRef":{"kind":"SecretStore","name":"external-secret-store"},"target":{"creationPolicy":"Owner","name":"zk-secret"}}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"zookeeper-0-cert","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"spec":{"commonName":"zookeeper-0","dnsNames":["zookeeper-0.zookeeper-svc.zookeeper.svc.cluster.local","zookeeper-0.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"zk-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"zookeeper-0-ssl","usages":["server auth","client auth"]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"zookeeper-1-cert","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"spec":{"commonName":"zookeeper-1","dnsNames":["zookeeper-1.zookeeper-svc.zookeeper.svc.cluster.local","zookeeper-1.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"zk-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"zookeeper-1-ssl","usages":["server auth","client auth"]}},{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"name":"zookeeper-2-cert","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"spec":{"commonName":"zookeeper-2","dnsNames":["zookeeper-2.zookeeper-svc.zookeeper.svc.cluster.local","zookeeper-2.zookeeper.test-org-test-env-test-domain-test-nificluster-main.internal"],"duration":"140h0m0s","isCA":false,"issuerRef":{"kind":"ClusterIssuer","name":"ca-issuer"},"keystores":{"jks":{"create":true,"passwordSecretRef":{"key":"keystore-password","name":"zk-secret"}}},"privateKey":{"algorithm":"ECDSA","encoding":"PKCS1","size":384},"renewBefore":"6h0m0s","secretName":"zookeeper-2-ssl","usages":["server auth","client auth"]}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"zookeeper-init-scripts","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"data":{"zookeeper_start.sh":"#!/bin/bash\\n\\n\\n\\nrm -rf /conf/*\\ncp -rL $ZK_INIT_DIR/conf/* /conf\\n\\nsed -i \\"s/INIT_HOSTNAME/\${HOSTNAME}/g\\" /conf/zoo.cfg\\nsed -i \\"s/INIT_KEYSTORE_PASSWORD/\${ZK_KEYSTORE_PASSWORD}/g\\" /conf/zoo.cfg\\nsed -i \\"s/INIT_TRUSTSTORE_PASSWORD/\${ZK_TRUSTSTORE_PASSWORD}/g\\" /conf/zoo.cfg\\n\\n\\nexport ZOO_MY_ID=$(echo $HOSTNAME|cut -d '-' -f 2)\\n\\n/docker-entrypoint.sh && \\\\\\nzkServer.sh start-foreground\\n"}},{"apiVersion":"v1","kind":"ConfigMap","metadata":{"name":"zookeeper-config","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"data":{"zoo.cfg":"dataDir=/zookeeper-data\\ndataLogDir=/datalog\\ntickTime=2000\\ninitLimit=5\\nsyncLimit=2\\nautopurge.snapRetainCount=3\\nautopurge.purgeInterval=0\\nmaxClientCnxns=60\\nstandaloneEnabled=true\\nadmin.enableServer=true\\nserver.0=zookeeper-0.zookeeper-svc.zookeeper.svc.cluster.local:2888:3888\\nserver.1=zookeeper-1.zookeeper-svc.zookeeper.svc.cluster.local:2888:3888\\nserver.2=zookeeper-2.zookeeper-svc.zookeeper.svc.cluster.local:2888:3888\\nsecureClientPort=2181\\nserverCnxnFactory=org.apache.zookeeper.server.NettyServerCnxnFactory\\nsslQuorum=true\\nssl.quorum.keyStore.type=JKS\\nssl.quorum.keyStore.location=/zookeeper-ssl/INIT_HOSTNAME/keystore.jks\\nssl.quorum.keyStore.password=INIT_KEYSTORE_PASSWORD\\nssl.quorum.trustStore.type=JKS\\nssl.quorum.trustStore.location=/zookeeper-ssl/INIT_HOSTNAME/truststore.jks\\nssl.quorum.trustStore.password=INIT_TRUSTSTORE_PASSWORD\\nssl.keyStore.type=JKS\\nssl.keyStore.location=/zookeeper-ssl/INIT_HOSTNAME/keystore.jks\\nssl.keyStore.password=INIT_KEYSTORE_PASSWORD\\nssl.trustStore.type=JKS\\nssl.trustStore.location=/zookeeper-ssl/INIT_HOSTNAME/truststore.jks\\nssl.trustStore.password=INIT_TRUSTSTORE_PASSWORD"}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":"","app":"zookeeper"},"name":"zookeeper-vol-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","namespace":"zookeeper"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"zookeeper-data-zookeeper-0","namespace":"zookeeper"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "::",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":"","app":"zookeeper"},"name":"zookeeper-vol-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","namespace":"zookeeper"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"zookeeper-data-zookeeper-1","namespace":"zookeeper"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "::",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"v1","kind":"PersistentVolume","metadata":{"labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":"","app":"zookeeper"},"name":"zookeeper-vol-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "-",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","namespace":"zookeeper"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"60Gi"},"claimRef":{"name":"zookeeper-data-zookeeper-2","namespace":"zookeeper"},"csi":{"driver":"efs.csi.aws.com","volumeHandle":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "::",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              ""},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"efs-sc","volumeMode":"Filesystem"}},{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"name":"zookeeper","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba":""}},"spec":{"persistentVolumeClaimRetentionPolicy":{"whenDeleted":"Retain","whenScaled":"Delete"},"podManagementPolicy":"Parallel","replicas":3,"selector":{"matchLabels":{"app":"zookeeper"}},"serviceName":"zookeeper-svc","template":{"metadata":{"labels":{"app":"zookeeper"}},"spec":{"containers":[{"command":["bash","-c","/zookeeper-init/scripts/zookeeper_start.sh"],"env":[{"name":"ZOO_DATA_DIR","value":"/zookeeper-data"},{"name":"ZK_INIT_DIR","value":"/zookeeper-init"},{"name":"ZK_KEYSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"zk-secret","optional":false}}},{"name":"ZK_TRUSTSTORE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"keystore-password","name":"zk-secret","optional":false}}}],"image":"zookeeper:3.9.0","imagePullPolicy":"Always","name":"zookeeper","ports":[{"containerPort":2181,"name":"client"},{"containerPort":2888,"name":"server"},{"containerPort":3888,"name":"leader-election"}],"resources":{"limits":{"cpu":"250m","memory":"0.5Gi"},"requests":{"cpu":"250m","memory":"0.5Gi"}},"securityContext":{"runAsUser":1000},"volumeMounts":[{"mountPath":"/zookeeper-init/conf","name":"zookeeper-config"},{"mountPath":"/zookeeper-init/scripts","name":"zookeeper-init-scripts"},{"mountPath":"/zookeeper-data","name":"zookeeper-data"},{"mountPath":"/zookeeper-ssl/zookeeper-0","name":"zookeeper-0-ssl"},{"mountPath":"/zookeeper-ssl/zookeeper-1","name":"zookeeper-1-ssl"},{"mountPath":"/zookeeper-ssl/zookeeper-2","name":"zookeeper-2-ssl"}]}],"securityContext":{"fsGroup":1000,"runAsGroup":1000,"runAsUser":1000},"tolerations":[{"key":"eks.amazonaws.com/compute-type","value":"fargate"}],"volumes":[{"configMap":{"defaultMode":493,"name":"zookeeper-init-scripts"},"name":"zookeeper-init-scripts"},{"configMap":{"defaultMode":493,"name":"zookeeper-config"},"name":"zookeeper-config"},{"name":"zookeeper-0-ssl","secret":{"secretName":"zookeeper-0-ssl"}},{"name":"zookeeper-1-ssl","secret":{"secretName":"zookeeper-1-ssl"}},{"name":"zookeeper-2-ssl","secret":{"secretName":"zookeeper-2-ssl"}}]}},"updateStrategy":{"type":"RollingUpdate"},"volumeClaimTemplates":[{"metadata":{"name":"zookeeper-data"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"5Gi"}},"selector":{"matchLabels":{"app":"nifi"}},"storageClassName":"efs-sc"}}]}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c8abac520808cda2a37fc75cd4580c102794f3aaba",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Manifest": {
          "Fn::Join": [
            "",
            [
              "[{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"zookeeper","labels":{"aws.cdk.eks/prune-c84d80c8218d935293511fe2c77d76d4c4ace1a3da":""}}},{"apiVersion":"vpcresources.k8s.aws/v1beta1","kind":"SecurityGroupPolicy","metadata":{"name":"security-group-policy","namespace":"zookeeper","labels":{"aws.cdk.eks/prune-c84d80c8218d935293511fe2c77d76d4c4ace1a3da":""}},"spec":{"podSelector":{},"securityGroups":{"groupIds":["",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
              ""]}}}]",
            ],
          ],
        },
        "PruneLabel": "aws.cdk.eks/prune-c84d80c8218d935293511fe2c77d76d4c4ace1a3da",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainawscdkawseksKubectlProviderframeworkonEventDE83478FArn",
          ],
        },
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesResource",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:546:29] Access Point Names not known at deployment time. Permissions restricted by condition.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "",
        "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-exte-64cd787",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "route53:ChangeResourceRecordSets",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":route53:::hostedzone/",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  ],
                ],
              },
              "Sid": "Route53Update",
            },
            {
              "Action": [
                "route53:ListHostedZones",
                "route53:ListResourceRecordSets",
                "route53:ListTagsForResource",
              ],
              "Effect": "Allow",
              "Resource": "*",
              "Sid": "Route53List",
            },
          ],
          "Version": "2012-10-17",
        },
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringLike": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Value",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-exte-64cd787",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Value": {
          "Fn::Join": [
            "",
            [
              "{"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":aud":"sts.amazonaws.com","",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":sub":"system:serviceaccount:external-dns:*"}",
            ],
          ],
        },
      },
      "Type": "Custom::AWSCDKCfnJson",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "HostedZoneTags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Name": "test-org-test-env-test-domain-test-nificluster-main.internal.",
        "VPCs": [
          {
            "VPCId": "test-vpc-id",
            "VPCRegion": {
              "Ref": "AWS::Region",
            },
          },
        ],
      },
      "Type": "AWS::Route53::HostedZone",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Description": "/opt/kubectl/kubectl 1.27; /opt/helm/helm 3.12",
        "LicenseInfo": "Apache-2.0",
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SMG4",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "HIPAA.Security-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
          ],
        },
      },
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": "'",
          "ExcludePunctuation": true,
        },
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "Name": "test-org-test-env-test-domain-test-nificluster-main-mgmt-instance-keystore-password",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EFSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce NIST.800.53.R5-EFSInBackupPlan on EFS volume.",
            },
            {
              "id": "HIPAA.Security-EFSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
            },
            {
              "id": "PCI.DSS.321-EFSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
            },
          ],
        },
      },
      "Properties": {
        "Encrypted": true,
        "FileSystemTags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
          {
            "Key": "Name",
            "Value": "test-org-test-env-test-domain-test-nificluster-main-test1-nifi",
          },
        ],
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "PerformanceMode": "maxIO",
      },
      "Type": "AWS::EFS::FileSystem",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        ],
        "SubnetId": "test-subnet-id-1",
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        ],
        "SubnetId": "test-subnet-id-2",
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "",
        "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-test-eca5aff",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "Sid": "KmsDecrypt",
            },
            {
              "Action": "SecretsManager:GetSecretValue",
              "Effect": "Allow",
              "Resource": [
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              ],
              "Sid": "GetSecretValue",
            },
          ],
          "Version": "2012-10-17",
        },
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringLike": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Value",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-test-eca5aff",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Value": {
          "Fn::Join": [
            "",
            [
              "{"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":aud":"sts.amazonaws.com","",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":sub":"system:serviceaccount:nifi-test1:*"}",
            ],
          ],
        },
      },
      "Type": "Custom::AWSCDKCfnJson",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SMG4",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "HIPAA.Security-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
          ],
        },
      },
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": "'",
          "ExcludePunctuation": true,
        },
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "Name": "test-org-test-env-test-domain-test-nificluster-main-test1-keystore-password",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SMG4",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "HIPAA.Security-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
          ],
        },
      },
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": "'",
          "ExcludePunctuation": true,
        },
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "Name": "test-org-test-env-test-domain-test-nificluster-main-test1-admin-creds-secret",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:403:25] Access Point Names not known at deployment time. Permissions restricted by condition.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "",
        "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-te--36c6dc9a",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "elasticfilesystem:DescribeAccessPoints",
                "elasticfilesystem:DescribeMountTargets",
                "elasticfilesystem:DescribeFileSystems",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":elasticfilesystem:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":access-point/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":elasticfilesystem:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":access-point/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
              ],
              "Sid": "AllowDescribeEFS",
            },
            {
              "Action": "ec2:DescribeAvailabilityZones",
              "Effect": "Allow",
              "Resource": "*",
              "Sid": "AllowDescribeAz",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncryptFrom",
                "kms:ReEncryptTo",
                "kms:GenerateDataKey",
                "kms:GenerateDataKeyWithoutPlaintext",
                "kms:GenerateDataKeyPair",
                "kms:GenerateDataKeyPairWithoutPlaintext",
                "kms:CreateGrant",
                "kms:DescribeKey",
                "kms:ListAliases",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "Sid": "AllowEfsKms",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test1/nifi-cluster-efs-sg",
        "GroupName": "test-org-test-env-test-domain-test-nificluster-main-test1-nifi-cluster-efs",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "test-vpc-id",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "from ",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
              ":tcp PORT 2049",
            ],
          ],
        },
        "FromPort": 2049,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "from sg-efsclientid:tcp PORT 2049",
        "FromPort": 2049,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-efsclientid",
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "from sg-glefsclientid:tcp PORT 2049",
        "FromPort": 2049,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-glefsclientid",
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Self-Ref",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main-test1/security-group/nifi-cluster-efs/id",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AccessPointTags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
          {
            "Key": "Name",
            "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test1/nifi-pv-ap-0",
          },
        ],
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "PosixUser": {
          "Gid": "1000",
          "Uid": "1000",
        },
        "RootDirectory": {
          "CreationInfo": {
            "OwnerGid": "1000",
            "OwnerUid": "1000",
            "Permissions": "750",
          },
          "Path": "/nifi/0",
        },
      },
      "Type": "AWS::EFS::AccessPoint",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AccessPointTags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
          {
            "Key": "Name",
            "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test1/nifi-pv-ap-1",
          },
        ],
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "PosixUser": {
          "Gid": "1000",
          "Uid": "1000",
        },
        "RootDirectory": {
          "CreationInfo": {
            "OwnerGid": "1000",
            "OwnerUid": "1000",
            "Permissions": "750",
          },
          "Path": "/nifi/1",
        },
      },
      "Type": "AWS::EFS::AccessPoint",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SMG4",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "HIPAA.Security-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
          ],
        },
      },
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": "'",
          "ExcludePunctuation": true,
        },
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "Name": "test-org-test-env-test-domain-test-nificluster-main-test1-sensitive-props-key",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:187:27] AmazonS3ReadOnlyAccess authorized for use",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringLike": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Value",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonS3ReadOnlyAccess",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::",
                {
                  "Ref": "AWS::AccountId",
                },
                ":policy/customer-managed-policy-1",
              ],
            ],
          },
        ],
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-tes--2a3565e",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Value": {
          "Fn::Join": [
            "",
            [
              "{"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":aud":"sts.amazonaws.com","",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":sub":"system:serviceaccount:nifi-test1:*"}",
            ],
          ],
        },
      },
      "Type": "Custom::AWSCDKCfnJson",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test1/nifi-sg",
        "GroupName": "test-org-test-env-test-domain-test-nificluster-main-test1-nifi",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "test-vpc-id",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "CidrIp": "10.10.10.10/24",
        "Description": "from 10.10.10.10/24:tcp PORT 10000",
        "FromPort": 10000,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 10000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "CidrIp": "10.10.10.10/24",
        "Description": "from 10.10.10.10/24:tcp PORT 14443",
        "FromPort": 14443,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 14443,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "CidrIp": "10.10.10.10/24",
        "Description": "from 10.10.10.10/24:tcp PORT 8443",
        "FromPort": 8443,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 8443,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from sg-glnificlientid:tcp PORT 10000",
        "FromPort": 10000,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-glnificlientid",
        "ToPort": 10000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from sg-glnificlientid:tcp PORT 14443",
        "FromPort": 14443,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-glnificlientid",
        "ToPort": 14443,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from sg-glnificlientid:tcp PORT 8443",
        "FromPort": 8443,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-glnificlientid",
        "ToPort": 8443,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from sg-nificlientid:tcp PORT 10000",
        "FromPort": 10000,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-nificlientid",
        "ToPort": 10000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from sg-nificlientid:tcp PORT 14443",
        "FromPort": 14443,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-nificlientid",
        "ToPort": 14443,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from sg-nificlientid:tcp PORT 8443",
        "FromPort": 8443,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-nificlientid",
        "ToPort": 8443,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructeksclusterClusterSecurityGroup891F0126:ALL TRAFFIC",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "ClusterSecurityGroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Self-Ref",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest2nifisg65E78910:10000",
        "FromPort": 10000,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": 10000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest2nifisg65E78910:8443",
        "FromPort": 8443,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": 8443,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main-test1/security-group/nifi/id",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Cmd": [
          "delete",
          "pod",
          "-l",
          "app=nifi",
        ],
        "ExecutionKey": "ffc705731e2ede7c460e88850a6f7eabc824df8c",
        "Namespace": "nifi-test1",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
          ],
        },
        "TimeoutSeconds": 300,
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EFSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce NIST.800.53.R5-EFSInBackupPlan on EFS volume.",
            },
            {
              "id": "HIPAA.Security-EFSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
            },
            {
              "id": "PCI.DSS.321-EFSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:424:25] MDAA does not enforce HIPAA.Security-EFSInBackupPlan on EFS volume.",
            },
          ],
        },
      },
      "Properties": {
        "Encrypted": true,
        "FileSystemTags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
          {
            "Key": "Name",
            "Value": "test-org-test-env-test-domain-test-nificluster-main-test2-nifi",
          },
        ],
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "PerformanceMode": "maxIO",
      },
      "Type": "AWS::EFS::FileSystem",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        ],
        "SubnetId": "test-subnet-id-1",
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
        ],
        "SubnetId": "test-subnet-id-2",
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "",
        "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-tes-23b32340",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "Sid": "KmsDecrypt",
            },
            {
              "Action": "SecretsManager:GetSecretValue",
              "Effect": "Allow",
              "Resource": [
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              ],
              "Sid": "GetSecretValue",
            },
          ],
          "Version": "2012-10-17",
        },
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringLike": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Value",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-tes-23b32340",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Value": {
          "Fn::Join": [
            "",
            [
              "{"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":aud":"sts.amazonaws.com","",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":sub":"system:serviceaccount:nifi-test2:*"}",
            ],
          ],
        },
      },
      "Type": "Custom::AWSCDKCfnJson",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SMG4",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "HIPAA.Security-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
          ],
        },
      },
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": "'",
          "ExcludePunctuation": true,
        },
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "Name": "test-org-test-env-test-domain-test-nificluster-main-test2-keystore-password",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SMG4",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "HIPAA.Security-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
          ],
        },
      },
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": "'",
          "ExcludePunctuation": true,
        },
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "Name": "test-org-test-env-test-domain-test-nificluster-main-test2-admin-creds-secret",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:403:25] Access Point Names not known at deployment time. Permissions restricted by condition.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "",
        "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-tes-4d697067",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "elasticfilesystem:DescribeAccessPoints",
                "elasticfilesystem:DescribeMountTargets",
                "elasticfilesystem:DescribeFileSystems",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":elasticfilesystem:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":access-point/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":elasticfilesystem:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":access-point/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
              ],
              "Sid": "AllowDescribeEFS",
            },
            {
              "Action": "ec2:DescribeAvailabilityZones",
              "Effect": "Allow",
              "Resource": "*",
              "Sid": "AllowDescribeAz",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncryptFrom",
                "kms:ReEncryptTo",
                "kms:GenerateDataKey",
                "kms:GenerateDataKeyWithoutPlaintext",
                "kms:GenerateDataKeyPair",
                "kms:GenerateDataKeyPairWithoutPlaintext",
                "kms:CreateGrant",
                "kms:DescribeKey",
                "kms:ListAliases",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "Sid": "AllowEfsKms",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test2/nifi-cluster-efs-sg",
        "GroupName": "test-org-test-env-test-domain-test-nificluster-main-test2-nifi-cluster-efs",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "test-vpc-id",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "from ",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
              ":tcp PORT 2049",
            ],
          ],
        },
        "FromPort": 2049,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "from sg-glefsclientid:tcp PORT 2049",
        "FromPort": 2049,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-glefsclientid",
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Self-Ref",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main-test2/security-group/nifi-cluster-efs/id",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AccessPointTags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
          {
            "Key": "Name",
            "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test2/nifi-pv-ap-0",
          },
        ],
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "PosixUser": {
          "Gid": "1000",
          "Uid": "1000",
        },
        "RootDirectory": {
          "CreationInfo": {
            "OwnerGid": "1000",
            "OwnerUid": "1000",
            "Permissions": "750",
          },
          "Path": "/nifi/0",
        },
      },
      "Type": "AWS::EFS::AccessPoint",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AccessPointTags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
          {
            "Key": "Name",
            "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test2/nifi-pv-ap-1",
          },
        ],
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "PosixUser": {
          "Gid": "1000",
          "Uid": "1000",
        },
        "RootDirectory": {
          "CreationInfo": {
            "OwnerGid": "1000",
            "OwnerUid": "1000",
            "Permissions": "750",
          },
          "Path": "/nifi/1",
        },
      },
      "Type": "AWS::EFS::AccessPoint",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SMG4",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "HIPAA.Security-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
          ],
        },
      },
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": "'",
          "ExcludePunctuation": true,
        },
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "Name": "test-org-test-env-test-domain-test-nificluster-main-test2-sensitive-props-key",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringLike": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Value",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-te--34f8f49d",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Value": {
          "Fn::Join": [
            "",
            [
              "{"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":aud":"sts.amazonaws.com","",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":sub":"system:serviceaccount:nifi-test2:*"}",
            ],
          ],
        },
      },
      "Type": "Custom::AWSCDKCfnJson",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/nifi-cluster-test2/nifi-sg",
        "GroupName": "test-org-test-env-test-domain-test-nificluster-main-test2-nifi",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "test-vpc-id",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "CidrIp": "10.10.10.10/24",
        "Description": "from 10.10.10.10/24:tcp PORT 10001",
        "FromPort": 10001,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 10001,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "CidrIp": "10.10.10.10/24",
        "Description": "from 10.10.10.10/24:tcp PORT 14444",
        "FromPort": 14444,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 14444,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "CidrIp": "10.10.10.10/24",
        "Description": "from 10.10.10.10/24:tcp PORT 8444",
        "FromPort": 8444,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 8444,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from sg-glnificlientid:tcp PORT 10001",
        "FromPort": 10001,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-glnificlientid",
        "ToPort": 10001,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from sg-glnificlientid:tcp PORT 14444",
        "FromPort": 14444,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-glnificlientid",
        "ToPort": 14444,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from sg-glnificlientid:tcp PORT 8444",
        "FromPort": 8444,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-glnificlientid",
        "ToPort": 8444,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructeksclusterClusterSecurityGroup891F0126:ALL TRAFFIC",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "ClusterSecurityGroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest1nifisg30149961:10001",
        "FromPort": 10001,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": 10001,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest1nifisg30149961:8444",
        "FromPort": 8444,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": 8444,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Self-Ref",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main-test2/security-group/nifi/id",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Cmd": [
          "delete",
          "pod",
          "-l",
          "app=nifi",
        ],
        "ExecutionKey": "3afb103acb9f9cffd949343081eaeedcf634c6f1",
        "Namespace": "nifi-test2",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
          ],
        },
        "TimeoutSeconds": 300,
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "",
        "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-pr--2df28d38",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "acm-pca:DescribeCertificateAuthority",
                "acm-pca:GetCertificate",
                "acm-pca:IssueCertificate",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:acm-pca:test-region:test-account:certificate-authority/test-acm-pca-id",
              "Sid": "awspcaissuer",
            },
          ],
          "Version": "2012-10-17",
        },
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringLike": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Value",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-pr--2df28d38",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Value": {
          "Fn::Join": [
            "",
            [
              "{"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":aud":"sts.amazonaws.com","",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":sub":"system:serviceaccount:cert-manager:*"}",
            ],
          ],
        },
      },
      "Type": "Custom::AWSCDKCfnJson",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SMG4",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "HIPAA.Security-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
          ],
        },
      },
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": "'",
          "ExcludePunctuation": true,
        },
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "Name": "test-org-test-env-test-domain-test-nificluster-main-registry-admin-creds-secret",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:403:25] Access Point Names not known at deployment time. Permissions restricted by condition.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "",
        "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-re--1a74f77e",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "elasticfilesystem:DescribeAccessPoints",
                "elasticfilesystem:DescribeMountTargets",
                "elasticfilesystem:DescribeFileSystems",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":elasticfilesystem:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":access-point/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
              ],
              "Sid": "AllowDescribeEFS",
            },
            {
              "Action": "ec2:DescribeAvailabilityZones",
              "Effect": "Allow",
              "Resource": "*",
              "Sid": "AllowDescribeAz",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncryptFrom",
                "kms:ReEncryptTo",
                "kms:GenerateDataKey",
                "kms:GenerateDataKeyWithoutPlaintext",
                "kms:GenerateDataKeyPair",
                "kms:GenerateDataKeyPairWithoutPlaintext",
                "kms:CreateGrant",
                "kms:DescribeKey",
                "kms:ListAliases",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "Sid": "AllowEfsKms",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/registry-efs-sg",
        "GroupName": "test-org-test-env-test-domain-test-nificluster-main-registry-efs",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "test-vpc-id",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "from ",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
              ":tcp PORT 2049",
            ],
          ],
        },
        "FromPort": 2049,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "from sg-glefsclientid:tcp PORT 2049",
        "FromPort": 2049,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-glefsclientid",
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Self-Ref",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/security-group/registry-efs/id",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "",
        "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-reg-225ba957",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "Sid": "KmsDecrypt",
            },
            {
              "Action": "SecretsManager:GetSecretValue",
              "Effect": "Allow",
              "Resource": [
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              ],
              "Sid": "GetSecretValue",
            },
          ],
          "Version": "2012-10-17",
        },
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringLike": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Value",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-reg-225ba957",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Value": {
          "Fn::Join": [
            "",
            [
              "{"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":aud":"sts.amazonaws.com","",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":sub":"system:serviceaccount:registry:*"}",
            ],
          ],
        },
      },
      "Type": "Custom::AWSCDKCfnJson",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SMG4",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "HIPAA.Security-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
          ],
        },
      },
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": "'",
          "ExcludePunctuation": true,
        },
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "Name": "test-org-test-env-test-domain-test-nificluster-main-registry-keystore-password",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AccessPointTags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
          {
            "Key": "Name",
            "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/registry-pv-ap-0",
          },
        ],
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "PosixUser": {
          "Gid": "1000",
          "Uid": "1000",
        },
        "RootDirectory": {
          "CreationInfo": {
            "OwnerGid": "1000",
            "OwnerUid": "1000",
            "Permissions": "750",
          },
          "Path": "/registry/0",
        },
      },
      "Type": "AWS::EFS::AccessPoint",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringLike": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Value",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-reg-1854fcb1",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Value": {
          "Fn::Join": [
            "",
            [
              "{"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":aud":"sts.amazonaws.com","",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":sub":"system:serviceaccount:registry:*"}",
            ],
          ],
        },
      },
      "Type": "Custom::AWSCDKCfnJson",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/registry-sg",
        "GroupName": "test-org-test-env-test-domain-test-nificluster-main-registry",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "test-vpc-id",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "CidrIp": "10.10.10.10/24",
        "Description": "from 10.10.10.10/24:tcp PORT 8443",
        "FromPort": 8443,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 8443,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "from ",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
              ":tcp PORT 8443",
            ],
          ],
        },
        "FromPort": 8443,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": 8443,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "from ",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
              ":tcp PORT 8443",
            ],
          ],
        },
        "FromPort": 8443,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": 8443,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from sg-glnificlientid:tcp PORT 8443",
        "FromPort": 8443,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-glnificlientid",
        "ToPort": 8443,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructeksclusterClusterSecurityGroup891F0126:ALL TRAFFIC",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "ClusterSecurityGroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Self-Ref",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/security-group/registry/id",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Cmd": [
          "delete",
          "pod",
          "-l",
          "app=nifi-registry",
        ],
        "ExecutionKey": "2801e4b0834baadbf865ebcbae9ec9999ef08746",
        "Namespace": "registry",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
          ],
        },
        "TimeoutSeconds": 300,
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Properties": {
        "ClusterName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Cmd": [
          "delete",
          "pod",
          "-l",
          "app=zookeeper",
        ],
        "ExecutionKey": "568df675a5e16f9dbcd2e8f9b6bca531933b02c0",
        "Namespace": "zookeeper",
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.testorgtestenvtestdomaintestnificlustermainCompliantKubectlProviderframeworkonEventFA749FACArn",
          ],
        },
        "TimeoutSeconds": 300,
      },
      "Type": "Custom::AWSCDK-EKS-KubernetesCmd",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "",
        "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-zk--6ff9030b",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "Sid": "KmsDecrypt",
            },
            {
              "Action": "SecretsManager:GetSecretValue",
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "Sid": "GetSecretValue",
            },
          ],
          "Version": "2012-10-17",
        },
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringLike": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Value",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-zk--6ff9030b",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Value": {
          "Fn::Join": [
            "",
            [
              "{"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":aud":"sts.amazonaws.com","",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "OpenIdConnectIssuer",
                ],
              },
              ":sub":"system:serviceaccount:zookeeper:*"}",
            ],
          ],
        },
      },
      "Type": "Custom::AWSCDKCfnJson",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SMG4",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "HIPAA.Security-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
            {
              "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:474:25] Nifi does not support rotation of this secret",
            },
          ],
        },
      },
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": "'",
          "ExcludePunctuation": true,
        },
        "KmsKeyId": {
          "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "Name": "test-org-test-env-test-domain-test-nificluster-main-zk-keystore-password",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AccessPointTags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
          {
            "Key": "Name",
            "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/zk-pv-ap-0",
          },
        ],
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "PosixUser": {
          "Gid": "1000",
          "Uid": "1000",
        },
        "RootDirectory": {
          "CreationInfo": {
            "OwnerGid": "1000",
            "OwnerUid": "1000",
            "Permissions": "750",
          },
          "Path": "/zk/0",
        },
      },
      "Type": "AWS::EFS::AccessPoint",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AccessPointTags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
          {
            "Key": "Name",
            "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/zk-pv-ap-1",
          },
        ],
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "PosixUser": {
          "Gid": "1000",
          "Uid": "1000",
        },
        "RootDirectory": {
          "CreationInfo": {
            "OwnerGid": "1000",
            "OwnerUid": "1000",
            "Permissions": "750",
          },
          "Path": "/zk/1",
        },
      },
      "Type": "AWS::EFS::AccessPoint",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "AccessPointTags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
          {
            "Key": "Name",
            "Value": "test-org-test-env-test-domain-test-nificluster-main/construct/zk-pv-ap-2",
          },
        ],
        "FileSystemId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "PosixUser": {
          "Gid": "1000",
          "Uid": "1000",
        },
        "RootDirectory": {
          "CreationInfo": {
            "OwnerGid": "1000",
            "OwnerUid": "1000",
            "Permissions": "750",
          },
          "Path": "/zk/2",
        },
      },
      "Type": "AWS::EFS::AccessPoint",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/zk-sg",
        "GroupName": "test-org-test-env-test-domain-test-nificluster-main-zk",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "test-vpc-id",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from sg-kubectlclientid:tcp PORT 443",
        "FromPort": 443,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-kubectlclientid",
        "ToPort": 443,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructeksclusterClusterSecurityGroup891F0126:ALL TRAFFIC",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "ClusterSecurityGroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest1nifisg30149961:2181",
        "FromPort": 2181,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": 2181,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestnificlustermainconstructnificlustertest2nifisg65E78910:2181",
        "FromPort": 2181,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": 2181,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Self-Ref",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[MDAA:@aws-mdaa/eks-constructs/lib/cluster.ts:788:27] Unrestricted traffic is required between cluster and pods.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/security-group/zk/id",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/dataops/dataops-nifi-l3-construct/lib/nifi-cluster.ts:403:25] Access Point Names not known at deployment time. Permissions restricted by condition.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "",
        "ManagedPolicyName": "test-org-test-env-test-domain-test-nificluster-main-zo--7de34633",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "elasticfilesystem:DescribeAccessPoints",
                "elasticfilesystem:DescribeMountTargets",
                "elasticfilesystem:DescribeFileSystems",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":elasticfilesystem:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":access-point/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":elasticfilesystem:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":access-point/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":elasticfilesystem:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":access-point/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
              ],
              "Sid": "AllowDescribeEFS",
            },
            {
              "Action": "ec2:DescribeAvailabilityZones",
              "Effect": "Allow",
              "Resource": "*",
              "Sid": "AllowDescribeAz",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncryptFrom",
                "kms:ReEncryptTo",
                "kms:GenerateDataKey",
                "kms:GenerateDataKeyWithoutPlaintext",
                "kms:GenerateDataKeyPair",
                "kms:GenerateDataKeyPairWithoutPlaintext",
                "kms:CreateGrant",
                "kms:DescribeKey",
                "kms:ListAliases",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "SsmParameterValuetestorgtestdomaindataopsprojecttestkmsArndefaultC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "Sid": "AllowEfsKms",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "GroupDescription": "test-org-test-env-test-domain-test-nificluster-main/construct/zookeeper-efs-sg",
        "GroupName": "test-org-test-env-test-domain-test-nificluster-main-zookeeper-efs",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "test-vpc-id",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "from ",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
              ":tcp PORT 2049",
            ],
          ],
        },
        "FromPort": 2049,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "from sg-glefsclientid:tcp PORT 2049",
        "FromPort": 2049,
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-glefsclientid",
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "HIPAA.Security-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
            {
              "id": "PCI.DSS.321-EC2RestrictedCommonPorts",
              "reason": "[CONFIG:test-config.yaml] Ingress/Egress is limited to this security group",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Self-Ref",
        "GroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/security-group/zookeeper-efs/id",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Environment": {
          "Variables": {
            "LOG_LEVEL": "INFO",
            "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-nificluster-main-ec--3e8248bf",
        "Handler": "volume_check.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": "python3.13",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/lambda/ec2volumeencryptioncheck-handler/arn",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-nificluster-main/lambda/ec2volumeencryptioncheck-handler/name",
        "Tags": {
          "mdaa_cdk_app": "dataops-nifi",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-nificluster-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:72:27] Function is for custom resource; inline policy use appropriate",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:72:27] Function is for custom resource; inline policy use appropriate",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:72:27] Function is for custom resource; inline policy use appropriate",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:72:27] ec2:DescribeImages and ec2:DescribeVolumes do not accept a resource",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeVolumes",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "Ec2VolumeEncryptionCheck-handler",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-ec--3e8248bf",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-nificluster-main-ec--3e8248bf*",
                  ],
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-nificluster-main-ec--3e8248bf*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Lambda function Runtime set by CDK Provider Framework",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (test-org-test-env-test-domain-test-nificluster-main/custom-Ec2VolumeEncryptionCheck-provider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-nificluster-main-ec2-333da4da",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "CR Role",
        "RoleName": "test-org-test-env-test-domain-test-nificluster-main-ec2-333da4da",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "dataops-nifi",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-nificluster-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-nificluster-main-ec2-333da4da*",
                  ],
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-nificluster-main-ec2-333da4da*",
                  ],
                ],
              },
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:GetFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
