// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GAIA Snapshot Tests GAIA App App Snapshot Test 1`] = `
{
  "test-org-test-env-test-domain-test-gaia-app": {
    "Description": "(SO0320-gaia) Modern Data Architecture Accelerator. Version 1.0.0",
    "Mappings": {
      "LatestNodeRuntimeMap": {
        "af-south-1": {
          "value": "nodejs22.x",
        },
        "ap-east-1": {
          "value": "nodejs22.x",
        },
        "ap-east-2": {
          "value": "nodejs22.x",
        },
        "ap-northeast-1": {
          "value": "nodejs22.x",
        },
        "ap-northeast-2": {
          "value": "nodejs22.x",
        },
        "ap-northeast-3": {
          "value": "nodejs22.x",
        },
        "ap-south-1": {
          "value": "nodejs22.x",
        },
        "ap-south-2": {
          "value": "nodejs22.x",
        },
        "ap-southeast-1": {
          "value": "nodejs22.x",
        },
        "ap-southeast-2": {
          "value": "nodejs22.x",
        },
        "ap-southeast-3": {
          "value": "nodejs22.x",
        },
        "ap-southeast-4": {
          "value": "nodejs22.x",
        },
        "ap-southeast-5": {
          "value": "nodejs22.x",
        },
        "ap-southeast-7": {
          "value": "nodejs22.x",
        },
        "ca-central-1": {
          "value": "nodejs22.x",
        },
        "ca-west-1": {
          "value": "nodejs22.x",
        },
        "cn-north-1": {
          "value": "nodejs22.x",
        },
        "cn-northwest-1": {
          "value": "nodejs22.x",
        },
        "eu-central-1": {
          "value": "nodejs22.x",
        },
        "eu-central-2": {
          "value": "nodejs22.x",
        },
        "eu-isoe-west-1": {
          "value": "nodejs18.x",
        },
        "eu-north-1": {
          "value": "nodejs22.x",
        },
        "eu-south-1": {
          "value": "nodejs22.x",
        },
        "eu-south-2": {
          "value": "nodejs22.x",
        },
        "eu-west-1": {
          "value": "nodejs22.x",
        },
        "eu-west-2": {
          "value": "nodejs22.x",
        },
        "eu-west-3": {
          "value": "nodejs22.x",
        },
        "il-central-1": {
          "value": "nodejs22.x",
        },
        "me-central-1": {
          "value": "nodejs22.x",
        },
        "me-south-1": {
          "value": "nodejs22.x",
        },
        "mx-central-1": {
          "value": "nodejs22.x",
        },
        "sa-east-1": {
          "value": "nodejs22.x",
        },
        "us-east-1": {
          "value": "nodejs22.x",
        },
        "us-east-2": {
          "value": "nodejs22.x",
        },
        "us-gov-east-1": {
          "value": "nodejs22.x",
        },
        "us-gov-west-1": {
          "value": "nodejs22.x",
        },
        "us-iso-east-1": {
          "value": "nodejs18.x",
        },
        "us-iso-west-1": {
          "value": "nodejs18.x",
        },
        "us-isob-east-1": {
          "value": "nodejs18.x",
        },
        "us-isob-west-1": {
          "value": "nodejs18.x",
        },
        "us-west-1": {
          "value": "nodejs22.x",
        },
        "us-west-2": {
          "value": "nodejs22.x",
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "aws": {
          "applicationId": arn:aws:serverlessrepo:us-east-1:REPLACED-ACCOUNT-ID:applications/SecretsManagerRDSPostgreSQLRotationSingleUser,
          "semanticVersion": "1.1.367",
        },
        "aws-cn": {
          "applicationId": arn:aws-cn:serverlessrepo:cn-north-1:REPLACED-ACCOUNT-ID:applications/SecretsManagerRDSPostgreSQLRotationSingleUser,
          "semanticVersion": "1.1.237",
        },
        "aws-us-gov": {
          "applicationId": arn:aws-us-gov:serverlessrepo:us-gov-west-1:REPLACED-ACCOUNT-ID:applications/SecretsManagerRDSPostgreSQLRotationSingleUser,
          "semanticVersion": "1.1.213",
        },
      },
    },
    "Outputs": {
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-gaia-app:lambda:databasesetupfunctionhandler:arn",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-gaia-app:lambda:databasesetupfunctionhandler:name",
        },
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Value": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Ref": "AWS::Region",
              },
              ".console.aws.amazon.com/cognito/v2/idp/user-pools/",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "/users?region=",
              {
                "Ref": "AWS::Region",
              },
            ],
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Value": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              ".execute-api.",
              {
                "Ref": "AWS::Region",
              },
              ".",
              {
                "Ref": "AWS::URLSuffix",
              },
              "/",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "/",
            ],
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-gaia-app:role:genaiadminbackendrestapicloudwatch:arn",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-gaia-app:role:genaiadminbackendrestapicloudwatch:id",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "RoleId",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-gaia-app:role:genaiadminbackendrestapicloudwatch:name",
        },
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-gaia-app:role:testclusterenhancedmonitoringrole:arn",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-gaia-app:role:testclusterenhancedmonitoringrole:id",
        },
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "RoleId",
          ],
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Export": {
          "Name": "test-org:test-domain:test-gaia-app:role:testclusterenhancedmonitoringrole:name",
        },
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Value": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              ":",
                              {
                                "Ref": "REPLACED-CFN-LOGICAL-ID",
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              {
                "Fn::Select": [
                  1,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          6,
                          {
                            "Fn::Split": [
                              ":",
                              {
                                "Ref": "REPLACED-CFN-LOGICAL-ID",
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
      },
    },
    "Parameters": {
      "BootstrapVersion": {
        "Default": "/cdk-bootstrap/hnb659fds/version",
        "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
        "Type": "AWS::SSM::Parameter::Value<String>",
      },
      "SsmParameterValuetestorgtestdomaincaefbootstraprolehelperservicetokenC96584B6F00A464EAD1953AFF4B05118Parameter": {
        "Default": "/test-org/test-domain/caef-bootstrap/role-helper-service-token",
        "Type": "AWS::SSM::Parameter::Value<String>",
      },
    },
    "Resources": {
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
            ],
          },
        },
        "Properties": {
          "Code": {
            "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client("s3")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

def handler(event: dict, context):
  response_status = "SUCCESS"
  error_message = ""
  try:
    props = event["ResourceProperties"]
    notification_configuration = props["NotificationConfiguration"]
    managed = props.get('Managed', 'true').lower() == 'true'
    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'
    stack_id = event['StackId']
    old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
    if managed:
      config = handle_managed(event["RequestType"], notification_configuration)
    else:
      config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
    s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)
  except Exception as e:
    logging.exception("Failed to put bucket notification configuration")
    response_status = "FAILED"
    error_message = f"Error: {str(e)}. "
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
  def get_id(n):
    n['Id'] = ''
    sorted_notifications = sort_filter_rules(n)
    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('"Name": "prefix"', '"Name": "Prefix"').replace('"Name": "suffix"', '"Name": "Suffix"')
    return f"{stack_id}-{hash(strToHash)}"
  def with_id(n):
    n['Id'] = get_id(n)
    return n

  external_notifications = {}
  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
  for t in CONFIGURATION_TYPES:
    if request_type == 'Update':
        old_incoming_ids = [get_id(n) for n in old.get(t, [])]
        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      
    elif request_type == 'Delete':
        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]
    elif request_type == 'Create':
        external_notifications[t] = [n for n in existing_notifications.get(t, [])]
  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  if request_type == 'Delete':
    return external_notifications

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      "Status": response_status,
      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
      "StackId": event["StackId"],
      "RequestId": event["RequestId"],
      "LogicalResourceId": event["LogicalResourceId"],
      "NoEcho": False,
    }
  ).encode("utf-8")
  headers = {"content-type": "", "content-length": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode("utf-8"))
    print("Status code: " + response.reason)
  except Exception as e:
      print("send(..) failed executing request.urlopen(..): " + str(e))

def sort_filter_rules(json_obj):
  if not isinstance(json_obj, dict):
      return json_obj
  for key, value in json_obj.items():
      if isinstance(value, dict):
          json_obj[key] = sort_filter_rules(value)
      elif isinstance(value, list):
          json_obj[key] = [sort_filter_rules(item) for item in value]
  if "Filter" in json_obj and "Key" in json_obj["Filter"] and "FilterRules" in json_obj["Filter"]["Key"]:
      filter_rules = json_obj["Filter"]["Key"]["FilterRules"]
      sorted_filter_rules = sorted(filter_rules, key=lambda x: x["Name"])
      json_obj["Filter"]["Key"]["FilterRules"] = sorted_filter_rules
  return json_obj",
          },
          "Description": "AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)",
          "Handler": "index.handler",
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": "python3.11",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 300,
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                ],
              ],
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "s3:PutBucketNotification",
                "Effect": "Allow",
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Properties": {
          "Description": "Stack description parameter to update on version changes",
          "Name": "/test-org/test-domain/test-gaia-app/aws-solution",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": "(SO0320-gaia) Modern Data Architecture Accelerator. Version 1.0.0",
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
            ],
          },
        },
        "Properties": {
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Environment": {
            "Variables": {
              "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-gaia-app-databaseset-5e3f57a6",
          "Handler": "index.lambda_handler",
          "Layers": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":lambda:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
                ],
              ],
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": "python3.12",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 60,
          "VpcConfig": {
            "SecurityGroupIds": [
              "sg-46576878787",
            ],
            "SubnetIds": [
              "subnet2",
            ],
          },
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/lambda/databasesetupfunction-handler/arn",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/lambda/databasesetupfunction-handler/name",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:72:27] Function is for custom resource; inline policy use appropriate",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:72:27] Function is for custom resource; inline policy use appropriate",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:72:27] Function is for custom resource; inline policy use appropriate",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "secretsmanager:GetResourcePolicy",
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:DescribeSecret",
                  "secretsmanager:ListSecretVersionIds",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": "kms:Decrypt",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "DatabaseSetupFunction-handler",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-databaseset-5e3f57a6",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-databaseset-5e3f57a6*",
                    ],
                  ],
                },
              },
              {
                "Action": "logs:CreateLogGroup",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-databaseset-5e3f57a6*",
                    ],
                  ],
                },
              },
              {
                "Action": "rds-db:connect",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":rds-db:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":dbuser:",
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "DBClusterResourceId",
                        ],
                      },
                      "/postgres",
                    ],
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Lambda function Runtime set by CDK Provider Framework",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and error handling will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
            ],
          },
        },
        "Properties": {
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Description": "AWS CDK resource provider framework - onEvent (test-org-test-env-test-domain-test-gaia-app/custom-DatabaseSetupFunction-provider)",
          "Environment": {
            "Variables": {
              "USER_ON_EVENT_FUNCTION_ARN": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-gaia-app-databaseset-2eb01115",
          "Handler": "framework.onEvent",
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": {
            "Fn::FindInMap": [
              "LatestNodeRuntimeMap",
              {
                "Ref": "AWS::Region",
              },
              "value",
            ],
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 900,
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "Description": "CR Role",
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-databaseset-2eb01115",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-databaseset-2eb01115*",
                    ],
                  ],
                },
              },
              {
                "Action": "logs:CreateLogGroup",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-databaseset-2eb01115*",
                    ],
                  ],
                },
              },
              {
                "Action": "lambda:InvokeFunction",
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        ":*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": "lambda:GetFunction",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AllowUnauthenticatedIdentities": false,
          "CognitoIdentityProviders": [
            {
              "ClientId": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "ProviderName": {
                "Fn::Join": [
                  "",
                  [
                    "cognito-idp.",
                    {
                      "Ref": "AWS::Region",
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix",
                    },
                    "/",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  ],
                ],
              },
              "ServerSideTokenCheck": true,
            },
          ],
          "IdentityPoolName": "test-org-test-env-test-domain-test-gaia-app",
          "IdentityPoolTags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::Cognito::IdentityPool",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "ForAnyValue:StringLike": {
                    "cognito-identity.amazonaws.com:amr": "authenticated",
                  },
                  "StringEquals": {
                    "cognito-identity.amazonaws.com:aud": {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Federated": "cognito-identity.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "Description": {
            "Fn::Join": [
              "",
              [
                "Default Authenticated Role for Identity Pool ",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Name",
                  ],
                },
              ],
            ],
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "IdentityPoolId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Roles": {
            "authenticated": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "unauthenticated": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
          },
        },
        "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/auth/cognito/identity/pool/id",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "ForAnyValue:StringLike": {
                    "cognito-identity.amazonaws.com:amr": "unauthenticated",
                  },
                  "StringEquals": {
                    "cognito-identity.amazonaws.com:aud": {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Federated": "cognito-identity.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "Description": {
            "Fn::Join": [
              "",
              [
                "Default Unauthenticated Role for Identity Pool ",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Name",
                  ],
                },
              ],
            ],
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Resource::*",
                ],
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Default SMS Role created by UserPool, resource not known at deployment time and not used",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AccountRecoverySetting": {
            "RecoveryMechanisms": [
              {
                "Name": "verified_phone_number",
                "Priority": 1,
              },
              {
                "Name": "verified_email",
                "Priority": 2,
              },
            ],
          },
          "AdminCreateUserConfig": {
            "AllowAdminCreateUserOnly": true,
          },
          "AutoVerifiedAttributes": [
            "email",
            "phone_number",
          ],
          "EmailVerificationMessage": "The verification code to your new account is {####}",
          "EmailVerificationSubject": "Verify your new account",
          "Policies": {
            "PasswordPolicy": {
              "MinimumLength": 8,
              "RequireLowercase": true,
              "RequireNumbers": true,
              "RequireSymbols": true,
              "RequireUppercase": true,
            },
          },
          "SmsConfiguration": {
            "ExternalId": "REPLACED-CFN-LOGICAL-ID",
            "SnsCallerArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
          },
          "SmsVerificationMessage": "The verification code to your new account is {####}",
          "UserPoolAddOns": {
            "AdvancedSecurityMode": "ENFORCED",
          },
          "UserPoolName": "test-org-test-env-test-domain-test-gaia-app",
          "UserPoolTags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "UserPoolTier": "PLUS",
          "UsernameAttributes": [
            "email",
          ],
          "VerificationMessageTemplate": {
            "DefaultEmailOption": "CONFIRM_WITH_CODE",
            "EmailMessage": "The verification code to your new account is {####}",
            "EmailSubject": "Verify your new account",
            "SmsMessage": "The verification code to your new account is {####}",
          },
        },
        "Type": "AWS::Cognito::UserPool",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/auth/cognito/user/pool/domain",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/auth/cognito/user/pool/id",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Resource::*",
                ],
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Default SMS Role created by UserPool, resource not known at deployment time and not used",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AllowedOAuthFlows": [
            "implicit",
            "code",
          ],
          "AllowedOAuthFlowsUserPoolClient": true,
          "AllowedOAuthScopes": [
            "profile",
            "phone",
            "email",
            "openid",
            "aws.cognito.signin.user.admin",
          ],
          "CallbackURLs": [
            "https://example.com",
          ],
          "ExplicitAuthFlows": [
            "ALLOW_USER_PASSWORD_AUTH",
            "ALLOW_ADMIN_USER_PASSWORD_AUTH",
            "ALLOW_USER_SRP_AUTH",
            "ALLOW_REFRESH_TOKEN_AUTH",
          ],
          "GenerateSecret": false,
          "SupportedIdentityProviders": [
            "COGNITO",
          ],
          "UserPoolId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::Cognito::UserPoolClient",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Resource::*",
                ],
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Default SMS Role created by UserPool, resource not known at deployment time and not used",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Domain": "some-unique-pool-domain-name",
          "UserPoolId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::Cognito::UserPoolDomain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/auth/cognito/user/pool/client/id",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Resource::*",
                ],
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Default SMS Role created by UserPool, resource not known at deployment time and not used",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Condition": {
                  "StringEquals": {
                    "sts:ExternalId": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Service": "cognito-idp.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "Policies": [
            {
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "sns:Publish",
                    "Effect": "Allow",
                    "Resource": "*",
                  },
                ],
                "Version": "2012-10-17",
              },
              "PolicyName": "sns-publish",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-S1",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "NIST.800.53.R5-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "HIPAA.Security-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "PCI.DSS.321-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "NIST.800.53.R5-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/index.ts:55:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "HIPAA.Security-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/index.ts:55:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "PCI.DSS.321-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/index.ts:55:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AccelerateConfiguration": {
            "AccelerationStatus": "Enabled",
          },
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "BucketKeyEnabled": true,
                "ServerSideEncryptionByDefault": {
                  "KMSMasterKeyID": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  "SSEAlgorithm": "aws:kms",
                },
              },
            ],
          },
          "BucketName": "test-org-test-env-test-domain-test-gaia-app-test-org-te-f3d177b",
          "PublicAccessBlockConfiguration": {
            "BlockPublicAcls": true,
            "BlockPublicPolicy": true,
            "IgnorePublicAcls": true,
            "RestrictPublicBuckets": true,
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VersioningConfiguration": {
            "Status": "Enabled",
          },
        },
        "Type": "AWS::S3::Bucket",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-S1",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "NIST.800.53.R5-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "HIPAA.Security-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "PCI.DSS.321-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "NIST.800.53.R5-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/index.ts:55:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "HIPAA.Security-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/index.ts:55:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "PCI.DSS.321-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/index.ts:55:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Bucket": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "s3:*",
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": "s3:PutObject",
                "Condition": {
                  "StringEquals": {
                    "s3:x-amz-server-side-encryption": "AES256",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                "Sid": "DenyAES",
              },
              {
                "Action": "s3:PutObject",
                "Condition": {
                  "StringNotLikeIfExists": {
                    "s3:x-amz-server-side-encryption-aws-kms-key-id": {
                      "Fn::GetAtt": [
                        "REPLACED-CFN-LOGICAL-ID",
                        "Arn",
                      ],
                    },
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                "Sid": "ForceKMS",
              },
            ],
            "Version": "2012-10-17",
          },
        },
        "Type": "AWS::S3::BucketPolicy",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "HIPAA.Security-DynamoDBInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
              },
              {
                "id": "PCI.DSS.321-DynamoDBInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
              },
              {
                "id": "NIST.800.53.R5-DynamoDBInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
              },
              {
                "id": "NIST.800.53.R5-DynamoDBAutoScalingEnabled",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
              },
              {
                "id": "HIPAA.Security-DynamoDBAutoScalingEnabled",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
              },
              {
                "id": "PCI.DSS.321-DynamoDBAutoScalingEnabled",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AttributeDefinitions": [
            {
              "AttributeName": "SessionId",
              "AttributeType": "S",
            },
            {
              "AttributeName": "UserId",
              "AttributeType": "S",
            },
          ],
          "BillingMode": "PAY_PER_REQUEST",
          "DeletionProtectionEnabled": true,
          "GlobalSecondaryIndexes": [
            {
              "IndexName": "byUserId",
              "KeySchema": [
                {
                  "AttributeName": "UserId",
                  "KeyType": "HASH",
                },
              ],
              "Projection": {
                "ProjectionType": "ALL",
              },
            },
          ],
          "KeySchema": [
            {
              "AttributeName": "SessionId",
              "KeyType": "HASH",
            },
            {
              "AttributeName": "UserId",
              "KeyType": "RANGE",
            },
          ],
          "PointInTimeRecoverySpecification": {
            "PointInTimeRecoveryEnabled": true,
          },
          "SSESpecification": {
            "KMSMasterKeyId": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "SSEEnabled": true,
            "SSEType": "KMS",
          },
          "TableName": "test-org-test-env-test-domain-test-gaia-app-test-org-test-env-test-domain-test-gaia-app-sessions",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::DynamoDB::Table",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/table/sessions/name",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked synchronously.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Architectures": [
            "x86_64",
          ],
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Environment": {
            "Variables": {
              "API_KEYS_SECRETS_ARN": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "AURORA_DB_SECRET_ID": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "COGNITO_APP_CLIENT_ID": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "COGNITO_REGION": {
                "Ref": "AWS::Region",
              },
              "COGNITO_USER_POOL_ID": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "CONFIG_PARAMETER_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "CORS_ALLOWED_ORIGINS": "*",
              "CREATE_AURORA_WORKSPACE_WORKFLOW_ARN": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "CREATE_KENDRA_WORKSPACE_WORKFLOW_ARN": "",
              "DEFAULT_KENDRA_INDEX_ID": "",
              "DEFAULT_KENDRA_INDEX_NAME": "",
              "DEFAULT_KENDRA_S3_DATA_SOURCE_BUCKET_NAME": "",
              "DEFAULT_KENDRA_S3_DATA_SOURCE_ID": "",
              "DELETE_WORKSPACE_WORKFLOW_ARN": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME": "by_compound_key_idx",
              "DOCUMENTS_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "FILE_IMPORT_WORKFLOW_ARN": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "LOG_LEVEL": "INFO",
              "MODELS_PARAMETER_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "POWERTOOLS_DEV": "true",
              "POWERTOOLS_LOGGER_LOG_EVENT": "true",
              "POWERTOOLS_METRICS_NAMESPACE": "chatbot-admin-restapi",
              "POWERTOOLS_SERVICE_NAME": "chatbot",
              "PROCESSING_BUCKET_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "SAGEMAKER_RAG_MODELS_ENDPOINT": "",
              "SESSIONS_BY_USER_ID_INDEX_NAME": "byUserId",
              "SESSIONS_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "UPLOAD_BUCKET_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
              "WEBSITE_CRAWLING_WORKFLOW_ARN": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME": "by_object_type_idx",
              "WORKSPACES_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "X_ORIGIN_VERIFY_SECRET_ARN": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-gaia-app-rest-api-handler",
          "Handler": "index.handler",
          "Layers": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":lambda:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
                ],
              ],
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
          "MemorySize": 512,
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": "python3.12",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 600,
          "TracingConfig": {
            "Mode": "Active",
          },
          "VpcConfig": {
            "SecurityGroupIds": [
              "sg-12345351356",
            ],
            "SubnetIds": [
              "subnet1",
            ],
          },
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Standard Lambda Execution Managed Policy",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] X-Ray and Comprehend actions only support wildcard, and bedrock foundation models access controlled by application along with region restriction, other resources managed by stack and not known at deployment time",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/AWSLambdaExecute",
                ],
              ],
            },
          ],
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-backendres--2b357243",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Standard Lambda Execution Managed Policy",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] X-Ray and Comprehend actions only support wildcard, and bedrock foundation models access controlled by application along with region restriction, other resources managed by stack and not known at deployment time",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-rest-api-handler*",
                    ],
                  ],
                },
              },
              {
                "Action": "logs:CreateLogGroup",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-rest-api-handler*",
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:DescribeSecret",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": "states:StartExecution",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": "states:StartExecution",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": "states:StartExecution",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": "states:StartExecution",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "comprehend:DetectDominantLanguage",
                  "comprehend:DetectSentiment",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:DescribeSecret",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:DescribeSecret",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "ssm:DescribeParameters",
                  "ssm:GetParameters",
                  "ssm:GetParameter",
                  "ssm:GetParameterHistory",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "ssm:DescribeParameters",
                  "ssm:GetParameters",
                  "ssm:GetParameter",
                  "ssm:GetParameterHistory",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*",
                  "s3:DeleteObject*",
                  "s3:PutObject",
                  "s3:PutObjectLegalHold",
                  "s3:PutObjectRetention",
                  "s3:PutObjectTagging",
                  "s3:PutObjectVersionTagging",
                  "s3:Abort*",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*",
                  "s3:DeleteObject*",
                  "s3:PutObject",
                  "s3:PutObjectLegalHold",
                  "s3:PutObjectRetention",
                  "s3:PutObjectTagging",
                  "s3:PutObjectVersionTagging",
                  "s3:Abort*",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "bedrock:ListFoundationModels",
                  "bedrock:ListCustomModels",
                  "bedrock:InvokeModelWithResponseStream",
                  "bedrock:ListAgents",
                  "bedrock:ListAgentAliases",
                  "bedrock:ListKnowledgeBases",
                  "bedrock:GetKnowledgeBase",
                  "bedrock:ListDataSources",
                  "bedrock:GetDataSource",
                  "bedrock:StartIngestionJob",
                  "bedrock:StopIngestionJob",
                  "bedrock:ListIngestionJobs",
                ],
                "Condition": {
                  "StringEquals": {
                    "aws:RequestedRegion": "ca-central-1",
                  },
                },
                "Effect": "Allow",
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Standard Lambda Execution Managed Policy",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] X-Ray and Comprehend actions only support wildcard, and bedrock foundation models access controlled by application along with region restriction, other resources managed by stack and not known at deployment time",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/backendrestapihandlerrole/arn",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Standard Lambda Execution Managed Policy",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] X-Ray and Comprehend actions only support wildcard, and bedrock foundation models access controlled by application along with region restriction, other resources managed by stack and not known at deployment time",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/backendrestapihandlerrole/id",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "RoleId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Standard Lambda Execution Managed Policy",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] X-Ray and Comprehend actions only support wildcard, and bedrock foundation models access controlled by application along with region restriction, other resources managed by stack and not known at deployment time",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/backendrestapihandlerrole/name",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked synchronously.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/lambda/rest-api-handler/arn",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked synchronously.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/lambda/rest-api-handler/name",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-APIGWAssociatedWithWAF",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
              },
              {
                "id": "PCI.DSS.321-APIGWAssociatedWithWAF",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
              },
              {
                "id": "AwsSolutions-APIG3",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
              },
              {
                "id": "NIST.800.53.R5-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "HIPAA.Security-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "PCI.DSS.321-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-COG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "EndpointConfiguration": {
            "Types": [
              "REGIONAL",
            ],
          },
          "Name": "ChatBotApi",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::ApiGateway::RestApi",
      },
      "gaiaChatBotApiRestApiChatBotApiDeploymentF6C05B7537ba1e6b3d242cd0247cfa1f3faf8967": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-APIGWAssociatedWithWAF",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
              },
              {
                "id": "PCI.DSS.321-APIGWAssociatedWithWAF",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
              },
              {
                "id": "AwsSolutions-APIG3",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
              },
              {
                "id": "NIST.800.53.R5-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "HIPAA.Security-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "PCI.DSS.321-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-COG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "Automatically created by the RestApi construct",
          "RestApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::ApiGateway::Deployment",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-APIGWAssociatedWithWAF",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
              },
              {
                "id": "PCI.DSS.321-APIGWAssociatedWithWAF",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
              },
              {
                "id": "AwsSolutions-APIG3",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
              },
              {
                "id": "NIST.800.53.R5-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "HIPAA.Security-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "PCI.DSS.321-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-COG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AccessLogSetting": {
            "DestinationArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "Format": "{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","user":"$context.identity.user","caller":"$context.identity.caller","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}",
          },
          "DeploymentId": {
            "Ref": "gaiaChatBotApiRestApiChatBotApiDeploymentF6C05B7537ba1e6b3d242cd0247cfa1f3faf8967",
          },
          "MethodSettings": [
            {
              "DataTraceEnabled": false,
              "HttpMethod": "*",
              "LoggingLevel": "INFO",
              "MetricsEnabled": true,
              "ResourcePath": "/*",
              "ThrottlingRateLimit": 2500,
            },
            {
              "CacheDataEncrypted": false,
              "CachingEnabled": false,
              "DataTraceEnabled": false,
              "HttpMethod": "*",
              "LoggingLevel": "INFO",
              "ResourcePath": "/*",
            },
          ],
          "RestApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "StageName": "api",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "TracingEnabled": true,
        },
        "Type": "AWS::ApiGateway::Stage",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-APIGWAssociatedWithWAF",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
              },
              {
                "id": "PCI.DSS.321-APIGWAssociatedWithWAF",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
              },
              {
                "id": "AwsSolutions-APIG3",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
              },
              {
                "id": "NIST.800.53.R5-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "HIPAA.Security-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "PCI.DSS.321-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-COG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ApiKeyRequired": false,
          "AuthorizationType": "NONE",
          "HttpMethod": "OPTIONS",
          "Integration": {
            "IntegrationResponses": [
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date'",
                  "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                  "method.response.header.Access-Control-Allow-Origin": "'*'",
                  "method.response.header.Access-Control-Max-Age": "'600'",
                },
                "StatusCode": "204",
              },
            ],
            "RequestTemplates": {
              "application/json": "{ statusCode: 200 }",
            },
            "Type": "MOCK",
          },
          "MethodResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": true,
                "method.response.header.Access-Control-Allow-Methods": true,
                "method.response.header.Access-Control-Allow-Origin": true,
                "method.response.header.Access-Control-Max-Age": true,
              },
              "StatusCode": "204",
            },
          ],
          "ResourceId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "RootResourceId",
            ],
          },
          "RestApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::ApiGateway::Method",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "HIPAA.Security-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "PCI.DSS.321-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-COG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ParentId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "RootResourceId",
            ],
          },
          "PathPart": "v1",
          "RestApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::ApiGateway::Resource",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "HIPAA.Security-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "PCI.DSS.321-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-COG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ApiKeyRequired": false,
          "AuthorizationType": "NONE",
          "HttpMethod": "OPTIONS",
          "Integration": {
            "IntegrationResponses": [
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date'",
                  "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                  "method.response.header.Access-Control-Allow-Origin": "'*'",
                  "method.response.header.Access-Control-Max-Age": "'600'",
                },
                "StatusCode": "204",
              },
            ],
            "RequestTemplates": {
              "application/json": "{ statusCode: 200 }",
            },
            "Type": "MOCK",
          },
          "MethodResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": true,
                "method.response.header.Access-Control-Allow-Methods": true,
                "method.response.header.Access-Control-Allow-Origin": true,
                "method.response.header.Access-Control-Max-Age": true,
              },
              "StatusCode": "204",
            },
          ],
          "ResourceId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "RestApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::ApiGateway::Method",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "HIPAA.Security-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "PCI.DSS.321-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-COG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AuthorizationType": "COGNITO_USER_POOLS",
          "AuthorizerId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "HttpMethod": "ANY",
          "Integration": {
            "IntegrationHttpMethod": "POST",
            "Type": "AWS_PROXY",
            "Uri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  "/invocations",
                ],
              ],
            },
          },
          "RequestValidatorId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "ResourceId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "RestApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::ApiGateway::Method",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "HIPAA.Security-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "PCI.DSS.321-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-COG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Action": "lambda:InvokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":execute-api:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "/test-invoke-stage/*/v1/*",
              ],
            ],
          },
        },
        "Type": "AWS::Lambda::Permission",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "HIPAA.Security-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "PCI.DSS.321-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-COG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Action": "lambda:InvokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":execute-api:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "/",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "/*/v1/*",
              ],
            ],
          },
        },
        "Type": "AWS::Lambda::Permission",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "HIPAA.Security-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "PCI.DSS.321-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-COG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ParentId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "PathPart": "{proxy+}",
          "RestApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::ApiGateway::Resource",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "HIPAA.Security-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "PCI.DSS.321-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-COG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ApiKeyRequired": false,
          "AuthorizationType": "NONE",
          "HttpMethod": "OPTIONS",
          "Integration": {
            "IntegrationResponses": [
              {
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date'",
                  "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                  "method.response.header.Access-Control-Allow-Origin": "'*'",
                  "method.response.header.Access-Control-Max-Age": "'600'",
                },
                "StatusCode": "204",
              },
            ],
            "RequestTemplates": {
              "application/json": "{ statusCode: 200 }",
            },
            "Type": "MOCK",
          },
          "MethodResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": true,
                "method.response.header.Access-Control-Allow-Methods": true,
                "method.response.header.Access-Control-Allow-Origin": true,
                "method.response.header.Access-Control-Max-Age": true,
              },
              "StatusCode": "204",
            },
          ],
          "ResourceId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "RestApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::ApiGateway::Method",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "HIPAA.Security-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "PCI.DSS.321-APIGWSSLEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
              },
              {
                "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
              },
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-COG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "RestApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "ValidateRequestBody": true,
          "ValidateRequestParameters": true,
        },
        "Type": "AWS::ApiGateway::RequestValidator",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/rest/api/id",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "CloudWatchRoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::ApiGateway::Account",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:275:27] AmazonAPIGatewayPushToCloudWatchLogs provides the minimum required permissions for API Gateway logging to Cloudwatch: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "apigateway.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
                ],
              ],
            },
          ],
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-genai-admin--8212dc9",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:275:27] AmazonAPIGatewayPushToCloudWatchLogs provides the minimum required permissions for API Gateway logging to Cloudwatch: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/genai-admin-backend-rest-api-cloudwatch/arn",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:275:27] AmazonAPIGatewayPushToCloudWatchLogs provides the minimum required permissions for API Gateway logging to Cloudwatch: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/genai-admin-backend-rest-api-cloudwatch/id",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "RoleId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:275:27] AmazonAPIGatewayPushToCloudWatchLogs provides the minimum required permissions for API Gateway logging to Cloudwatch: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/genai-admin-backend-rest-api-cloudwatch/name",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AuthorizerResultTtlInSeconds": 0,
          "IdentitySource": "method.request.header.Authorization",
          "Name": "test-org-test-env-test-domain-test-gaia-app",
          "ProviderARNs": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
          ],
          "RestApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Type": "COGNITO_USER_POOLS",
        },
        "Type": "AWS::ApiGateway::Authorizer",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "LogGroupName": "testing/test-org-test-env-test-domain-test-gaia-app-genai-admin-backend-rest-api-access-logs",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::Logs::LogGroup",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "WebSocketApi",
          "ProtocolType": "WEBSOCKET",
          "RouteSelectionExpression": "$request.body.action",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
        },
        "Type": "AWS::ApiGatewayV2::Api",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "AuthorizerType": "REQUEST",
          "AuthorizerUri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
          "IdentitySource": [
            "route.request.querystring.token",
          ],
          "Name": "Authorizer",
        },
        "Type": "AWS::ApiGatewayV2::Authorizer",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "HIPAA.Security-DynamoDBInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
              },
              {
                "id": "PCI.DSS.321-DynamoDBInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
              },
              {
                "id": "NIST.800.53.R5-DynamoDBInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
              },
              {
                "id": "NIST.800.53.R5-DynamoDBAutoScalingEnabled",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
              },
              {
                "id": "HIPAA.Security-DynamoDBAutoScalingEnabled",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
              },
              {
                "id": "PCI.DSS.321-DynamoDBAutoScalingEnabled",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AttributeDefinitions": [
            {
              "AttributeName": "connectionId",
              "AttributeType": "S",
            },
            {
              "AttributeName": "userId",
              "AttributeType": "S",
            },
          ],
          "BillingMode": "PAY_PER_REQUEST",
          "DeletionProtectionEnabled": true,
          "GlobalSecondaryIndexes": [
            {
              "IndexName": "byUser",
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH",
                },
              ],
              "Projection": {
                "ProjectionType": "ALL",
              },
            },
          ],
          "KeySchema": [
            {
              "AttributeName": "connectionId",
              "KeyType": "HASH",
            },
          ],
          "PointInTimeRecoverySpecification": {
            "PointInTimeRecoveryEnabled": true,
          },
          "SSESpecification": {
            "KMSMasterKeyId": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "SSEEnabled": true,
            "SSEType": "KMS",
          },
          "TableName": "test-org-test-env-test-domain-test-gaia-app-test-org-test-env-test-domain-test-gaia-app-connections",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::DynamoDB::Table",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/table/test-org-test-env-test-domain-test-gaia-app-connections/arn",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/table/test-org-test-env-test-domain-test-gaia-app-connections/name",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/socket/api/id",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsMasterKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "TopicName": "test-org-test-env-test-domain-test-gaia-app-wesocketmessagestopic",
        },
        "Type": "AWS::SNS::Topic",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "sns:Publish",
                  "sns:RemovePermission",
                  "sns:SetTopicAttributes",
                  "sns:DeleteTopic",
                  "sns:ListSubscriptionsByTopic",
                  "sns:GetTopicAttributes",
                  "sns:Receive",
                  "sns:AddPermission",
                  "sns:Subscribe",
                ],
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": "*",
                "Sid": "EnforceSSL",
              },
            ],
            "Version": "2012-10-17",
          },
          "Topics": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::SNS::TopicPolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/topic/wesocketmessagestopic/arn",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/topic/wesocketmessagestopic/name",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "TopicName",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "LogGroupName": "genai-admin-websocket-api-access-logs-/test-org-test-env-test-domain-test-gaia-app-genai-admin-websocket-api",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::Logs::LogGroup",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AccessLogSettings": {
            "DestinationArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "Format": "{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","connectionId":"$context.connectionId"}",
          },
          "ApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "AutoDeploy": true,
          "StageName": "socket",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
        },
        "Type": "AWS::ApiGatewayV2::Stage",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:468:25] Function is API implementation and will be invoked synchronously.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:468:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:468:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:468:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:468:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:468:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Architectures": [
            "x86_64",
          ],
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Environment": {
            "Variables": {
              "LOG_LEVEL": "INFO",
              "POWERTOOLS_DEV": "true",
              "POWERTOOLS_LOGGER_LOG_EVENT": "true",
              "POWERTOOLS_SERVICE_NAME": "chatbot",
              "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-gaia-app-websocket---74db1ce0",
          "Handler": "index.handler",
          "Layers": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":lambda:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
                ],
              ],
            },
          ],
          "ReservedConcurrentExecutions": 1,
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": "python3.12",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 6,
          "TracingConfig": {
            "Mode": "Active",
          },
          "VpcConfig": {
            "SecurityGroupIds": [
              "sg-12345351356",
            ],
            "SubnetIds": [
              "subnet1",
            ],
          },
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] X-Ray actions only support wildcard.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-websocketa--730ff353",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] X-Ray actions only support wildcard.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-websocket-authorizer*",
                    ],
                  ],
                },
              },
              {
                "Action": "logs:CreateLogGroup",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-websocket-authorizer*",
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": "cognito-idp:GetUser",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:574:25] Function is API implementation and will be invoked synchronously.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:574:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:574:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:574:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:574:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:574:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Architectures": [
            "x86_64",
          ],
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Environment": {
            "Variables": {
              "CONNECTIONS_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "LOG_LEVEL": "INFO",
              "POWERTOOLS_DEV": "true",
              "POWERTOOLS_LOGGER_LOG_EVENT": "true",
              "POWERTOOLS_SERVICE_NAME": "chatbot",
              "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-gaia-app-websocket-c-1fc981d2",
          "Handler": "index.handler",
          "Layers": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":lambda:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
                ],
              ],
            },
          ],
          "ReservedConcurrentExecutions": 1,
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": "python3.12",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 6,
          "TracingConfig": {
            "Mode": "Active",
          },
          "VpcConfig": {
            "SecurityGroupIds": [
              "sg-12345351356",
            ],
            "SubnetIds": [
              "subnet1",
            ],
          },
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] X-Ray actions only support wildcard and log group not known at deployment.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-websocketc--2c9263fc",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] X-Ray actions only support wildcard and log group not known at deployment.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-websocket-connection-handler*",
                    ],
                  ],
                },
              },
              {
                "Action": "logs:CreateLogGroup",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-websocket-connection-handler*",
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:412:25] Function is API implementation and will be invoked synchronously.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:412:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:412:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:412:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:412:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:412:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Architectures": [
            "x86_64",
          ],
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Environment": {
            "Variables": {
              "LOG_LEVEL": "INFO",
              "MESSAGES_TOPIC_ARN": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "POWERTOOLS_DEV": "true",
              "POWERTOOLS_LOGGER_LOG_EVENT": "true",
              "POWERTOOLS_SERVICE_NAME": "chatbot",
              "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
              "WEBSOCKET_API_ENDPOINT": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region",
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix",
                    },
                    "/socket",
                  ],
                ],
              },
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-gaia-app-websocket-i-54d0c114",
          "Handler": "index.handler",
          "Layers": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":lambda:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
                ],
              ],
            },
          ],
          "ReservedConcurrentExecutions": 1,
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": "python3.12",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 6,
          "TracingConfig": {
            "Mode": "Active",
          },
          "VpcConfig": {
            "SecurityGroupIds": [
              "sg-12345351356",
            ],
            "SubnetIds": [
              "subnet1",
            ],
          },
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] X-Ray actions only support wildcard and execute api manage connections restricted to stack api gateway",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-websocketin-41f5b50d",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] X-Ray actions only support wildcard and execute api manage connections restricted to stack api gateway",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-websocket-incoming-message-handler*",
                    ],
                  ],
                },
              },
              {
                "Action": "logs:CreateLogGroup",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-websocket-incoming-message-handler*",
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": "sns:Publish",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": "events:PutEvents",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":events:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":event-bus/default",
                    ],
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Lambda in vpc is not enforced, outgoing messages just communicates to socket gateway.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Lambda in vpc is not enforced, outgoing messages just communicates to socket gateway.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Lambda in vpc is not enforced, outgoing messages just communicates to socket gateway.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Function is API implementation and will be invoked synchronously.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Architectures": [
            "x86_64",
          ],
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Environment": {
            "Variables": {
              "CONNECTIONS_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "LOG_LEVEL": "INFO",
              "POWERTOOLS_DEV": "true",
              "POWERTOOLS_LOGGER_LOG_EVENT": "true",
              "POWERTOOLS_SERVICE_NAME": "chatbot",
              "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
              "WEBSOCKET_API_ENDPOINT": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region",
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix",
                    },
                    "/socket",
                  ],
                ],
              },
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-gaia-app-websocket---626d4fa6",
          "Handler": "index.handler",
          "Layers": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":lambda:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
                ],
              ],
            },
          ],
          "ReservedConcurrentExecutions": 1,
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": "python3.12",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 6,
          "TracingConfig": {
            "Mode": "Active",
          },
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] X-Ray actions only support wildcard and execute api manage connections restricted to stack api gateway, and AWSLambdaBasicExecutionRole restrictive enough",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-websocket-outgoing-message-handler*",
                    ],
                  ],
                },
              },
              {
                "Action": "logs:CreateLogGroup",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-websocket-outgoing-message-handler*",
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": "execute-api:ManageConnections",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                      "/socket/*/*",
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "sqs:ReceiveMessage",
                  "sqs:ChangeMessageVisibility",
                  "sqs:GetQueueUrl",
                  "sqs:DeleteMessage",
                  "sqs:GetQueueAttributes",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": "kms:Decrypt",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] X-Ray actions only support wildcard and execute api manage connections restricted to stack api gateway, and AWSLambdaBasicExecutionRole restrictive enough",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-websocketo--791e3b2d",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "EventSourceArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "FunctionName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::Lambda::EventSourceMapping",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SQS3",
                "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsMasterKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "QueueName": "test-org-test-env-test-domain-test-gaia-app-websocketoutgoingmessagesdlq",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SQS::Queue",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SQS3",
                "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "sqs:*",
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": "*",
                "Sid": "EnforceSSL",
              },
            ],
            "Version": "2012-10-17",
          },
          "Queues": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::SQS::QueuePolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsMasterKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "QueueName": "test-org-test-env-test-domain-test-gaia-app-websocketoutgoingmessagesqueue",
          "RedrivePolicy": {
            "deadLetterTargetArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "maxReceiveCount": 3,
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SQS::Queue",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "sqs:*",
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": "*",
                "Sid": "EnforceSSL",
              },
              {
                "Action": "sqs:SendMessage",
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "events.amazonaws.com",
                    "sqs.amazonaws.com",
                  ],
                },
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": "sqs:SendMessage",
                "Condition": {
                  "ArnEquals": {
                    "aws:SourceArn": {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Service": "sns.amazonaws.com",
                },
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "Queues": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::SQS::QueuePolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Endpoint": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "FilterPolicy": {
            "direction": [
              "OUT",
            ],
          },
          "FilterPolicyScope": "MessageBody",
          "Protocol": "sqs",
          "TopicArn": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SNS::Subscription",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "AuthorizationType": "CUSTOM",
          "AuthorizerId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "RouteKey": "$connect",
          "Target": {
            "Fn::Join": [
              "",
              [
                "integrations/",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              ],
            ],
          },
        },
        "Type": "AWS::ApiGatewayV2::Route",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "IntegrationType": "AWS_PROXY",
          "IntegrationUri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "Type": "AWS::ApiGatewayV2::Integration",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Action": "lambda:InvokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":execute-api:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "/*$connect",
              ],
            ],
          },
        },
        "Type": "AWS::Lambda::Permission",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "AuthorizationType": "NONE",
          "RouteKey": "$default",
          "Target": {
            "Fn::Join": [
              "",
              [
                "integrations/",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              ],
            ],
          },
        },
        "Type": "AWS::ApiGatewayV2::Route",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "IntegrationType": "AWS_PROXY",
          "IntegrationUri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "Type": "AWS::ApiGatewayV2::Integration",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Action": "lambda:InvokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":execute-api:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "/*$default",
              ],
            ],
          },
        },
        "Type": "AWS::Lambda::Permission",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "AuthorizationType": "NONE",
          "RouteKey": "$disconnect",
          "Target": {
            "Fn::Join": [
              "",
              [
                "integrations/",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              ],
            ],
          },
        },
        "Type": "AWS::ApiGatewayV2::Route",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ApiId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "IntegrationType": "AWS_PROXY",
          "IntegrationUri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "Type": "AWS::ApiGatewayV2::Integration",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Action": "lambda:InvokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":execute-api:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "/*$disconnect",
              ],
            ],
          },
        },
        "Type": "AWS::Lambda::Permission",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-APIG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Action": "lambda:InvokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":execute-api:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "/authorizers/",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              ],
            ],
          },
        },
        "Type": "AWS::Lambda::Permission",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SQS3",
                "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsMasterKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "QueueName": "test-org-test-env-test-domain-test-gaia-app-langchainingestiondlq",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SQS::Queue",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SQS3",
                "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "sqs:*",
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": "*",
                "Sid": "EnforceSSL",
              },
            ],
            "Version": "2012-10-17",
          },
          "Queues": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::SQS::QueuePolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsMasterKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "QueueName": "test-org-test-env-test-domain-test-gaia-app-langchainingestionqueue",
          "RedrivePolicy": {
            "deadLetterTargetArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "maxReceiveCount": 3,
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VisibilityTimeout": 5400,
        },
        "Type": "AWS::SQS::Queue",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "sqs:*",
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": "*",
                "Sid": "EnforceSSL",
              },
              {
                "Action": "sqs:SendMessage",
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "events.amazonaws.com",
                    "sqs.amazonaws.com",
                  ],
                },
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": "sqs:SendMessage",
                "Condition": {
                  "ArnEquals": {
                    "aws:SourceArn": {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Service": "sns.amazonaws.com",
                },
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "Queues": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::SQS::QueuePolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Endpoint": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "FilterPolicy": {
            "direction": [
              "IN",
            ],
            "modelInterface": [
              "langchain",
            ],
          },
          "FilterPolicyScope": "MessageBody",
          "Protocol": "sqs",
          "TopicArn": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SNS::Subscription",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked synchronously.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Architectures": [
            "x86_64",
          ],
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Environment": {
            "Variables": {
              "API_KEYS_SECRETS_ARN": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "AURORA_DB_SECRET_ID": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "BEDROCK_REGION": "ca-central-1",
              "CONFIG_PARAMETER_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "DEFAULT_KENDRA_INDEX_ID": "",
              "DEFAULT_KENDRA_INDEX_NAME": "",
              "DEFAULT_KENDRA_S3_DATA_SOURCE_BUCKET_NAME": "",
              "DEFAULT_KENDRA_S3_DATA_SOURCE_ID": "",
              "DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME": "by_compound_key_idx",
              "DOCUMENTS_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "LOG_LEVEL": "INFO",
              "MESSAGES_TOPIC_ARN": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "POWERTOOLS_DEV": "true",
              "POWERTOOLS_LOGGER_LOG_EVENT": "true",
              "POWERTOOLS_METRICS_NAMESPACE": "chatbot-model-interface",
              "POWERTOOLS_SERVICE_NAME": "chatbot",
              "SAGEMAKER_RAG_MODELS_ENDPOINT": "",
              "SESSIONS_BY_USER_ID_INDEX_NAME": "byUserId",
              "SESSIONS_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
              "WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME": "by_object_type_idx",
              "WORKSPACES_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-gaia-app-model-inter-13439783",
          "Handler": "index.handler",
          "Layers": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":lambda:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
                ],
              ],
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
          "MemorySize": 1024,
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": "python3.12",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 120,
          "TracingConfig": {
            "Mode": "Active",
          },
          "VpcConfig": {
            "SecurityGroupIds": [
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
            ],
            "SubnetIds": [
              "subnet1",
            ],
          },
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Standard Lambda Execution Managed Policy",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] X-Ray, Comprehend, & Bedrock actions only support wildcard, s3 bucket bound to stack managed bucket, and DDB index and KMS key deployed and managed by stack",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/AWSLambdaExecute",
                ],
              ],
            },
          ],
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-modelinter--29137cce",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Standard Lambda Execution Managed Policy",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] X-Ray, Comprehend, & Bedrock actions only support wildcard, s3 bucket bound to stack managed bucket, and DDB index and KMS key deployed and managed by stack",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-model-interface-request-handler*",
                    ],
                  ],
                },
              },
              {
                "Action": "logs:CreateLogGroup",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-model-interface-request-handler*",
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "bedrock:InvokeModel",
                  "bedrock:InvokeModelWithResponseStream",
                  "bedrock:InvokeAgent",
                ],
                "Condition": {
                  "StringEquals": {
                    "aws:RequestedRegion": "ca-central-1",
                  },
                },
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": "bedrock:Retrieve",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":bedrock:ca-central-1:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":knowledge-base/*",
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:DescribeSecret",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": "sns:Publish",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:DescribeSecret",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "ssm:DescribeParameters",
                  "ssm:GetParameters",
                  "ssm:GetParameter",
                  "ssm:GetParameterHistory",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "comprehend:DetectDominantLanguage",
                  "comprehend:DetectSentiment",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "sqs:ReceiveMessage",
                  "sqs:ChangeMessageVisibility",
                  "sqs:GetQueueUrl",
                  "sqs:DeleteMessage",
                  "sqs:GetQueueAttributes",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": "kms:Decrypt",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Standard Lambda Execution Managed Policy",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] X-Ray, Comprehend, & Bedrock actions only support wildcard, s3 bucket bound to stack managed bucket, and DDB index and KMS key deployed and managed by stack",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/modelinterfacerequesthandlerrole/arn",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Standard Lambda Execution Managed Policy",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] X-Ray, Comprehend, & Bedrock actions only support wildcard, s3 bucket bound to stack managed bucket, and DDB index and KMS key deployed and managed by stack",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/modelinterfacerequesthandlerrole/id",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "RoleId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Standard Lambda Execution Managed Policy",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] X-Ray, Comprehend, & Bedrock actions only support wildcard, s3 bucket bound to stack managed bucket, and DDB index and KMS key deployed and managed by stack",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/modelinterfacerequesthandlerrole/name",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked synchronously.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "GroupDescription": "Automatic security group for Lambda Function testorgtestenvtestdomaintestgaiaappgaiaLangchainInterfaceRequestHandler96298A3D",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "XXXXXXXX",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked synchronously.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "EventSourceArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "FunctionName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::Lambda::EventSourceMapping",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked synchronously.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/lambda/model-interface-request-handler/arn",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked synchronously.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/lambda/model-interface-request-handler/name",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": "[]",
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Only run during deployment, concurrency does not fit the scenario.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Only run during deployment, concurrency does not fit the scenario.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Only run during deployment, concurrency does not fit the scenario.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Used in a custom resource, error handling is managed by Cloudformation.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Used in a custom resource, error handling is managed by Cloudformation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Used in a custom resource, error handling is managed by Cloudformation.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Used in a custom resource only during deployment.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Used in a custom resource only during deployment.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Used in a custom resource only during deployment.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Event handler lambda resources unknown at deployment, used for deployment only",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Architectures": [
            "x86_64",
          ],
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Environment": {
            "Variables": {
              "AURORA_DB_SECRET_ID": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "LOG_LEVEL": "INFO",
              "POWERTOOLS_DEV": "true",
              "POWERTOOLS_LOGGER_LOG_EVENT": "true",
              "POWERTOOLS_SERVICE_NAME": "chatbot",
              "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
              "WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME": "by_object_type_idx",
              "WORKSPACES_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-gaia-app-create-aur--406d7238",
          "Handler": "index.lambda_handler",
          "Layers": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":lambda:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
                ],
              ],
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": "python3.12",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 300,
          "VpcConfig": {
            "SecurityGroupIds": [
              "sg-12345351356",
            ],
            "SubnetIds": [
              "subnet1",
            ],
          },
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Standard Lambda Execution Managed Policy",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] DDB index names not known at deployment time. KMS Permissions are appropriately scoped.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Permissions are role specific. Inline policy use appropriate.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Permissions are role specific. Inline policy use appropriate.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Permissions are role specific. Inline policy use appropriate.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-create-aurora-workspace*",
                    ],
                  ],
                },
              },
              {
                "Action": "logs:CreateLogGroup",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-create-aurora-workspace*",
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:DescribeSecret",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": "rds-db:connect",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":rds-db:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":dbuser:",
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "DBClusterResourceId",
                        ],
                      },
                      "/postgres",
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Standard Lambda Execution Managed Policy",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] DDB index names not known at deployment time. KMS Permissions are appropriately scoped.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Permissions are role specific. Inline policy use appropriate.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Permissions are role specific. Inline policy use appropriate.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Permissions are role specific. Inline policy use appropriate.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/AWSLambdaExecute",
                ],
              ],
            },
          ],
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-create-auro-50a61606",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Invoke function restricted to delete workspace lambda.  The lambda arn is not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "DefinitionString": {
            "Fn::Join": [
              "",
              [
                "{"StartAt":"SetCreating","States":{"SetCreating":{"Next":"Create","Type":"Task","ResultPath":null,"Resource":"arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"object_type":{"S":"workspace"}},"TableName":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":statusValue":{"S":"creating"}},"UpdateExpression":"set #status=:statusValue"}},"Create":{"Next":"SetReady","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.createResult","Next":"HandleError"}],"Type":"Task","ResultPath":"$.createResult","Resource":"arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":states:::lambda:invoke","Parameters":{"FunctionName":"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "","Payload.$":"$"}},"SetReady":{"Next":"Success","Type":"Task","ResultPath":null,"Resource":"arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"object_type":{"S":"workspace"}},"TableName":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":statusValue":{"S":"ready"}},"UpdateExpression":"set #status=:statusValue"}},"Success":{"Type":"Succeed"},"HandleError":{"Next":"Fail","Type":"Task","Resource":"arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"object_type":{"S":"workspace"}},"TableName":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":error":{"S":"error"}},"UpdateExpression":"set #status = :error"}},"Fail":{"Type":"Fail","Cause":"Workspace creation failed"}},"TimeoutSeconds":300,"Comment":"Create Aurora Workspace Workflow"}",
              ],
            ],
          },
          "LoggingConfiguration": {
            "Destinations": [
              {
                "CloudWatchLogsLogGroup": {
                  "LogGroupArn": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
              },
            ],
            "Level": "ALL",
          },
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "TracingConfiguration": {
            "Enabled": true,
          },
        },
        "Type": "AWS::StepFunctions::StateMachine",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Invoke function restricted to delete workspace lambda.  The lambda arn is not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "dynamodb:UpdateItem",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":dynamodb:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":table/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
              },
              {
                "Action": "lambda:InvokeFunction",
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        ":*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "logs:CreateLogDelivery",
                  "logs:GetLogDelivery",
                  "logs:UpdateLogDelivery",
                  "logs:DeleteLogDelivery",
                  "logs:ListLogDeliveries",
                  "logs:PutResourcePolicy",
                  "logs:DescribeResourcePolicies",
                  "logs:DescribeLogGroups",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                  "xray:GetSamplingRules",
                  "xray:GetSamplingTargets",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Invoke function restricted to delete workspace lambda.  The lambda arn is not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "states.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "LogGroupName": "/aws/stepfunction/test-org-test-env-test-domain-test-gaia-app-create-aurora-workspace",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::Logs::LogGroup",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Only run during deployment.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Only run during deployment, concurrency does not fit the scenario.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Only run during deployment, concurrency does not fit the scenario.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Only run during deployment, concurrency does not fit the scenario.",
              },
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Used in a custom resource, error handling is managed by Cloudformation.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Used in a custom resource, error handling is managed by Cloudformation.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Used in a custom resource, error handling is managed by Cloudformation.",
              },
              {
                "id": "NIST.800.53.R5-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Used in a custom resource only during deployment.",
              },
              {
                "id": "HIPAA.Security-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Used in a custom resource only during deployment.",
              },
              {
                "id": "PCI.DSS.321-LambdaInsideVPC",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Used in a custom resource only during deployment.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Event handler lambda resources unknown at deployment, used for deployment only",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AURORA_DB_SECRET_ID": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "Custom::DatabaseSetupFunction",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole",
                ],
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:41:25] Managed policy used by RDS for monitoring.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "monitoring.rds.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole",
                ],
              ],
            },
          ],
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-test-cluster-59a8141",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole",
                ],
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:41:25] Managed policy used by RDS for monitoring.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/test-cluster-enhanced-monitoring-role/arn",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole",
                ],
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:41:25] Managed policy used by RDS for monitoring.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/test-cluster-enhanced-monitoring-role/id",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "RoleId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole",
                ],
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:41:25] Managed policy used by RDS for monitoring.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/test-cluster-enhanced-monitoring-role/name",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "LogExport::postgresql",
                ],
                "id": "AwsSolutions-RDS16",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:250:25] Remediated through property override. Log export for postgresql is enabled.",
              },
              {
                "applies_to": [
                  "LogExport::postgresql",
                ],
                "id": "NIST.800.53.R5-RDSLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:250:25] Remediated through property override. Log export for postgresql is enabled.",
              },
              {
                "applies_to": [
                  "LogExport::postgresql",
                ],
                "id": "HIPAA.Security-RDSLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:250:25] Remediated through property override. Log export for postgresql is enabled.",
              },
              {
                "applies_to": [
                  "LogExport::postgresql",
                ],
                "id": "PCI.DSS.321-RDSLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:250:25] Remediated through property override. Log export for postgresql is enabled.",
              },
              {
                "id": "AwsSolutions-RDS6",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:250:25] Remediated through property override.",
              },
              {
                "id": "AwsSolutions-RDS11",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:250:25] Remediated through property override.",
              },
              {
                "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "PCI.DSS.321-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "HIPAA.Security-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "PCI.DSS.321-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "BackupRetentionPeriod": 20,
          "CopyTagsToSnapshot": true,
          "DBClusterIdentifier": "test-org-test-env-test-domain-test-gaia-app-test-cluster",
          "DBClusterParameterGroupName": "default.aurora-postgresql15",
          "DBSubnetGroupName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "DeletionProtection": true,
          "EnableCloudwatchLogsExports": [
            "postgresql",
          ],
          "EnableIAMDatabaseAuthentication": true,
          "Engine": "aurora-postgresql",
          "EngineVersion": "15.3",
          "KmsKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "MasterUserPassword": {
            "Fn::Join": [
              "",
              [
                "{{resolve:secretsmanager:",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                ":SecretString:password::}}",
              ],
            ],
          },
          "MasterUsername": {
            "Fn::Join": [
              "",
              [
                "{{resolve:secretsmanager:",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                ":SecretString:username::}}",
              ],
            ],
          },
          "Port": 15530,
          "ServerlessV2ScalingConfiguration": {
            "MaxCapacity": 4,
            "MinCapacity": 0.5,
          },
          "StorageEncrypted": true,
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcSecurityGroupIds": [
            "sg-46576878787",
          ],
        },
        "Type": "AWS::RDS::DBCluster",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "PCI.DSS.321-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "HIPAA.Security-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "PCI.DSS.321-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Location": {
            "ApplicationId": {
              "Fn::FindInMap": [
                "REPLACED-CFN-LOGICAL-ID",
                {
                  "Ref": "AWS::Partition",
                },
                "applicationId",
              ],
            },
            "SemanticVersion": {
              "Fn::FindInMap": [
                "REPLACED-CFN-LOGICAL-ID",
                {
                  "Ref": "AWS::Partition",
                },
                "semanticVersion",
              ],
            },
          },
          "Parameters": {
            "endpoint": {
              "Fn::Join": [
                "",
                [
                  "https://secretsmanager.",
                  {
                    "Ref": "AWS::Region",
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                ],
              ],
            },
            "excludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@"\\",
            "functionName": "REPLACED-CFN-LOGICAL-ID",
            "kmsKeyArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "vpcSecurityGroupIds": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "GroupId",
              ],
            },
            "vpcSubnetIds": "subnet2",
          },
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
        },
        "Type": "AWS::Serverless::Application",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "PCI.DSS.321-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "HIPAA.Security-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "PCI.DSS.321-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "GroupDescription": "test-org-test-env-test-domain-test-gaia-app/gaia/RagEngines/AuroraPgVector/aurora-postgres-pgvector/RotationSingleUser/SecurityGroup",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "XXXXXXXX",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "PCI.DSS.321-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "HIPAA.Security-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "PCI.DSS.321-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "SecretId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "TargetId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "TargetType": "AWS::RDS::DBCluster",
        },
        "Type": "AWS::SecretsManager::SecretTargetAttachment",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "PCI.DSS.321-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "HIPAA.Security-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "PCI.DSS.321-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ResourcePolicy": {
            "Statement": [
              {
                "Action": "secretsmanager:DeleteSecret",
                "Effect": "Deny",
                "Principal": {
                  "AWS": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":iam::",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":root",
                      ],
                    ],
                  },
                },
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "SecretId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SecretsManager::ResourcePolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "PCI.DSS.321-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "HIPAA.Security-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "PCI.DSS.321-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "RotationLambdaARN": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Outputs.RotationLambdaARN",
            ],
          },
          "RotationRules": {
            "ScheduleExpression": "rate(60 days)",
          },
          "SecretId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SecretsManager::RotationSchedule",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "PCI.DSS.321-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "HIPAA.Security-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "PCI.DSS.321-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Description": {
            "Fn::Join": [
              "",
              [
                "Generated by the CDK for stack: ",
                {
                  "Ref": "AWS::StackName",
                },
              ],
            ],
          },
          "GenerateSecretString": {
            "ExcludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@"\\",
            "GenerateStringKey": "password",
            "PasswordLength": 30,
            "SecretStringTemplate": "{"username":"postgres"}",
          },
          "KmsKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SecretsManager::Secret",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "PCI.DSS.321-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "HIPAA.Security-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "PCI.DSS.321-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "DBSubnetGroupDescription": "Subnets for aurora-postgres-pgvector database",
          "SubnetIds": [
            "subnet2",
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::RDS::DBSubnetGroup",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "PCI.DSS.321-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "HIPAA.Security-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "PCI.DSS.321-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "DBClusterIdentifier": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "DBInstanceClass": "db.serverless",
          "Engine": "aurora-postgresql",
          "MonitoringInterval": 60,
          "MonitoringRoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "PromotionTier": 2,
          "PubliclyAccessible": false,
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::RDS::DBInstance",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
              },
              {
                "id": "HIPAA.Security-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "PCI.DSS.321-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInstancePublicAccess",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
              },
              {
                "id": "NIST.800.53.R5-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "HIPAA.Security-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "PCI.DSS.321-RDSInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "DBClusterIdentifier": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "DBInstanceClass": "db.serverless",
          "Engine": "aurora-postgresql",
          "MonitoringInterval": 60,
          "MonitoringRoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "PromotionTier": 0,
          "PubliclyAccessible": false,
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::RDS::DBInstance",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AliasName": "alias/test-org-test-env-test-domain-test-gaia-app-test-org-test-env-test-domain-test-gaia-app-dataimportqueueskey",
          "TargetKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::KMS::Alias",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "EnableKeyRotation": true,
          "Enabled": true,
          "KeyPolicy": {
            "Statement": [
              {
                "Action": "kms:*",
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":iam::",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":root",
                      ],
                    ],
                  },
                },
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Condition": {
                  "ArnLike": {
                    "aws:SourceArn": {
                      "Fn::GetAtt": [
                        "REPLACED-CFN-LOGICAL-ID",
                        "Arn",
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Service": "s3.amazonaws.com",
                },
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:GenerateDataKey*",
                  "kms:Decrypt",
                ],
                "Effect": "Allow",
                "Principal": {
                  "Service": "s3.amazonaws.com",
                },
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::KMS::Key",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SQS3",
                "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsMasterKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "QueueName": "test-org-test-env-test-domain-test-gaia-app-dataimportworkflowdlq",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VisibilityTimeout": 900,
        },
        "Type": "AWS::SQS::Queue",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SQS3",
                "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "sqs:*",
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": "*",
                "Sid": "EnforceSSL",
              },
            ],
            "Version": "2012-10-17",
          },
          "Queues": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::SQS::QueuePolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Log stream generated at deployment time by AWS batch and ecr get authorization only supports * for resource",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "ecs-tasks.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Log stream generated at deployment time by AWS batch and ecr get authorization only supports * for resource",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:/aws/batch/job:*",
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:BatchGetImage",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ecr:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":repository/",
                      {
                        "Fn::Sub": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                    ],
                  ],
                },
              },
              {
                "Action": "ecr:GetAuthorizationToken",
                "Effect": "Allow",
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:215:25] Events handled by upstream dynamodb service, resource unknown at deployment time",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:215:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:215:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:215:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ContainerProperties": {
            "Environment": [
              {
                "Name": "AWS_DEFAULT_REGION",
                "Value": {
                  "Ref": "AWS::Region",
                },
              },
              {
                "Name": "CONFIG_PARAMETER_NAME",
                "Value": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Name": "API_KEYS_SECRETS_ARN",
                "Value": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Name": "AURORA_DB_SECRET_ID",
                "Value": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Name": "PROCESSING_BUCKET_NAME",
                "Value": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Name": "WORKSPACES_TABLE_NAME",
                "Value": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Name": "WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME",
                "Value": "by_object_type_idx",
              },
              {
                "Name": "DOCUMENTS_TABLE_NAME",
                "Value": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Name": "DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME",
                "Value": "by_compound_key_idx",
              },
              {
                "Name": "SAGEMAKER_RAG_MODELS_ENDPOINT",
                "Value": "",
              },
            ],
            "ExecutionRoleArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "Image": {
              "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:1926f20a316e4252bd0d1a6138474d4c92abaf5d5d9dc706ab5d11da46f8ba01",
            },
            "JobRoleArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "LinuxParameters": {
              "Tmpfs": [
                {
                  "ContainerPath": "/tmp",
                  "MountOptions": [
                    "rw",
                  ],
                  "Size": 10240,
                },
              ],
            },
            "ReadonlyRootFilesystem": true,
            "ResourceRequirements": [
              {
                "Type": "MEMORY",
                "Value": "2048",
              },
              {
                "Type": "VCPU",
                "Value": "2",
              },
            ],
            "User": "worker",
          },
          "PlatformCapabilities": [
            "EC2",
          ],
          "RetryStrategy": {},
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Timeout": {
            "AttemptDurationSeconds": 1800,
          },
          "Type": "container",
        },
        "Type": "AWS::Batch::JobDefinition",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Cluster unknown at runtime.  Created during deployment and strictly used for AWS Batch job",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.  Resources actions for ECS only support widlcard log group name not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "ecs-tasks.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
                ],
              ],
            },
          ],
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-fileimportjobrole",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Cluster unknown at runtime.  Created during deployment and strictly used for AWS Batch job",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.  Resources actions for ECS only support widlcard log group name not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*",
                  "s3:DeleteObject*",
                  "s3:PutObject",
                  "s3:PutObjectLegalHold",
                  "s3:PutObjectRetention",
                  "s3:PutObjectTagging",
                  "s3:PutObjectVersionTagging",
                  "s3:Abort*",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*",
                  "s3:DeleteObject*",
                  "s3:PutObject",
                  "s3:PutObjectLegalHold",
                  "s3:PutObjectRetention",
                  "s3:PutObjectTagging",
                  "s3:PutObjectVersionTagging",
                  "s3:Abort*",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "ssm:DescribeParameters",
                  "ssm:GetParameters",
                  "ssm:GetParameter",
                  "ssm:GetParameterHistory",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:DescribeSecret",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:DescribeSecret",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "bedrock:InvokeModel",
                  "bedrock:InvokeModelWithResponseStream",
                ],
                "Condition": {
                  "StringEquals": {
                    "aws:RequestedRegion": "ca-central-1",
                  },
                },
                "Effect": "Allow",
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Cluster unknown at runtime.  Created during deployment and strictly used for AWS Batch job",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.  Resources actions for ECS only support widlcard log group name not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/fileimportjobrole/arn",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Cluster unknown at runtime.  Created during deployment and strictly used for AWS Batch job",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.  Resources actions for ECS only support widlcard log group name not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/fileimportjobrole/id",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "RoleId",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Cluster unknown at runtime.  Created during deployment and strictly used for AWS Batch job",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.  Resources actions for ECS only support widlcard log group name not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/role/fileimportjobrole/name",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ComputeEnvironmentOrder": [
            {
              "ComputeEnvironment": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "ComputeEnvironmentArn",
                ],
              },
              "Order": 1,
            },
          ],
          "Priority": 1,
          "State": "ENABLED",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
        },
        "Type": "AWS::Batch::JobQueue",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "LaunchTemplateData": {
            "MetadataOptions": {
              "HttpTokens": "required",
            },
            "TagSpecifications": [
              {
                "ResourceType": "instance",
                "Tags": [
                  {
                    "Key": "mdaa_cdk_app",
                    "Value": "gaia",
                  },
                  {
                    "Key": "mdaa_domain",
                    "Value": "test-domain",
                  },
                  {
                    "Key": "mdaa_env",
                    "Value": "test-env",
                  },
                  {
                    "Key": "mdaa_module_name",
                    "Value": "test-gaia-app",
                  },
                  {
                    "Key": "mdaa_org",
                    "Value": "test-org",
                  },
                  {
                    "Key": "Name",
                    "Value": "test-org-test-env-test-domain-test-gaia-app/gaia/RagEngines/DataImport/FileImportBatchJob/LaunchTemplate",
                  },
                ],
              },
              {
                "ResourceType": "volume",
                "Tags": [
                  {
                    "Key": "mdaa_cdk_app",
                    "Value": "gaia",
                  },
                  {
                    "Key": "mdaa_domain",
                    "Value": "test-domain",
                  },
                  {
                    "Key": "mdaa_env",
                    "Value": "test-env",
                  },
                  {
                    "Key": "mdaa_module_name",
                    "Value": "test-gaia-app",
                  },
                  {
                    "Key": "mdaa_org",
                    "Value": "test-org",
                  },
                  {
                    "Key": "Name",
                    "Value": "test-org-test-env-test-domain-test-gaia-app/gaia/RagEngines/DataImport/FileImportBatchJob/LaunchTemplate",
                  },
                ],
              },
            ],
          },
          "TagSpecifications": [
            {
              "ResourceType": "launch-template",
              "Tags": [
                {
                  "Key": "mdaa_cdk_app",
                  "Value": "gaia",
                },
                {
                  "Key": "mdaa_domain",
                  "Value": "test-domain",
                },
                {
                  "Key": "mdaa_env",
                  "Value": "test-env",
                },
                {
                  "Key": "mdaa_module_name",
                  "Value": "test-gaia-app",
                },
                {
                  "Key": "mdaa_org",
                  "Value": "test-org",
                },
                {
                  "Key": "Name",
                  "Value": "test-org-test-env-test-domain-test-gaia-app/gaia/RagEngines/DataImport/FileImportBatchJob/LaunchTemplate",
                },
              ],
            },
          ],
        },
        "Type": "AWS::EC2::LaunchTemplate",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:158:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ComputeResources": {
            "AllocationStrategy": "BEST_FIT_PROGRESSIVE",
            "InstanceRole": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "InstanceTypes": [
              "c5.xlarge",
              "optimal",
            ],
            "LaunchTemplate": {
              "LaunchTemplateId": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            "MaxvCpus": 4,
            "MinvCpus": 0,
            "SecurityGroupIds": [
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
            ],
            "Subnets": [
              "subnet1",
            ],
            "Tags": {
              "mdaa_cdk_app": "gaia",
              "mdaa_domain": "test-domain",
              "mdaa_env": "test-env",
              "mdaa_module_name": "test-gaia-app",
              "mdaa_org": "test-org",
            },
            "Type": "EC2",
            "UpdateToLatestImageVersion": true,
          },
          "ReplaceComputeEnvironment": true,
          "State": "ENABLED",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "managed",
          "UpdatePolicy": {
            "JobExecutionTimeoutMinutes": 30,
          },
        },
        "Type": "AWS::Batch::ComputeEnvironment",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:158:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::InstanceProfile",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:158:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
                ],
              ],
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:158:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "GroupDescription": "test-org-test-env-test-domain-test-gaia-app/gaia/RagEngines/DataImport/FileImportBatchJob/ManagedEc2EcsComputeEnvironment/SecurityGroup",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "XXXXXXXX",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Events handled by upstream dynamodb service, resource unknown at deployment time",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "DefinitionString": {
            "Fn::Join": [
              "",
              [
                "{"StartAt":"SetProcessing","States":{"SetProcessing":{"Next":"FileImportJob","Type":"Task","ResultPath":null,"Resource":"arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"document_id":{"S.$":"$.document_id"}},"TableName":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":statusValue":{"S":"processing"}},"UpdateExpression":"set #status=:statusValue"}},"FileImportJob":{"Next":"SetProcessed","Type":"Task","Resource":"arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":states:::batch:submitJob.sync","Parameters":{"JobDefinition":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","JobName.$":"States.Format('FileImport-{}-{}', $.workspace_id, $.document_id)","JobQueue":"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "JobQueueArn",
                  ],
                },
                "","ContainerOverrides":{"Environment":[{"Name":"WORKSPACE_ID","Value.$":"$.workspace_id"},{"Name":"DOCUMENT_ID","Value.$":"$.document_id"},{"Name":"INPUT_BUCKET_NAME","Value.$":"$.input_bucket_name"},{"Name":"INPUT_OBJECT_KEY","Value.$":"$.input_object_key"},{"Name":"PROCESSING_BUCKET_NAME","Value.$":"$.processing_bucket_name"},{"Name":"PROCESSING_OBJECT_KEY","Value.$":"$.processing_object_key"}]}},"ResultPath":"$.job"},"SetProcessed":{"Next":"Success","Type":"Task","ResultPath":null,"Resource":"arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"document_id":{"S.$":"$.document_id"}},"TableName":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":statusValue":{"S":"processed"}},"UpdateExpression":"set #status=:statusValue"}},"Success":{"Type":"Succeed"}},"TimeoutSeconds":43200,"Comment":"File import workflow"}",
              ],
            ],
          },
          "LoggingConfiguration": {
            "Destinations": [
              {
                "CloudWatchLogsLogGroup": {
                  "LogGroupArn": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
              },
            ],
            "Level": "ALL",
          },
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "TracingConfiguration": {
            "Enabled": true,
          },
        },
        "Type": "AWS::StepFunctions::StateMachine",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Events handled by upstream dynamodb service, resource unknown at deployment time",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "states.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Events handled by upstream dynamodb service, resource unknown at deployment time",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "dynamodb:UpdateItem",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":dynamodb:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":table/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "logs:CreateLogDelivery",
                  "logs:GetLogDelivery",
                  "logs:UpdateLogDelivery",
                  "logs:DeleteLogDelivery",
                  "logs:ListLogDeliveries",
                  "logs:PutResourcePolicy",
                  "logs:DescribeResourcePolicies",
                  "logs:DescribeLogGroups",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                  "xray:GetSamplingRules",
                  "xray:GetSamplingTargets",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "events:CreateRule",
                  "events:PutRule",
                  "events:PutTargets",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": "batch:SubmitJob",
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "JobQueueArn",
                    ],
                  },
                  {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "LogGroupName": "/aws/stepfunction/test-org-test-env-test-domain-test-gaia-app-file-import",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::Logs::LogGroup",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsMasterKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "QueueName": "test-org-test-env-test-domain-test-gaia-app-vectordbdataingestion",
          "RedrivePolicy": {
            "deadLetterTargetArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "maxReceiveCount": 3,
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VisibilityTimeout": 900,
        },
        "Type": "AWS::SQS::Queue",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "sqs:*",
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": "*",
                "Sid": "EnforceSSL",
              },
              {
                "Action": [
                  "sqs:SendMessage",
                  "sqs:GetQueueAttributes",
                  "sqs:GetQueueUrl",
                ],
                "Condition": {
                  "ArnLike": {
                    "aws:SourceArn": {
                      "Fn::GetAtt": [
                        "REPLACED-CFN-LOGICAL-ID",
                        "Arn",
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Service": "s3.amazonaws.com",
                },
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "Queues": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::SQS::QueuePolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-S1",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "NIST.800.53.R5-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "HIPAA.Security-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "PCI.DSS.321-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "NIST.800.53.R5-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:116:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "HIPAA.Security-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:116:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "PCI.DSS.321-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:116:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "BucketKeyEnabled": true,
                "ServerSideEncryptionByDefault": {
                  "KMSMasterKeyID": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  "SSEAlgorithm": "aws:kms",
                },
              },
            ],
          },
          "BucketName": "REPLACED-S3-BUCKET-NAME",
          "PublicAccessBlockConfiguration": {
            "BlockPublicAcls": true,
            "BlockPublicPolicy": true,
            "IgnorePublicAcls": true,
            "RestrictPublicBuckets": true,
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VersioningConfiguration": {
            "Status": "Enabled",
          },
        },
        "Type": "AWS::S3::Bucket",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-S1",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "NIST.800.53.R5-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "HIPAA.Security-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "PCI.DSS.321-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "NIST.800.53.R5-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:116:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "HIPAA.Security-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:116:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "PCI.DSS.321-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:116:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Bucket": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "s3:*",
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": "s3:PutObject",
                "Condition": {
                  "StringEquals": {
                    "s3:x-amz-server-side-encryption": "AES256",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                "Sid": "DenyAES",
              },
              {
                "Action": "s3:PutObject",
                "Condition": {
                  "StringNotLikeIfExists": {
                    "s3:x-amz-server-side-encryption-aws-kms-key-id": {
                      "Fn::GetAtt": [
                        "REPLACED-CFN-LOGICAL-ID",
                        "Arn",
                      ],
                    },
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                "Sid": "ForceKMS",
              },
            ],
            "Version": "2012-10-17",
          },
        },
        "Type": "AWS::S3::BucketPolicy",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-S1",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "NIST.800.53.R5-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "HIPAA.Security-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "PCI.DSS.321-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "NIST.800.53.R5-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:87:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "HIPAA.Security-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:87:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "PCI.DSS.321-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:87:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AccelerateConfiguration": {
            "AccelerationStatus": "Enabled",
          },
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "BucketKeyEnabled": true,
                "ServerSideEncryptionByDefault": {
                  "KMSMasterKeyID": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  "SSEAlgorithm": "aws:kms",
                },
              },
            ],
          },
          "BucketName": "test-org-test-env-test-domain-test-gaia-app-test-org---55190c99",
          "CorsConfiguration": {
            "CorsRules": [
              {
                "AllowedHeaders": [
                  "*",
                ],
                "AllowedMethods": [
                  "PUT",
                  "POST",
                  "GET",
                  "HEAD",
                ],
                "AllowedOrigins": [
                  "*",
                ],
                "ExposedHeaders": [
                  "ETag",
                ],
                "MaxAge": 3000,
              },
            ],
          },
          "PublicAccessBlockConfiguration": {
            "BlockPublicAcls": true,
            "BlockPublicPolicy": true,
            "IgnorePublicAcls": true,
            "RestrictPublicBuckets": true,
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VersioningConfiguration": {
            "Status": "Enabled",
          },
        },
        "Type": "AWS::S3::Bucket",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "BucketName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Managed": true,
          "NotificationConfiguration": {
            "QueueConfigurations": [
              {
                "Events": [
                  "s3:ObjectCreated:*",
                ],
                "QueueArn": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Events": [
                  "s3:ObjectRemoved:*",
                ],
                "QueueArn": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            ],
          },
          "ServiceToken": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "SkipDestinationValidation": false,
        },
        "Type": "Custom::S3BucketNotifications",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-S1",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "NIST.800.53.R5-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "HIPAA.Security-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "PCI.DSS.321-S3BucketLoggingEnabled",
                "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
              },
              {
                "id": "NIST.800.53.R5-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:87:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "HIPAA.Security-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:87:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "PCI.DSS.321-S3BucketReplicationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:87:25] MDAA does not enforce bucket replication.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Bucket": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "s3:*",
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": "s3:PutObject",
                "Condition": {
                  "StringEquals": {
                    "s3:x-amz-server-side-encryption": "AES256",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                "Sid": "DenyAES",
              },
              {
                "Action": "s3:PutObject",
                "Condition": {
                  "StringNotLikeIfExists": {
                    "s3:x-amz-server-side-encryption-aws-kms-key-id": {
                      "Fn::GetAtt": [
                        "REPLACED-CFN-LOGICAL-ID",
                        "Arn",
                      ],
                    },
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                "Sid": "ForceKMS",
              },
            ],
            "Version": "2012-10-17",
          },
        },
        "Type": "AWS::S3::BucketPolicy",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] Function is S3 Event handler. S3 service will provide concurrency and anti-hammering protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] Function is S3 Event handler. S3 service will provide concurrency and anti-hammering protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] Function is S3 Event handler. S3 service will provide concurrency and anti-hammering protections.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] X-Ray actions only accept wildcard and s3 operations restricted to kms key and s3 buckets managed by stack",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Architectures": [
            "x86_64",
          ],
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "DeadLetterConfig": {
            "TargetArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
          },
          "Environment": {
            "Variables": {
              "API_KEYS_SECRETS_ARN": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "CONFIG_PARAMETER_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "DEFAULT_KENDRA_S3_DATA_SOURCE_BUCKET_NAME": "",
              "DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME": "by_compound_key_idx",
              "DOCUMENTS_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "FILE_IMPORT_WORKFLOW_ARN": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "LOG_LEVEL": "INFO",
              "POWERTOOLS_DEV": "true",
              "POWERTOOLS_LOGGER_LOG_EVENT": "true",
              "POWERTOOLS_SERVICE_NAME": "chatbot",
              "PROCESSING_BUCKET_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "SAGEMAKER_RAG_MODELS_ENDPOINT": "",
              "UPLOAD_BUCKET_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
              "WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME": "by_object_type_idx",
              "WORKSPACES_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-gaia-app-vectordbdat--2e20f7e",
          "Handler": "index.lambda_handler",
          "Layers": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":lambda:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
                ],
              ],
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
          "MemorySize": 512,
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": "python3.12",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 900,
          "TracingConfig": {
            "Mode": "Active",
          },
          "VpcConfig": {
            "SecurityGroupIds": [
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
            ],
            "SubnetIds": [
              "subnet1",
            ],
          },
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SQS3",
                "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsMasterKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "QueueName": "test-org-test-env-test-domain-test-gaia-app-uploadhandlerdlq",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SQS::Queue",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SQS3",
                "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "sqs:*",
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": "*",
                "Sid": "EnforceSSL",
              },
            ],
            "Version": "2012-10-17",
          },
          "Queues": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::SQS::QueuePolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] X-Ray actions only accept wildcard and s3 operations restricted to kms key and s3 buckets managed by stack",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-vectordbdat-64035ff8",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] X-Ray actions only accept wildcard and s3 operations restricted to kms key and s3 buckets managed by stack",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": "sqs:SendMessage",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*",
                  "s3:DeleteObject*",
                  "s3:PutObject",
                  "s3:PutObjectLegalHold",
                  "s3:PutObjectRetention",
                  "s3:PutObjectTagging",
                  "s3:PutObjectVersionTagging",
                  "s3:Abort*",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*",
                  "s3:DeleteObject*",
                  "s3:PutObject",
                  "s3:PutObjectLegalHold",
                  "s3:PutObjectRetention",
                  "s3:PutObjectTagging",
                  "s3:PutObjectVersionTagging",
                  "s3:Abort*",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:DescribeSecret",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "ssm:DescribeParameters",
                  "ssm:GetParameters",
                  "ssm:GetParameter",
                  "ssm:GetParameterHistory",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "sqs:ReceiveMessage",
                  "sqs:ChangeMessageVisibility",
                  "sqs:GetQueueUrl",
                  "sqs:DeleteMessage",
                  "sqs:GetQueueAttributes",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": "kms:Decrypt",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": "states:StartExecution",
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] Function is S3 Event handler. S3 service will provide concurrency and anti-hammering protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] Function is S3 Event handler. S3 service will provide concurrency and anti-hammering protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] Function is S3 Event handler. S3 service will provide concurrency and anti-hammering protections.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] X-Ray actions only accept wildcard and s3 operations restricted to kms key and s3 buckets managed by stack",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "GroupDescription": "Automatic security group for Lambda Function testorgtestenvtestdomaintestgaiaappgaiaRagEnginesDataImportUploadHandlerE897E8AB",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "XXXXXXXX",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "EventSourceArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "FunctionName": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::Lambda::EventSourceMapping",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Permissions are restrictive to stack resources. Processing s3 bucket managed and deployed by stack, not known at deployment.  KMS key resource deployed and managed by stack, not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "DefinitionString": {
            "Fn::Join": [
              "",
              [
                "{"StartAt":"SetProcessing","States":{"SetProcessing":{"Next":"Done?","Type":"Task","ResultPath":null,"Resource":"arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"document_id":{"S.$":"$.document_id"}},"TableName":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":statusValue":{"S":"processing"}},"UpdateExpression":"set #status=:statusValue"}},"Done?":{"Type":"Choice","Choices":[{"Variable":"$.done","BooleanEquals":false,"Next":"WebsiteParser"}],"Default":"SetProcessed"},"WebsiteParser":{"Next":"Done?","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.parsingResult","Next":"HandleError"}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":states:::lambda:invoke","Parameters":{"FunctionName":"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "","Payload.$":"$"}},"HandleError":{"Next":"Fail","Type":"Task","Resource":"arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"document_id":{"S.$":"$.document_id"}},"TableName":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":error":{"S":"error"}},"UpdateExpression":"set #status = :error"}},"Fail":{"Type":"Fail","Cause":"Import failed"},"SetProcessed":{"Next":"Success","Type":"Task","ResultPath":null,"Resource":"arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"document_id":{"S.$":"$.document_id"}},"TableName":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":statusValue":{"S":"processed"}},"UpdateExpression":"set #status=:statusValue"}},"Success":{"Type":"Succeed"}},"TimeoutSeconds":7200,"Comment":"Website crawling workflow"}",
              ],
            ],
          },
          "LoggingConfiguration": {
            "Destinations": [
              {
                "CloudWatchLogsLogGroup": {
                  "LogGroupArn": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
              },
            ],
            "Level": "ALL",
          },
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "TracingConfiguration": {
            "Enabled": true,
          },
        },
        "Type": "AWS::StepFunctions::StateMachine",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Permissions are restrictive to stack resources. Processing s3 bucket managed and deployed by stack, not known at deployment.  KMS key resource deployed and managed by stack, not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "dynamodb:UpdateItem",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":dynamodb:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":table/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
              },
              {
                "Action": "lambda:InvokeFunction",
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        ":*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "logs:CreateLogDelivery",
                  "logs:GetLogDelivery",
                  "logs:UpdateLogDelivery",
                  "logs:DeleteLogDelivery",
                  "logs:ListLogDeliveries",
                  "logs:PutResourcePolicy",
                  "logs:DescribeResourcePolicies",
                  "logs:DescribeLogGroups",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                  "xray:GetSamplingRules",
                  "xray:GetSamplingTargets",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "events:CreateRule",
                  "events:PutRule",
                  "events:PutTargets",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Permissions are restrictive to stack resources. Processing s3 bucket managed and deployed by stack, not known at deployment.  KMS key resource deployed and managed by stack, not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "states.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "LogGroupName": "/aws/stepfunction/test-org-test-env-test-domain-test-gaia-app-website-crawling",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::Logs::LogGroup",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:98:25] Function will be throttled by upstream services.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:98:25] Function will be throttled by upstream services.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:98:25] Function will be throttled by upstream services.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Managed policies are restrictive, logs group resource unknown at deployment and only used during deployment",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Policy restricted to stack managed processing bucket and embedding model invoke endpoint unknown at deployment",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Architectures": [
            "x86_64",
          ],
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "DeadLetterConfig": {
            "TargetArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
          },
          "Environment": {
            "Variables": {
              "API_KEYS_SECRETS_ARN": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "AURORA_DB_SECRET_ID": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "CONFIG_PARAMETER_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME": "by_compound_key_idx",
              "DOCUMENTS_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "LOG_LEVEL": "INFO",
              "POWERTOOLS_DEV": "true",
              "POWERTOOLS_LOGGER_LOG_EVENT": "true",
              "POWERTOOLS_SERVICE_NAME": "chatbot",
              "PROCESSING_BUCKET_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "SAGEMAKER_RAG_MODELS_ENDPOINT": "",
              "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
              "WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME": "by_object_type_idx",
              "WORKSPACES_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-gaia-app-websitepars-5a245cc1",
          "Handler": "index.lambda_handler",
          "Layers": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":lambda:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
                ],
              ],
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
          "MemorySize": 1024,
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": "python3.12",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 900,
          "VpcConfig": {
            "SecurityGroupIds": [
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
            ],
            "SubnetIds": [
              "subnet1",
            ],
          },
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SQS3",
                "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsMasterKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "QueueName": "test-org-test-env-test-domain-test-gaia-app-websiteparserfunctiondlq",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SQS::Queue",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SQS3",
                "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "sqs:*",
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": "*",
                "Sid": "EnforceSSL",
              },
            ],
            "Version": "2012-10-17",
          },
          "Queues": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::SQS::QueuePolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Managed policies are restrictive, logs group resource unknown at deployment and only used during deployment",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.  Resources actions for ECS only support widlcard log group name not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Inline policy maintained by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Inline policy maintained by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Inline policy maintained by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "ManagedPolicyArns": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":iam::aws:policy/AWSLambdaExecute",
                ],
              ],
            },
          ],
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-websitepar--3c946b49",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Managed policies are restrictive, logs group resource unknown at deployment and only used during deployment",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.  Resources actions for ECS only support widlcard log group name not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Inline policy maintained by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Inline policy maintained by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Inline policy maintained by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-websiteparserfunction*",
                    ],
                  ],
                },
              },
              {
                "Action": "logs:CreateLogGroup",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-websiteparserfunction*",
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": "sqs:SendMessage",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "ssm:DescribeParameters",
                  "ssm:GetParameters",
                  "ssm:GetParameter",
                  "ssm:GetParameterHistory",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:DescribeSecret",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*",
                  "s3:DeleteObject*",
                  "s3:PutObject",
                  "s3:PutObjectLegalHold",
                  "s3:PutObjectRetention",
                  "s3:PutObjectTagging",
                  "s3:PutObjectVersionTagging",
                  "s3:Abort*",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:DescribeSecret",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "bedrock:InvokeModel",
                  "bedrock:InvokeModelWithResponseStream",
                ],
                "Condition": {
                  "StringEquals": {
                    "aws:RequestedRegion": "ca-central-1",
                  },
                },
                "Effect": "Allow",
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:98:25] Function will be throttled by upstream services.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:98:25] Function will be throttled by upstream services.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:98:25] Function will be throttled by upstream services.",
              },
              {
                "id": "AwsSolutions-IAM4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Managed policies are restrictive, logs group resource unknown at deployment and only used during deployment",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Policy restricted to stack managed processing bucket and embedding model invoke endpoint unknown at deployment",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "GroupDescription": "Automatic security group for Lambda Function testorgtestenvtestdomaintestgaiaappgaiaRagEnginesDataImportWebsiteCrawlingWorkflowWebsiteParserFunctionB436DDCF",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "XXXXXXXX",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "HIPAA.Security-DynamoDBInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
              },
              {
                "id": "PCI.DSS.321-DynamoDBInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
              },
              {
                "id": "NIST.800.53.R5-DynamoDBInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
              },
              {
                "id": "NIST.800.53.R5-DynamoDBAutoScalingEnabled",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
              },
              {
                "id": "HIPAA.Security-DynamoDBAutoScalingEnabled",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
              },
              {
                "id": "PCI.DSS.321-DynamoDBAutoScalingEnabled",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AttributeDefinitions": [
            {
              "AttributeName": "workspace_id",
              "AttributeType": "S",
            },
            {
              "AttributeName": "document_id",
              "AttributeType": "S",
            },
            {
              "AttributeName": "compound_sort_key",
              "AttributeType": "S",
            },
          ],
          "BillingMode": "PAY_PER_REQUEST",
          "DeletionProtectionEnabled": true,
          "GlobalSecondaryIndexes": [
            {
              "IndexName": "by_compound_key_idx",
              "KeySchema": [
                {
                  "AttributeName": "workspace_id",
                  "KeyType": "HASH",
                },
                {
                  "AttributeName": "compound_sort_key",
                  "KeyType": "RANGE",
                },
              ],
              "Projection": {
                "ProjectionType": "ALL",
              },
            },
          ],
          "KeySchema": [
            {
              "AttributeName": "workspace_id",
              "KeyType": "HASH",
            },
            {
              "AttributeName": "document_id",
              "KeyType": "RANGE",
            },
          ],
          "PointInTimeRecoverySpecification": {
            "PointInTimeRecoveryEnabled": true,
          },
          "SSESpecification": {
            "KMSMasterKeyId": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "SSEEnabled": true,
            "SSEType": "KMS",
          },
          "TableName": "test-org-test-env-test-domain-test-gaia-app-test-org-test-env-test-domain-test-gaia-app-documents",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::DynamoDB::Table",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "HIPAA.Security-DynamoDBInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
              },
              {
                "id": "PCI.DSS.321-DynamoDBInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
              },
              {
                "id": "NIST.800.53.R5-DynamoDBInBackupPlan",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
              },
              {
                "id": "NIST.800.53.R5-DynamoDBAutoScalingEnabled",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
              },
              {
                "id": "HIPAA.Security-DynamoDBAutoScalingEnabled",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
              },
              {
                "id": "PCI.DSS.321-DynamoDBAutoScalingEnabled",
                "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AttributeDefinitions": [
            {
              "AttributeName": "workspace_id",
              "AttributeType": "S",
            },
            {
              "AttributeName": "object_type",
              "AttributeType": "S",
            },
            {
              "AttributeName": "created_at",
              "AttributeType": "S",
            },
          ],
          "BillingMode": "PAY_PER_REQUEST",
          "DeletionProtectionEnabled": true,
          "GlobalSecondaryIndexes": [
            {
              "IndexName": "by_object_type_idx",
              "KeySchema": [
                {
                  "AttributeName": "object_type",
                  "KeyType": "HASH",
                },
                {
                  "AttributeName": "created_at",
                  "KeyType": "RANGE",
                },
              ],
              "Projection": {
                "ProjectionType": "ALL",
              },
            },
          ],
          "KeySchema": [
            {
              "AttributeName": "workspace_id",
              "KeyType": "HASH",
            },
            {
              "AttributeName": "object_type",
              "KeyType": "RANGE",
            },
          ],
          "PointInTimeRecoverySpecification": {
            "PointInTimeRecoveryEnabled": true,
          },
          "SSESpecification": {
            "KMSMasterKeyId": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
            "SSEEnabled": true,
            "SSEType": "KMS",
          },
          "TableName": "test-org-test-env-test-domain-test-gaia-app-test-org-test-env-test-domain-test-gaia-app-workspaces",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::DynamoDB::Table",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Invoke function restricted to delete workspace lambda.  The lambda arn is not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "DefinitionString": {
            "Fn::Join": [
              "",
              [
                "{"StartAt":"SetDeleting","States":{"SetDeleting":{"Next":"Delete","Type":"Task","ResultPath":null,"Resource":"arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"object_type":{"S":"workspace"}},"TableName":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":statusValue":{"S":"deleting"}},"UpdateExpression":"set #status=:statusValue"}},"Delete":{"Next":"Success","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.deleteResult","Next":"HandleError"}],"Type":"Task","ResultPath":"$.deleteResult","Resource":"arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":states:::lambda:invoke","Parameters":{"FunctionName":"",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "","Payload.$":"$"}},"Success":{"Type":"Succeed"},"HandleError":{"Next":"Fail","Type":"Task","Resource":"arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"object_type":{"S":"workspace"}},"TableName":"",
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
                "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":error":{"S":"error"}},"UpdateExpression":"set #status = :error"}},"Fail":{"Type":"Fail","Cause":"Workspace deletion failed"}},"TimeoutSeconds":300,"Comment":"Delete Workspace Workflow"}",
              ],
            ],
          },
          "LoggingConfiguration": {
            "Destinations": [
              {
                "CloudWatchLogsLogGroup": {
                  "LogGroupArn": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
              },
            ],
            "Level": "ALL",
          },
          "RoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "TracingConfiguration": {
            "Enabled": true,
          },
        },
        "Type": "AWS::StepFunctions::StateMachine",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Permissions are restrictive to stack resources. Processing s3 bucket managed and deployed by stack, not known at deployment.  KMS key resource deployed and managed by stack, not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-deleteworks-763a77c7",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
              },
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Permissions are restrictive to stack resources. Processing s3 bucket managed and deployed by stack, not known at deployment.  KMS key resource deployed and managed by stack, not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-delete-workspace-handler*",
                    ],
                  ],
                },
              },
              {
                "Action": "logs:CreateLogGroup",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-app-delete-workspace-handler*",
                    ],
                  ],
                },
              },
              {
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": "sqs:SendMessage",
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:DescribeSecret",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*",
                  "s3:DeleteObject*",
                  "s3:PutObject",
                  "s3:PutObjectLegalHold",
                  "s3:PutObjectRetention",
                  "s3:PutObjectTagging",
                  "s3:PutObjectVersionTagging",
                  "s3:Abort*",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              {
                "Action": [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*",
                  "s3:DeleteObject*",
                  "s3:PutObject",
                  "s3:PutObjectLegalHold",
                  "s3:PutObjectRetention",
                  "s3:PutObjectTagging",
                  "s3:PutObjectVersionTagging",
                  "s3:Abort*",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        "/index/*",
                      ],
                    ],
                  },
                ],
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked synchronously.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Architectures": [
            "x86_64",
          ],
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "DeadLetterConfig": {
            "TargetArn": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
          },
          "Environment": {
            "Variables": {
              "AURORA_DB_SECRET_ID": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "DEFAULT_KENDRA_S3_DATA_SOURCE_BUCKET_NAME": "",
              "DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME": "by_compound_key_idx",
              "DOCUMENTS_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "LOG_LEVEL": "INFO",
              "POWERTOOLS_DEV": "true",
              "POWERTOOLS_LOGGER_LOG_EVENT": "true",
              "POWERTOOLS_SERVICE_NAME": "chatbot",
              "PROCESSING_BUCKET_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "UPLOAD_BUCKET_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
              "WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME": "by_object_type_idx",
              "WORKSPACES_TABLE_NAME": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-gaia-app-delete-work-6abfc1a1",
          "Handler": "index.lambda_handler",
          "Layers": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":lambda:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
                ],
              ],
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": "python3.12",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 900,
          "VpcConfig": {
            "SecurityGroupIds": [
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "GroupId",
                ],
              },
            ],
            "SubnetIds": [
              "subnet1",
            ],
          },
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked synchronously.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "GroupDescription": "Automatic security group for Lambda Function testorgtestenvtestdomaintestgaiaappgaiaRagEnginesWorkspacesDeleteWorkspaceDeleteWorkspaceFunctionEC7E8FA7",
          "SecurityGroupEgress": [
            {
              "CidrIp": "0.0.0.0/0",
              "Description": "Allow all outbound traffic by default",
              "IpProtocol": "-1",
            },
          ],
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "VpcId": "XXXXXXXX",
        },
        "Type": "AWS::EC2::SecurityGroup",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SQS3",
                "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsMasterKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "QueueName": "test-org-test-env-test-domain-test-gaia-app-deleteworkspacehandlerhandlerdlq",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SQS::Queue",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SQS3",
                "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "sqs:*",
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": "false",
                  },
                },
                "Effect": "Deny",
                "Principal": {
                  "AWS": "*",
                },
                "Resource": "*",
                "Sid": "EnforceSSL",
              },
            ],
            "Version": "2012-10-17",
          },
          "Queues": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::SQS::QueuePolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod",
                "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "LogGroupName": "/aws/stepfunction/test-org-test-env-test-domain-test-gaia-app-delete-workspace",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::Logs::LogGroup",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Invoke function restricted to delete workspace lambda.  The lambda arn is not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "states.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Invoke function restricted to delete workspace lambda.  The lambda arn is not known at deployment time.",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "dynamodb:UpdateItem",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":dynamodb:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":table/",
                      {
                        "Ref": "REPLACED-CFN-LOGICAL-ID",
                      },
                    ],
                  ],
                },
              },
              {
                "Action": "lambda:InvokeFunction",
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "REPLACED-CFN-LOGICAL-ID",
                            "Arn",
                          ],
                        },
                        ":*",
                      ],
                    ],
                  },
                ],
              },
              {
                "Action": [
                  "logs:CreateLogDelivery",
                  "logs:GetLogDelivery",
                  "logs:UpdateLogDelivery",
                  "logs:DeleteLogDelivery",
                  "logs:ListLogDeliveries",
                  "logs:PutResourcePolicy",
                  "logs:DescribeResourcePolicies",
                  "logs:DescribeLogGroups",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                  "xray:GetSamplingRules",
                  "xray:GetSamplingTargets",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-SMG4",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:230:25] Key entry is managed via the console and ties to 3rd party api keys, no support for automatic rotation",
              },
              {
                "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:230:25] Key entry is managed via the console and ties to 3rd party api keys, no support for automatic rotation",
              },
              {
                "id": "HIPAA.Security-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:230:25] Key entry is managed via the console and ties to 3rd party api keys, no support for automatic rotation",
              },
              {
                "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:230:25] Key entry is managed via the console and ties to 3rd party api keys, no support for automatic rotation",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "KmsKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "SecretString": "{}",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SecretsManager::Secret",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "CompatibleArchitectures": [
            "x86_64",
          ],
          "CompatibleRuntimes": [
            "python3.12",
          ],
          "Content": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
        },
        "Type": "AWS::Lambda::LayerVersion",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": "{"dataAdminRoles":[{"name":"Admin"}],"prefix":"testing","bedrock":{"enabled":true,"region":"ca-central-1"},"llms":{"sagemaker":[]},"rag":{"engines":{"sagemaker":{"instanceType":"ml.inf1.xlarge"},"aurora":{"minCapacity":0.5,"maxCapacity":4},"knowledgeBase":{}},"embeddingsModels":[{"provider":"bedrock","name":"amazon.titan-embed-text-v2:0","dimensions":1024,"isDefault":true}],"crossEncoderModels":[]},"auth":{"authType":"email_pass","cognitoDomain":"some-unique-pool-domain-name"},"setApiGateWayAccountCloudwatchRole":true,"skipApiGatewayDefaultWaf":true,"vpc":{"vpcId":"XXXXXXXX","appSecurityGroupId":"sg-12345351356","appSubnets":["subnet1"],"dataSecurityGroupId":"sg-46576878787","dataSubnets":["subnet2"]}}",
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestgaiaappgaiaLangchainInterfaceRequestHandlerSecurityGroupB9092AF6:{IndirectPort}",
          "FromPort": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Endpoint.Port",
            ],
          },
          "GroupId": "sg-46576878787",
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Endpoint.Port",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestgaiaappgaiaRagEnginesAuroraPgVectoraurorapostgrespgvectorRotationSingleUserSecurityGroupD1301F2A:{IndirectPort}",
          "FromPort": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Endpoint.Port",
            ],
          },
          "GroupId": "sg-46576878787",
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Endpoint.Port",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestgaiaappgaiaRagEnginesDataImportFileImportBatchJobManagedEc2EcsComputeEnvironmentSecurityGroup82421264:{IndirectPort}",
          "FromPort": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Endpoint.Port",
            ],
          },
          "GroupId": "sg-46576878787",
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Endpoint.Port",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestgaiaappgaiaRagEnginesDataImportWebsiteCrawlingWorkflowWebsiteParserFunctionSecurityGroupEC61AB1F:{IndirectPort}",
          "FromPort": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Endpoint.Port",
            ],
          },
          "GroupId": "sg-46576878787",
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Endpoint.Port",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestgaiaappgaiaRagEnginesWorkspacesDeleteWorkspaceDeleteWorkspaceFunctionSecurityGroup6BBA0A7E:{IndirectPort}",
          "FromPort": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Endpoint.Port",
            ],
          },
          "GroupId": "sg-46576878787",
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "ToPort": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Endpoint.Port",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Description": "from testorgtestenvtestdomaintestgaiaappgaiaSharedDefaultAppSecurityGroupFC2A0222:{IndirectPort}",
          "FromPort": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Endpoint.Port",
            ],
          },
          "GroupId": "sg-46576878787",
          "IpProtocol": "tcp",
          "SourceSecurityGroupId": "sg-12345351356",
          "ToPort": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Endpoint.Port",
            ],
          },
        },
        "Type": "AWS::EC2::SecurityGroupIngress",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "CompatibleArchitectures": [
            "x86_64",
          ],
          "CompatibleRuntimes": [
            "python3.12",
          ],
          "Content": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
        },
        "Type": "AWS::Lambda::LayerVersion",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "NIST.800.53.R5-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:146:25] Function is for Secrets Manager rotation and error handling will be handled by Secrets Manager.",
              },
              {
                "id": "NIST.800.53.R5-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:146:25] Function is for Secrets Manager rotation and will only execute once a month. Reserved concurrency not appropriate.",
              },
              {
                "id": "HIPAA.Security-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:146:25] Function is for Secrets Manager rotation and error handling will be handled by Secrets Manager.",
              },
              {
                "id": "HIPAA.Security-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:146:25] Function is for Secrets Manager rotation and will only execute once a month. Reserved concurrency not appropriate.",
              },
              {
                "id": "PCI.DSS.321-LambdaDLQ",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:146:25] Function is for Secrets Manager rotation and error handling will be handled by Secrets Manager.",
              },
              {
                "id": "PCI.DSS.321-LambdaConcurrency",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:146:25] Function is for Secrets Manager rotation and will only execute once a month. Reserved concurrency not appropriate.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Architectures": [
            "x86_64",
          ],
          "Code": {
            "S3Bucket": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "S3Key": "REPLACED-GENERATED-NAME.zip",
          },
          "Environment": {
            "Variables": {
              "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
            },
          },
          "FunctionName": "test-org-test-env-test-domain-test-gaia-app-gaiasecrets--7ce725b",
          "Handler": "index.handler",
          "Layers": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
          "MemorySize": 512,
          "Role": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Runtime": "python3.12",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
          "Timeout": 600,
          "TracingConfig": {
            "Mode": "Active",
          },
          "VpcConfig": {
            "SecurityGroupIds": [
              "sg-12345351356",
            ],
            "SubnetIds": [
              "subnet1",
            ],
          },
        },
        "Type": "AWS::Lambda::Function",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Action": "lambda:InvokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Principal": "secretsmanager.amazonaws.com",
        },
        "Type": "AWS::Lambda::Permission",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Resource::*",
                ],
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Secret resource not known ahead of time, role is for a secret rotation lambda managed by secrets manager",
              },
              {
                "applies_to": [
                  "Resource::arn:<AWS::Partition>:ec2:<AWS::Region>:<AWS::AccountId>:network-interface/*",
                ],
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Network interfaces to be created are unknown",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "RoleName": "test-org-test-env-test-domain-test-gaia-app-gaiasecrets-12cb5ffb",
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::IAM::Role",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "applies_to": [
                  "Resource::*",
                ],
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Secret resource not known ahead of time, role is for a secret rotation lambda managed by secrets manager",
              },
              {
                "applies_to": [
                  "Resource::arn:<AWS::Partition>:ec2:<AWS::Region>:<AWS::AccountId>:network-interface/*",
                ],
                "id": "AwsSolutions-IAM5",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Network interfaces to be created are unknown",
              },
              {
                "id": "NIST.800.53.R5-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "HIPAA.Security-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "PCI.DSS.321-IAMNoInlinePolicy",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Inline policy is specific to this role and function.",
              },
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                ],
                "Effect": "Allow",
                "Resource": "*",
              },
              {
                "Action": [
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:DescribeSecret",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "secretsmanager:PutSecretValue",
                  "secretsmanager:UpdateSecret",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": [
                  "secretsmanager:DescribeSecret",
                  "secretsmanager:GetSecretValue",
                  "secretsmanager:PutSecretValue",
                  "secretsmanager:UpdateSecretVersionStage",
                ],
                "Effect": "Allow",
                "Resource": {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              {
                "Action": "secretsmanager:GetRandomPassword",
                "Effect": "Allow",
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "PolicyName": "REPLACED-CFN-LOGICAL-ID",
          "Roles": [
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          ],
        },
        "Type": "AWS::IAM::Policy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Delete",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "GenerateSecretString": {
            "ExcludePunctuation": true,
            "GenerateStringKey": "headerValue",
            "SecretStringTemplate": "{}",
          },
          "KmsKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::SecretsManager::Secret",
        "UpdateReplacePolicy": "Delete",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/origin/verify/secret/arn",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "ResourcePolicy": {
            "Statement": [
              {
                "Action": "secretsmanager:DeleteSecret",
                "Effect": "Deny",
                "Principal": {
                  "AWS": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":iam::",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":root",
                      ],
                    ],
                  },
                },
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "SecretId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SecretsManager::ResourcePolicy",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DependsOn": [
          "REPLACED-CFN-LOGICAL-ID",
        ],
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "RotationLambdaARN": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "RotationRules": {
            "ScheduleExpression": "rate(30 days)",
          },
          "SecretId": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SecretsManager::RotationSchedule",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "DeletionPolicy": "Retain",
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "EnableKeyRotation": true,
          "Enabled": true,
          "KeyPolicy": {
            "Statement": [
              {
                "Action": "kms:*",
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":iam::",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":root",
                      ],
                    ],
                  },
                },
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncryptFrom",
                  "kms:ReEncryptTo",
                  "kms:GenerateDataKey",
                  "kms:GenerateDataKeyWithoutPlaintext",
                  "kms:GenerateDataKeyPair",
                  "kms:GenerateDataKeyPairWithoutPlaintext",
                ],
                "Condition": {
                  "ArnEquals": {
                    "kms:EncryptionContext:aws:logs:arn": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:*",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "Service": {
                    "Fn::Join": [
                      "",
                      [
                        "logs.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
                "Resource": "*",
                "Sid": "CloudWatchLogsEncryption",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Condition": {
                  "StringEquals": {
                    "kms:ViaService": {
                      "Fn::Join": [
                        "",
                        [
                          "secretsmanager.",
                          {
                            "Ref": "AWS::Region",
                          },
                          ".amazonaws.com",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":iam::",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":root",
                      ],
                    ],
                  },
                },
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:CreateGrant",
                  "kms:DescribeKey",
                ],
                "Condition": {
                  "StringEquals": {
                    "kms:ViaService": {
                      "Fn::Join": [
                        "",
                        [
                          "secretsmanager.",
                          {
                            "Ref": "AWS::Region",
                          },
                          ".amazonaws.com",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":iam::",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":root",
                      ],
                    ],
                  },
                },
                "Resource": "*",
              },
              {
                "Action": "kms:Decrypt",
                "Condition": {
                  "StringEquals": {
                    "kms:ViaService": {
                      "Fn::Join": [
                        "",
                        [
                          "secretsmanager.",
                          {
                            "Ref": "AWS::Region",
                          },
                          ".amazonaws.com",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Condition": {
                  "StringEquals": {
                    "kms:ViaService": {
                      "Fn::Join": [
                        "",
                        [
                          "secretsmanager.",
                          {
                            "Ref": "AWS::Region",
                          },
                          ".amazonaws.com",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Condition": {
                  "StringEquals": {
                    "kms:ViaService": {
                      "Fn::Join": [
                        "",
                        [
                          "secretsmanager.",
                          {
                            "Ref": "AWS::Region",
                          },
                          ".amazonaws.com",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
                "Resource": "*",
              },
              {
                "Action": "kms:Decrypt",
                "Condition": {
                  "StringEquals": {
                    "kms:ViaService": {
                      "Fn::Join": [
                        "",
                        [
                          "secretsmanager.",
                          {
                            "Ref": "AWS::Region",
                          },
                          ".amazonaws.com",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                "Effect": "Allow",
                "Principal": {
                  "Service": "logs.amazonaws.com",
                },
                "Resource": "*",
              },
              {
                "Action": "kms:Decrypt",
                "Condition": {
                  "StringEquals": {
                    "kms:ViaService": {
                      "Fn::Join": [
                        "",
                        [
                          "secretsmanager.",
                          {
                            "Ref": "AWS::Region",
                          },
                          ".amazonaws.com",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
                "Resource": "*",
              },
              {
                "Action": "kms:Decrypt",
                "Condition": {
                  "StringEquals": {
                    "kms:ViaService": {
                      "Fn::Join": [
                        "",
                        [
                          "secretsmanager.",
                          {
                            "Ref": "AWS::Region",
                          },
                          ".amazonaws.com",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
                "Resource": "*",
              },
              {
                "Action": "kms:Decrypt",
                "Condition": {
                  "StringEquals": {
                    "kms:ViaService": {
                      "Fn::Join": [
                        "",
                        [
                          "secretsmanager.",
                          {
                            "Ref": "AWS::Region",
                          },
                          ".amazonaws.com",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
                "Resource": "*",
              },
              {
                "Action": "kms:Decrypt",
                "Condition": {
                  "StringEquals": {
                    "kms:ViaService": {
                      "Fn::Join": [
                        "",
                        [
                          "secretsmanager.",
                          {
                            "Ref": "AWS::Region",
                          },
                          ".amazonaws.com",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
                "Resource": "*",
              },
              {
                "Action": "kms:Decrypt",
                "Condition": {
                  "StringEquals": {
                    "kms:ViaService": {
                      "Fn::Join": [
                        "",
                        [
                          "secretsmanager.",
                          {
                            "Ref": "AWS::Region",
                          },
                          ".amazonaws.com",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
                "Resource": "*",
              },
              {
                "Action": [
                  "kms:Decrypt",
                  "kms:GenerateDataKey",
                ],
                "Effect": "Allow",
                "Principal": {
                  "Service": "sns.amazonaws.com",
                },
                "Resource": "*",
              },
              {
                "Action": "kms:Decrypt",
                "Condition": {
                  "StringEquals": {
                    "kms:ViaService": {
                      "Fn::Join": [
                        "",
                        [
                          "secretsmanager.",
                          {
                            "Ref": "AWS::Region",
                          },
                          ".amazonaws.com",
                        ],
                      ],
                    },
                  },
                },
                "Effect": "Allow",
                "Principal": {
                  "AWS": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "Tags": [
            {
              "Key": "mdaa_cdk_app",
              "Value": "gaia",
            },
            {
              "Key": "mdaa_domain",
              "Value": "test-domain",
            },
            {
              "Key": "mdaa_env",
              "Value": "test-env",
            },
            {
              "Key": "mdaa_module_name",
              "Value": "test-gaia-app",
            },
            {
              "Key": "mdaa_org",
              "Value": "test-org",
            },
          ],
        },
        "Type": "AWS::KMS::Key",
        "UpdateReplacePolicy": "Retain",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "AliasName": "alias/test-org-test-env-test-domain-test-gaia-app",
          "TargetKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::KMS::Alias",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/kms/arn",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
      "REPLACED-CFN-LOGICAL-ID": {
        "Metadata": {
          "cdk_nag": {
            "rules_to_suppress": [
              {
                "id": "AwsSolutions-L1",
                "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
              },
            ],
          },
        },
        "Properties": {
          "Name": "/test-org/test-domain/test-gaia-app/kms/id",
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-app",
            "mdaa_org": "test-org",
          },
          "Type": "String",
          "Value": {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        },
        "Type": "AWS::SSM::Parameter",
      },
    },
    "Rules": {
      "CheckBootstrapVersion": {
        "Assertions": [
          {
            "Assert": {
              "Fn::Not": [
                {
                  "Fn::Contains": [
                    [
                      "1",
                      "2",
                      "3",
                      "4",
                      "5",
                    ],
                    {
                      "Ref": "BootstrapVersion",
                    },
                  ],
                },
              ],
            },
            "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
          },
        ],
      },
    },
    "Transform": "AWS::Serverless-2016-10-31",
  },
}
`;

exports[`GAIA Snapshot Tests GAIA Stack Snapshot Test 1`] = `
{
  "Description": "(SO0320-gaia) Modern Data Architecture Accelerator. Version 1.0.0",
  "Mappings": {
    "LatestNodeRuntimeMap": {
      "af-south-1": {
        "value": "nodejs22.x",
      },
      "ap-east-1": {
        "value": "nodejs22.x",
      },
      "ap-east-2": {
        "value": "nodejs22.x",
      },
      "ap-northeast-1": {
        "value": "nodejs22.x",
      },
      "ap-northeast-2": {
        "value": "nodejs22.x",
      },
      "ap-northeast-3": {
        "value": "nodejs22.x",
      },
      "ap-south-1": {
        "value": "nodejs22.x",
      },
      "ap-south-2": {
        "value": "nodejs22.x",
      },
      "ap-southeast-1": {
        "value": "nodejs22.x",
      },
      "ap-southeast-2": {
        "value": "nodejs22.x",
      },
      "ap-southeast-3": {
        "value": "nodejs22.x",
      },
      "ap-southeast-4": {
        "value": "nodejs22.x",
      },
      "ap-southeast-5": {
        "value": "nodejs22.x",
      },
      "ap-southeast-7": {
        "value": "nodejs22.x",
      },
      "ca-central-1": {
        "value": "nodejs22.x",
      },
      "ca-west-1": {
        "value": "nodejs22.x",
      },
      "cn-north-1": {
        "value": "nodejs22.x",
      },
      "cn-northwest-1": {
        "value": "nodejs22.x",
      },
      "eu-central-1": {
        "value": "nodejs22.x",
      },
      "eu-central-2": {
        "value": "nodejs22.x",
      },
      "eu-isoe-west-1": {
        "value": "nodejs18.x",
      },
      "eu-north-1": {
        "value": "nodejs22.x",
      },
      "eu-south-1": {
        "value": "nodejs22.x",
      },
      "eu-south-2": {
        "value": "nodejs22.x",
      },
      "eu-west-1": {
        "value": "nodejs22.x",
      },
      "eu-west-2": {
        "value": "nodejs22.x",
      },
      "eu-west-3": {
        "value": "nodejs22.x",
      },
      "il-central-1": {
        "value": "nodejs22.x",
      },
      "me-central-1": {
        "value": "nodejs22.x",
      },
      "me-south-1": {
        "value": "nodejs22.x",
      },
      "mx-central-1": {
        "value": "nodejs22.x",
      },
      "sa-east-1": {
        "value": "nodejs22.x",
      },
      "us-east-1": {
        "value": "nodejs22.x",
      },
      "us-east-2": {
        "value": "nodejs22.x",
      },
      "us-gov-east-1": {
        "value": "nodejs22.x",
      },
      "us-gov-west-1": {
        "value": "nodejs22.x",
      },
      "us-iso-east-1": {
        "value": "nodejs18.x",
      },
      "us-iso-west-1": {
        "value": "nodejs18.x",
      },
      "us-isob-east-1": {
        "value": "nodejs18.x",
      },
      "us-isob-west-1": {
        "value": "nodejs18.x",
      },
      "us-west-1": {
        "value": "nodejs22.x",
      },
      "us-west-2": {
        "value": "nodejs22.x",
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "aws": {
        "applicationId": arn:aws:serverlessrepo:us-east-1:REPLACED-ACCOUNT-ID:applications/SecretsManagerRDSPostgreSQLRotationSingleUser,
        "semanticVersion": "1.1.367",
      },
      "aws-cn": {
        "applicationId": arn:aws-cn:serverlessrepo:cn-north-1:REPLACED-ACCOUNT-ID:applications/SecretsManagerRDSPostgreSQLRotationSingleUser,
        "semanticVersion": "1.1.237",
      },
      "aws-us-gov": {
        "applicationId": arn:aws-us-gov:serverlessrepo:us-gov-west-1:REPLACED-ACCOUNT-ID:applications/SecretsManagerRDSPostgreSQLRotationSingleUser,
        "semanticVersion": "1.1.213",
      },
    },
  },
  "Outputs": {
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-gaia-main:lambda:databasesetupfunctionhandler:arn",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "Arn",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-gaia-main:lambda:databasesetupfunctionhandler:name",
      },
      "Value": {
        "Ref": "REPLACED-CFN-LOGICAL-ID",
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Value": {
        "Ref": "REPLACED-CFN-LOGICAL-ID",
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::Region",
            },
            ".console.aws.amazon.com/cognito/v2/idp/user-pools/",
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "/users?region=",
            {
              "Ref": "AWS::Region",
            },
          ],
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Value": {
        "Ref": "REPLACED-CFN-LOGICAL-ID",
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "/",
          ],
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-gaia-main:role:genaiadminbackendrestapicloudwatch:arn",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "Arn",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-gaia-main:role:genaiadminbackendrestapicloudwatch:id",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "RoleId",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-gaia-main:role:genaiadminbackendrestapicloudwatch:name",
      },
      "Value": {
        "Ref": "REPLACED-CFN-LOGICAL-ID",
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-gaia-main:role:testclusterenhancedmonitoringrole:arn",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "Arn",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-gaia-main:role:testclusterenhancedmonitoringrole:id",
      },
      "Value": {
        "Fn::GetAtt": [
          "REPLACED-CFN-LOGICAL-ID",
          "RoleId",
        ],
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Export": {
        "Name": "test-org:test-domain:test-gaia-main:role:testclusterenhancedmonitoringrole:name",
      },
      "Value": {
        "Ref": "REPLACED-CFN-LOGICAL-ID",
      },
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Value": {
        "Fn::Join": [
          "-",
          [
            {
              "Fn::Select": [
                0,
                {
                  "Fn::Split": [
                    "-",
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            ":",
                            {
                              "Ref": "REPLACED-CFN-LOGICAL-ID",
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            {
              "Fn::Select": [
                1,
                {
                  "Fn::Split": [
                    "-",
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            ":",
                            {
                              "Ref": "REPLACED-CFN-LOGICAL-ID",
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValuetestorgtestdomaincaefbootstraprolehelperservicetokenC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/test-org/test-domain/caef-bootstrap/role-helper-service-token",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client("s3")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

def handler(event: dict, context):
  response_status = "SUCCESS"
  error_message = ""
  try:
    props = event["ResourceProperties"]
    notification_configuration = props["NotificationConfiguration"]
    managed = props.get('Managed', 'true').lower() == 'true'
    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'
    stack_id = event['StackId']
    old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
    if managed:
      config = handle_managed(event["RequestType"], notification_configuration)
    else:
      config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
    s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)
  except Exception as e:
    logging.exception("Failed to put bucket notification configuration")
    response_status = "FAILED"
    error_message = f"Error: {str(e)}. "
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
  def get_id(n):
    n['Id'] = ''
    sorted_notifications = sort_filter_rules(n)
    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('"Name": "prefix"', '"Name": "Prefix"').replace('"Name": "suffix"', '"Name": "Suffix"')
    return f"{stack_id}-{hash(strToHash)}"
  def with_id(n):
    n['Id'] = get_id(n)
    return n

  external_notifications = {}
  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
  for t in CONFIGURATION_TYPES:
    if request_type == 'Update':
        old_incoming_ids = [get_id(n) for n in old.get(t, [])]
        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      
    elif request_type == 'Delete':
        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]
    elif request_type == 'Create':
        external_notifications[t] = [n for n in existing_notifications.get(t, [])]
  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  if request_type == 'Delete':
    return external_notifications

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      "Status": response_status,
      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
      "StackId": event["StackId"],
      "RequestId": event["RequestId"],
      "LogicalResourceId": event["LogicalResourceId"],
      "NoEcho": False,
    }
  ).encode("utf-8")
  headers = {"content-type": "", "content-length": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode("utf-8"))
    print("Status code: " + response.reason)
  except Exception as e:
      print("send(..) failed executing request.urlopen(..): " + str(e))

def sort_filter_rules(json_obj):
  if not isinstance(json_obj, dict):
      return json_obj
  for key, value in json_obj.items():
      if isinstance(value, dict):
          json_obj[key] = sort_filter_rules(value)
      elif isinstance(value, list):
          json_obj[key] = [sort_filter_rules(item) for item in value]
  if "Filter" in json_obj and "Key" in json_obj["Filter"] and "FilterRules" in json_obj["Filter"]["Key"]:
      filter_rules = json_obj["Filter"]["Key"]["FilterRules"]
      sorted_filter_rules = sorted(filter_rules, key=lambda x: x["Name"])
      json_obj["Filter"]["Key"]["FilterRules"] = sorted_filter_rules
  return json_obj",
        },
        "Description": "AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Properties": {
        "Description": "Stack description parameter to update on version changes",
        "Name": "/test-org/test-domain/test-gaia-main/aws-solution",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": "(SO0320-gaia) Modern Data Architecture Accelerator. Version 1.0.0",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Environment": {
          "Variables": {
            "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-gaia-main-databasese--70d9798",
        "Handler": "index.lambda_handler",
        "Layers": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":lambda:",
                {
                  "Ref": "AWS::Region",
                },
                ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
              ],
            ],
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 60,
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-46576878787",
          ],
          "SubnetIds": [
            "subnet2",
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/lambda/databasesetupfunction-handler/arn",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:114:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/lambda/databasesetupfunction-handler/name",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:72:27] Function is for custom resource; inline policy use appropriate",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:72:27] Function is for custom resource; inline policy use appropriate",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:72:27] Function is for custom resource; inline policy use appropriate",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetResourcePolicy",
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:ListSecretVersionIds",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseSetupFunction-handler",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-databasese--70d9798",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-databasese--70d9798*",
                  ],
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-databasese--70d9798*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "REPLACED-CFN-LOGICAL-ID",
                        "DBClusterResourceId",
                      ],
                    },
                    "/postgres",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Lambda function Runtime set by CDK Provider Framework",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and error handling will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:194:25] Function is for custom resource and will only execute during stack deployement. Reserved concurrency not appropriate.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (test-org-test-env-test-domain-test-gaia-main/custom-DatabaseSetupFunction-provider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-gaia-main-databases--15a0e76d",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "CR Role",
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-databases--15a0e76d",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/custom-constructs/lib/custom.ts:166:25] Role is for Custom Resource Provider. Inline policy automatically added.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment and interacts only with S3.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment. Errors will be handled by CloudFormation.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Function is used only as custom resource during CDK deployment.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:162:29] Policy managed by CDK and only used during deployment.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-databases--15a0e76d*",
                  ],
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-databases--15a0e76d*",
                  ],
                ],
              },
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:GetFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AllowUnauthenticatedIdentities": false,
        "CognitoIdentityProviders": [
          {
            "ClientId": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "ProviderName": {
              "Fn::Join": [
                "",
                [
                  "cognito-idp.",
                  {
                    "Ref": "AWS::Region",
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/",
                  {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                ],
              ],
            },
            "ServerSideTokenCheck": true,
          },
        ],
        "IdentityPoolName": "test-org-test-env-test-domain-test-gaia-main",
        "IdentityPoolTags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::Cognito::IdentityPool",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "authenticated",
                },
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": {
          "Fn::Join": [
            "",
            [
              "Default Authenticated Role for Identity Pool ",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Name",
                ],
              },
            ],
          ],
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "IdentityPoolId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Roles": {
          "authenticated": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "unauthenticated": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/auth/cognito/identity/pool/id",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "unauthenticated",
                },
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": {
          "Fn::Join": [
            "",
            [
              "Default Unauthenticated Role for Identity Pool ",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Name",
                ],
              },
            ],
          ],
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Default SMS Role created by UserPool, resource not known at deployment time and not used",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": true,
        },
        "AutoVerifiedAttributes": [
          "email",
          "phone_number",
        ],
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireSymbols": true,
            "RequireUppercase": true,
          },
        },
        "SmsConfiguration": {
          "ExternalId": "REPLACED-CFN-LOGICAL-ID",
          "SnsCallerArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UserPoolAddOns": {
          "AdvancedSecurityMode": "ENFORCED",
        },
        "UserPoolName": "test-org-test-env-test-domain-test-gaia-main",
        "UserPoolTags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "UserPoolTier": "PLUS",
        "UsernameAttributes": [
          "email",
        ],
        "VerificationMessageTemplate": {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/auth/cognito/user/pool/domain",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/auth/cognito/user/pool/id",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Default SMS Role created by UserPool, resource not known at deployment time and not used",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AllowedOAuthFlows": [
          "implicit",
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": [
          "profile",
          "phone",
          "email",
          "openid",
          "aws.cognito.signin.user.admin",
        ],
        "CallbackURLs": [
          "https://example.com",
        ],
        "ExplicitAuthFlows": [
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_ADMIN_USER_PASSWORD_AUTH",
          "ALLOW_USER_SRP_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH",
        ],
        "GenerateSecret": false,
        "SupportedIdentityProviders": [
          "COGNITO",
        ],
        "UserPoolId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Default SMS Role created by UserPool, resource not known at deployment time and not used",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Domain": "some-unique-pool-domain-name",
        "UserPoolId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::Cognito::UserPoolDomain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/auth/cognito/user/pool/client/id",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Default SMS Role created by UserPool, resource not known at deployment time and not used",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/authentication/index.ts:157:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "REPLACED-CFN-LOGICAL-ID",
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "cognito-idp.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "sns:Publish",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "sns-publish",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-S1",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "NIST.800.53.R5-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "HIPAA.Security-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "PCI.DSS.321-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "NIST.800.53.R5-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/index.ts:55:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "HIPAA.Security-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/index.ts:55:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "PCI.DSS.321-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/index.ts:55:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AccelerateConfiguration": {
          "AccelerationStatus": "Enabled",
        },
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": {
                "KMSMasterKeyID": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "BucketName": "test-org-test-env-test-domain-test-gaia-main-test-org-t-46a3bbd",
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-S1",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "NIST.800.53.R5-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "HIPAA.Security-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "PCI.DSS.321-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "NIST.800.53.R5-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/index.ts:55:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "HIPAA.Security-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/index.ts:55:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "PCI.DSS.321-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/index.ts:55:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Bucket": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-server-side-encryption": "AES256",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "REPLACED-CFN-LOGICAL-ID",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "DenyAES",
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringNotLikeIfExists": {
                  "s3:x-amz-server-side-encryption-aws-kms-key-id": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "REPLACED-CFN-LOGICAL-ID",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "ForceKMS",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "HIPAA.Security-DynamoDBInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
            },
            {
              "id": "PCI.DSS.321-DynamoDBInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
            },
            {
              "id": "NIST.800.53.R5-DynamoDBInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
            },
            {
              "id": "NIST.800.53.R5-DynamoDBAutoScalingEnabled",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
            },
            {
              "id": "HIPAA.Security-DynamoDBAutoScalingEnabled",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
            },
            {
              "id": "PCI.DSS.321-DynamoDBAutoScalingEnabled",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "SessionId",
            "AttributeType": "S",
          },
          {
            "AttributeName": "UserId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "DeletionProtectionEnabled": true,
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "byUserId",
            "KeySchema": [
              {
                "AttributeName": "UserId",
                "KeyType": "HASH",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "SessionId",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "UserId",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
        "TableName": "test-org-test-env-test-domain-test-gaia-main-test-org-test-env-test-domain-test-gaia-main-sessions",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/table/sessions/name",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked synchronously.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Architectures": [
          "x86_64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Environment": {
          "Variables": {
            "API_KEYS_SECRETS_ARN": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "AURORA_DB_SECRET_ID": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "COGNITO_APP_CLIENT_ID": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "COGNITO_REGION": {
              "Ref": "AWS::Region",
            },
            "COGNITO_USER_POOL_ID": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "CONFIG_PARAMETER_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "CORS_ALLOWED_ORIGINS": "*",
            "CREATE_AURORA_WORKSPACE_WORKFLOW_ARN": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "CREATE_KENDRA_WORKSPACE_WORKFLOW_ARN": "",
            "DEFAULT_KENDRA_INDEX_ID": "",
            "DEFAULT_KENDRA_INDEX_NAME": "",
            "DEFAULT_KENDRA_S3_DATA_SOURCE_BUCKET_NAME": "",
            "DEFAULT_KENDRA_S3_DATA_SOURCE_ID": "",
            "DELETE_WORKSPACE_WORKFLOW_ARN": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME": "by_compound_key_idx",
            "DOCUMENTS_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "FILE_IMPORT_WORKFLOW_ARN": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "LOG_LEVEL": "INFO",
            "MODELS_PARAMETER_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "POWERTOOLS_DEV": "true",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "POWERTOOLS_METRICS_NAMESPACE": "chatbot-admin-restapi",
            "POWERTOOLS_SERVICE_NAME": "chatbot",
            "PROCESSING_BUCKET_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "SAGEMAKER_RAG_MODELS_ENDPOINT": "",
            "SESSIONS_BY_USER_ID_INDEX_NAME": "byUserId",
            "SESSIONS_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "UPLOAD_BUCKET_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
            "WEBSITE_CRAWLING_WORKFLOW_ARN": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME": "by_object_type_idx",
            "WORKSPACES_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "X_ORIGIN_VERIFY_SECRET_ARN": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-gaia-main-rest-api-handler",
        "Handler": "index.handler",
        "Layers": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":lambda:",
                {
                  "Ref": "AWS::Region",
                },
                ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
              ],
            ],
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 600,
        "TracingConfig": {
          "Mode": "Active",
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-12345351356",
          ],
          "SubnetIds": [
            "subnet1",
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Standard Lambda Execution Managed Policy",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] X-Ray and Comprehend actions only support wildcard, and bedrock foundation models access controlled by application along with region restriction, other resources managed by stack and not known at deployment time",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSLambdaExecute",
              ],
            ],
          },
        ],
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-backendres--c67b081",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Standard Lambda Execution Managed Policy",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] X-Ray and Comprehend actions only support wildcard, and bedrock foundation models access controlled by application along with region restriction, other resources managed by stack and not known at deployment time",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-rest-api-handler*",
                  ],
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-rest-api-handler*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "comprehend:DetectDominantLanguage",
                "comprehend:DetectSentiment",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "bedrock:ListFoundationModels",
                "bedrock:ListCustomModels",
                "bedrock:InvokeModelWithResponseStream",
                "bedrock:ListAgents",
                "bedrock:ListAgentAliases",
                "bedrock:ListKnowledgeBases",
                "bedrock:GetKnowledgeBase",
                "bedrock:ListDataSources",
                "bedrock:GetDataSource",
                "bedrock:StartIngestionJob",
                "bedrock:StopIngestionJob",
                "bedrock:ListIngestionJobs",
              ],
              "Condition": {
                "StringEquals": {
                  "aws:RequestedRegion": "ca-central-1",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Standard Lambda Execution Managed Policy",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] X-Ray and Comprehend actions only support wildcard, and bedrock foundation models access controlled by application along with region restriction, other resources managed by stack and not known at deployment time",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/backendrestapihandlerrole/arn",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Standard Lambda Execution Managed Policy",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] X-Ray and Comprehend actions only support wildcard, and bedrock foundation models access controlled by application along with region restriction, other resources managed by stack and not known at deployment time",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/backendrestapihandlerrole/id",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "RoleId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Standard Lambda Execution Managed Policy",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] X-Ray and Comprehend actions only support wildcard, and bedrock foundation models access controlled by application along with region restriction, other resources managed by stack and not known at deployment time",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:120:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/backendrestapihandlerrole/name",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked synchronously.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/lambda/rest-api-handler/arn",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked synchronously.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:605:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/lambda/rest-api-handler/name",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-APIGWAssociatedWithWAF",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
            },
            {
              "id": "PCI.DSS.321-APIGWAssociatedWithWAF",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
            },
            {
              "id": "AwsSolutions-APIG3",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
            },
            {
              "id": "NIST.800.53.R5-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "HIPAA.Security-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "PCI.DSS.321-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-COG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL",
          ],
        },
        "Name": "ChatBotApi",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "gaiaChatBotApiRestApiChatBotApiDeploymentF6C05B750706f5b52df0e0aef053b45178953fef": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-APIGWAssociatedWithWAF",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
            },
            {
              "id": "PCI.DSS.321-APIGWAssociatedWithWAF",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
            },
            {
              "id": "AwsSolutions-APIG3",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
            },
            {
              "id": "NIST.800.53.R5-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "HIPAA.Security-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "PCI.DSS.321-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-COG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-APIGWAssociatedWithWAF",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
            },
            {
              "id": "PCI.DSS.321-APIGWAssociatedWithWAF",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
            },
            {
              "id": "AwsSolutions-APIG3",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
            },
            {
              "id": "NIST.800.53.R5-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "HIPAA.Security-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "PCI.DSS.321-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-COG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Format": "{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","user":"$context.identity.user","caller":"$context.identity.caller","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}",
        },
        "DeploymentId": {
          "Ref": "gaiaChatBotApiRestApiChatBotApiDeploymentF6C05B750706f5b52df0e0aef053b45178953fef",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "MetricsEnabled": true,
            "ResourcePath": "/*",
            "ThrottlingRateLimit": 2500,
          },
          {
            "CacheDataEncrypted": false,
            "CachingEnabled": false,
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "StageName": "api",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "TracingEnabled": true,
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-APIGWAssociatedWithWAF",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
            },
            {
              "id": "PCI.DSS.321-APIGWAssociatedWithWAF",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
            },
            {
              "id": "AwsSolutions-APIG3",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:77:27] For organizations that leverage Firewall Manager to apply WAF, default is to create waf",
            },
            {
              "id": "NIST.800.53.R5-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "HIPAA.Security-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "PCI.DSS.321-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-COG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Max-Age": "'600'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Max-Age": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "RootResourceId",
          ],
        },
        "RestApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "HIPAA.Security-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "PCI.DSS.321-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-COG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "RootResourceId",
          ],
        },
        "PathPart": "v1",
        "RestApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "HIPAA.Security-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "PCI.DSS.321-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-COG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Max-Age": "'600'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Max-Age": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "RestApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "HIPAA.Security-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "PCI.DSS.321-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-COG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "HttpMethod": "ANY",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "RequestValidatorId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "ResourceId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "RestApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "HIPAA.Security-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "PCI.DSS.321-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-COG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "/test-invoke-stage/*/v1/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "HIPAA.Security-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "PCI.DSS.321-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-COG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "/",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "/*/v1/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "HIPAA.Security-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "PCI.DSS.321-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-COG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ParentId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "HIPAA.Security-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "PCI.DSS.321-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-COG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Max-Age": "'600'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Max-Age": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "RestApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "HIPAA.Security-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "PCI.DSS.321-APIGWSSLEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Integrations/backend are Lambda functions. Backend client certificate not required.",
            },
            {
              "id": "NIST.800.53.R5-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "HIPAA.Security-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "PCI.DSS.321-APIGWCacheEnabledAndEncrypted",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Caching intentionally disabled.",
            },
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Authorization implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-COG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:136:25] Cognito User Pools implemented for non-OPTIONS methods",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "RestApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true,
      },
      "Type": "AWS::ApiGateway::RequestValidator",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/rest/api/id",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:275:27] AmazonAPIGatewayPushToCloudWatchLogs provides the minimum required permissions for API Gateway logging to Cloudwatch: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-genai-admi-3f8fb40b",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:275:27] AmazonAPIGatewayPushToCloudWatchLogs provides the minimum required permissions for API Gateway logging to Cloudwatch: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/genai-admin-backend-rest-api-cloudwatch/arn",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:275:27] AmazonAPIGatewayPushToCloudWatchLogs provides the minimum required permissions for API Gateway logging to Cloudwatch: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/genai-admin-backend-rest-api-cloudwatch/id",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "RoleId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/rest-api.ts:275:27] AmazonAPIGatewayPushToCloudWatchLogs provides the minimum required permissions for API Gateway logging to Cloudwatch: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/genai-admin-backend-rest-api-cloudwatch/name",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AuthorizerResultTtlInSeconds": 0,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "test-org-test-env-test-domain-test-gaia-main",
        "ProviderARNs": [
          {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        ],
        "RestApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Type": "COGNITO_USER_POOLS",
      },
      "Type": "AWS::ApiGateway::Authorizer",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "LogGroupName": "testing/test-org-test-env-test-domain-test-gaia-main-genai-admin-backend-rest-api-access-logs",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "WebSocketApi",
        "ProtocolType": "WEBSOCKET",
        "RouteSelectionExpression": "$request.body.action",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "AuthorizerType": "REQUEST",
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
        "IdentitySource": [
          "route.request.querystring.token",
        ],
        "Name": "Authorizer",
      },
      "Type": "AWS::ApiGatewayV2::Authorizer",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "HIPAA.Security-DynamoDBInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
            },
            {
              "id": "PCI.DSS.321-DynamoDBInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
            },
            {
              "id": "NIST.800.53.R5-DynamoDBInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
            },
            {
              "id": "NIST.800.53.R5-DynamoDBAutoScalingEnabled",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
            },
            {
              "id": "HIPAA.Security-DynamoDBAutoScalingEnabled",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
            },
            {
              "id": "PCI.DSS.321-DynamoDBAutoScalingEnabled",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "connectionId",
            "AttributeType": "S",
          },
          {
            "AttributeName": "userId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "DeletionProtectionEnabled": true,
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "byUser",
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "connectionId",
            "KeyType": "HASH",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
        "TableName": "test-org-test-env-test-domain-test-gaia-main-test-org-test-env-test-domain-test-gaia-main-connections",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/table/test-org-test-env-test-domain-test-gaia-main-connections/arn",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/table/test-org-test-env-test-domain-test-gaia-main-connections/name",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/socket/api/id",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "TopicName": "test-org-test-env-test-domain-test-gaia-main-wesocketmessagestopic",
      },
      "Type": "AWS::SNS::Topic",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sns:Publish",
                "sns:RemovePermission",
                "sns:SetTopicAttributes",
                "sns:DeleteTopic",
                "sns:ListSubscriptionsByTopic",
                "sns:GetTopicAttributes",
                "sns:Receive",
                "sns:AddPermission",
                "sns:Subscribe",
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": "*",
              "Sid": "EnforceSSL",
            },
          ],
          "Version": "2012-10-17",
        },
        "Topics": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::SNS::TopicPolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/topic/wesocketmessagestopic/arn",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/topic/wesocketmessagestopic/name",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "TopicName",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "LogGroupName": "genai-admin-websocket-api-access-logs-/test-org-test-env-test-domain-test-gaia-main-genai-admin-websocket-api",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSettings": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Format": "{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","connectionId":"$context.connectionId"}",
        },
        "ApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "AutoDeploy": true,
        "StageName": "socket",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:468:25] Function is API implementation and will be invoked synchronously.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:468:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:468:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:468:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:468:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:468:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Architectures": [
          "x86_64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Environment": {
          "Variables": {
            "LOG_LEVEL": "INFO",
            "POWERTOOLS_DEV": "true",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "POWERTOOLS_SERVICE_NAME": "chatbot",
            "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-gaia-main-websocket--752e6fe2",
        "Handler": "index.handler",
        "Layers": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":lambda:",
                {
                  "Ref": "AWS::Region",
                },
                ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
              ],
            ],
          },
        ],
        "ReservedConcurrentExecutions": 1,
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "Active",
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-12345351356",
          ],
          "SubnetIds": [
            "subnet1",
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] X-Ray actions only support wildcard.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-websocketa-4721f4ef",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] X-Ray actions only support wildcard.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:497:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-websocket-authorizer*",
                  ],
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-websocket-authorizer*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "cognito-idp:GetUser",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:574:25] Function is API implementation and will be invoked synchronously.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:574:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:574:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:574:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:574:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:574:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Architectures": [
          "x86_64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "LOG_LEVEL": "INFO",
            "POWERTOOLS_DEV": "true",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "POWERTOOLS_SERVICE_NAME": "chatbot",
            "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-gaia-main-websocket--360faf30",
        "Handler": "index.handler",
        "Layers": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":lambda:",
                {
                  "Ref": "AWS::Region",
                },
                ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
              ],
            ],
          },
        ],
        "ReservedConcurrentExecutions": 1,
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "Active",
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-12345351356",
          ],
          "SubnetIds": [
            "subnet1",
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] X-Ray actions only support wildcard and log group not known at deployment.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-websocketc-48d44582",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] X-Ray actions only support wildcard and log group not known at deployment.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:601:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-websocket-connection-handler*",
                  ],
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-websocket-connection-handler*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:412:25] Function is API implementation and will be invoked synchronously.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:412:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:412:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:412:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:412:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:412:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Architectures": [
          "x86_64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Environment": {
          "Variables": {
            "LOG_LEVEL": "INFO",
            "MESSAGES_TOPIC_ARN": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "POWERTOOLS_DEV": "true",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "POWERTOOLS_SERVICE_NAME": "chatbot",
            "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
            "WEBSOCKET_API_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region",
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/socket",
                ],
              ],
            },
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-gaia-main-websocket-i-a93d992",
        "Handler": "index.handler",
        "Layers": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":lambda:",
                {
                  "Ref": "AWS::Region",
                },
                ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
              ],
            ],
          },
        ],
        "ReservedConcurrentExecutions": 1,
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "Active",
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-12345351356",
          ],
          "SubnetIds": [
            "subnet1",
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] X-Ray actions only support wildcard and execute api manage connections restricted to stack api gateway",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-websocketi-76534a4f",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] X-Ray actions only support wildcard and execute api manage connections restricted to stack api gateway",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:269:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-websocket-incoming-message-handler*",
                  ],
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-websocket-incoming-message-handler*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":events:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":event-bus/default",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Lambda in vpc is not enforced, outgoing messages just communicates to socket gateway.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Lambda in vpc is not enforced, outgoing messages just communicates to socket gateway.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Lambda in vpc is not enforced, outgoing messages just communicates to socket gateway.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Function is API implementation and will be invoked synchronously.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:337:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Architectures": [
          "x86_64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Environment": {
          "Variables": {
            "CONNECTIONS_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "LOG_LEVEL": "INFO",
            "POWERTOOLS_DEV": "true",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "POWERTOOLS_SERVICE_NAME": "chatbot",
            "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
            "WEBSOCKET_API_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region",
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/socket",
                ],
              ],
            },
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-gaia-main-websocket--5355c8d8",
        "Handler": "index.handler",
        "Layers": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":lambda:",
                {
                  "Ref": "AWS::Region",
                },
                ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
              ],
            ],
          },
        ],
        "ReservedConcurrentExecutions": 1,
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] X-Ray actions only support wildcard and execute api manage connections restricted to stack api gateway, and AWSLambdaBasicExecutionRole restrictive enough",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-websocket-outgoing-message-handler*",
                  ],
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-websocket-outgoing-message-handler*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "execute-api:ManageConnections",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                    "/socket/*/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] X-Ray actions only support wildcard and execute api manage connections restricted to stack api gateway, and AWSLambdaBasicExecutionRole restrictive enough",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:284:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-websocket--44c0a5eb",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "EventSourceArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "FunctionName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SQS3",
              "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "QueueName": "test-org-test-env-test-domain-test-gaia-main-websocketoutgoingmessagesdlq",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SQS3",
              "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sqs:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": "*",
              "Sid": "EnforceSSL",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "QueueName": "test-org-test-env-test-domain-test-gaia-main-websocketoutgoingmessagesqueue",
        "RedrivePolicy": {
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "maxReceiveCount": 3,
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sqs:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": "*",
              "Sid": "EnforceSSL",
            },
            {
              "Action": "sqs:SendMessage",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com",
                  "sqs.amazonaws.com",
                ],
              },
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": "sqs:SendMessage",
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "sns.amazonaws.com",
              },
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "FilterPolicy": {
          "direction": [
            "OUT",
          ],
        },
        "FilterPolicyScope": "MessageBody",
        "Protocol": "sqs",
        "TopicArn": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "RouteKey": "$connect",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "/*$connect",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "$default",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "/*$default",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "$disconnect",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ApiId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "/*$disconnect",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-APIG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/chatbot-api/websocket-api.ts:299:25] API guarded with Cognito Auth and an Authorizer lambda",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "/authorizers/",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SQS3",
              "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "QueueName": "test-org-test-env-test-domain-test-gaia-main-langchainingestiondlq",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SQS3",
              "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sqs:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": "*",
              "Sid": "EnforceSSL",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "QueueName": "test-org-test-env-test-domain-test-gaia-main-langchainingestionqueue",
        "RedrivePolicy": {
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "maxReceiveCount": 3,
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VisibilityTimeout": 5400,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sqs:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": "*",
              "Sid": "EnforceSSL",
            },
            {
              "Action": "sqs:SendMessage",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com",
                  "sqs.amazonaws.com",
                ],
              },
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": "sqs:SendMessage",
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "REPLACED-CFN-LOGICAL-ID",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "sns.amazonaws.com",
              },
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "FilterPolicy": {
          "direction": [
            "IN",
          ],
          "modelInterface": [
            "langchain",
          ],
        },
        "FilterPolicyScope": "MessageBody",
        "Protocol": "sqs",
        "TopicArn": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked synchronously.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Architectures": [
          "x86_64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Environment": {
          "Variables": {
            "API_KEYS_SECRETS_ARN": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "AURORA_DB_SECRET_ID": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "BEDROCK_REGION": "ca-central-1",
            "CONFIG_PARAMETER_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "DEFAULT_KENDRA_INDEX_ID": "",
            "DEFAULT_KENDRA_INDEX_NAME": "",
            "DEFAULT_KENDRA_S3_DATA_SOURCE_BUCKET_NAME": "",
            "DEFAULT_KENDRA_S3_DATA_SOURCE_ID": "",
            "DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME": "by_compound_key_idx",
            "DOCUMENTS_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "LOG_LEVEL": "INFO",
            "MESSAGES_TOPIC_ARN": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "POWERTOOLS_DEV": "true",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "POWERTOOLS_METRICS_NAMESPACE": "chatbot-model-interface",
            "POWERTOOLS_SERVICE_NAME": "chatbot",
            "SAGEMAKER_RAG_MODELS_ENDPOINT": "",
            "SESSIONS_BY_USER_ID_INDEX_NAME": "byUserId",
            "SESSIONS_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
            "WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME": "by_object_type_idx",
            "WORKSPACES_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-gaia-main-model-int--328a803b",
        "Handler": "index.handler",
        "Layers": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":lambda:",
                {
                  "Ref": "AWS::Region",
                },
                ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
              ],
            ],
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 120,
        "TracingConfig": {
          "Mode": "Active",
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            "subnet1",
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Standard Lambda Execution Managed Policy",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] X-Ray, Comprehend, & Bedrock actions only support wildcard, s3 bucket bound to stack managed bucket, and DDB index and KMS key deployed and managed by stack",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSLambdaExecute",
              ],
            ],
          },
        ],
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-modelinter-62f7a330",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Standard Lambda Execution Managed Policy",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] X-Ray, Comprehend, & Bedrock actions only support wildcard, s3 bucket bound to stack managed bucket, and DDB index and KMS key deployed and managed by stack",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-model-interface-request-handler*",
                  ],
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-model-interface-request-handler*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "bedrock:InvokeModel",
                "bedrock:InvokeModelWithResponseStream",
                "bedrock:InvokeAgent",
              ],
              "Condition": {
                "StringEquals": {
                  "aws:RequestedRegion": "ca-central-1",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "bedrock:Retrieve",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":bedrock:ca-central-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":knowledge-base/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "comprehend:DetectDominantLanguage",
                "comprehend:DetectSentiment",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Standard Lambda Execution Managed Policy",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] X-Ray, Comprehend, & Bedrock actions only support wildcard, s3 bucket bound to stack managed bucket, and DDB index and KMS key deployed and managed by stack",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/modelinterfacerequesthandlerrole/arn",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Standard Lambda Execution Managed Policy",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] X-Ray, Comprehend, & Bedrock actions only support wildcard, s3 bucket bound to stack managed bucket, and DDB index and KMS key deployed and managed by stack",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/modelinterfacerequesthandlerrole/id",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "RoleId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Standard Lambda Execution Managed Policy",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] X-Ray, Comprehend, & Bedrock actions only support wildcard, s3 bucket bound to stack managed bucket, and DDB index and KMS key deployed and managed by stack",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:85:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/modelinterfacerequesthandlerrole/name",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked synchronously.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "GroupDescription": "Automatic security group for Lambda Function testorgtestenvtestdomaintestgaiamaingaiaLangchainInterfaceRequestHandler3B08A3AE",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "XXXXXXXX",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked synchronously.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "EventSourceArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "FunctionName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked synchronously.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/lambda/model-interface-request-handler/arn",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked synchronously.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/model-interfaces/langchain/index.ts:101:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/lambda/model-interface-request-handler/name",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": "[]",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Only run during deployment, concurrency does not fit the scenario.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Only run during deployment, concurrency does not fit the scenario.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Only run during deployment, concurrency does not fit the scenario.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Used in a custom resource, error handling is managed by Cloudformation.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Used in a custom resource, error handling is managed by Cloudformation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Used in a custom resource, error handling is managed by Cloudformation.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Used in a custom resource only during deployment.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Used in a custom resource only during deployment.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Used in a custom resource only during deployment.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:79:25] Event handler lambda resources unknown at deployment, used for deployment only",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Architectures": [
          "x86_64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Environment": {
          "Variables": {
            "AURORA_DB_SECRET_ID": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "LOG_LEVEL": "INFO",
            "POWERTOOLS_DEV": "true",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "POWERTOOLS_SERVICE_NAME": "chatbot",
            "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
            "WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME": "by_object_type_idx",
            "WORKSPACES_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-gaia-main-create-au--20f627f6",
        "Handler": "index.lambda_handler",
        "Layers": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":lambda:",
                {
                  "Ref": "AWS::Region",
                },
                ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
              ],
            ],
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-12345351356",
          ],
          "SubnetIds": [
            "subnet1",
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Standard Lambda Execution Managed Policy",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] DDB index names not known at deployment time. KMS Permissions are appropriately scoped.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Permissions are role specific. Inline policy use appropriate.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Permissions are role specific. Inline policy use appropriate.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Permissions are role specific. Inline policy use appropriate.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-create-aurora-workspace*",
                  ],
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-create-aurora-workspace*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "REPLACED-CFN-LOGICAL-ID",
                        "DBClusterResourceId",
                      ],
                    },
                    "/postgres",
                  ],
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Standard Lambda Execution Managed Policy",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] DDB index names not known at deployment time. KMS Permissions are appropriately scoped.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Permissions are role specific. Inline policy use appropriate.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Permissions are role specific. Inline policy use appropriate.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:123:25] Permissions are role specific. Inline policy use appropriate.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSLambdaExecute",
              ],
            ],
          },
        ],
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-create-aur-2b2544c8",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Invoke function restricted to delete workspace lambda.  The lambda arn is not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"SetCreating","States":{"SetCreating":{"Next":"Create","Type":"Task","ResultPath":null,"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"object_type":{"S":"workspace"}},"TableName":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":statusValue":{"S":"creating"}},"UpdateExpression":"set #status=:statusValue"}},"Create":{"Next":"SetReady","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.createResult","Next":"HandleError"}],"Type":"Task","ResultPath":"$.createResult","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"SetReady":{"Next":"Success","Type":"Task","ResultPath":null,"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"object_type":{"S":"workspace"}},"TableName":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":statusValue":{"S":"ready"}},"UpdateExpression":"set #status=:statusValue"}},"Success":{"Type":"Succeed"},"HandleError":{"Next":"Fail","Type":"Task","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"object_type":{"S":"workspace"}},"TableName":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":error":{"S":"error"}},"UpdateExpression":"set #status = :error"}},"Fail":{"Type":"Fail","Cause":"Workspace creation failed"}},"TimeoutSeconds":300,"Comment":"Create Aurora Workspace Workflow"}",
            ],
          ],
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "Level": "ALL",
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "TracingConfiguration": {
          "Enabled": true,
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Invoke function restricted to delete workspace lambda.  The lambda arn is not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "dynamodb:UpdateItem",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Invoke function restricted to delete workspace lambda.  The lambda arn is not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/create-aurora-workspace.ts:231:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "states.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "LogGroupName": "/aws/stepfunction/test-org-test-env-test-domain-test-gaia-main-create-aurora-workspace",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Only run during deployment.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Only run during deployment, concurrency does not fit the scenario.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Only run during deployment, concurrency does not fit the scenario.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Only run during deployment, concurrency does not fit the scenario.",
            },
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Used in a custom resource, error handling is managed by Cloudformation.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Used in a custom resource, error handling is managed by Cloudformation.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Used in a custom resource, error handling is managed by Cloudformation.",
            },
            {
              "id": "NIST.800.53.R5-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Used in a custom resource only during deployment.",
            },
            {
              "id": "HIPAA.Security-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Used in a custom resource only during deployment.",
            },
            {
              "id": "PCI.DSS.321-LambdaInsideVPC",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Used in a custom resource only during deployment.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:126:25] Event handler lambda resources unknown at deployment, used for deployment only",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AURORA_DB_SECRET_ID": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "Custom::DatabaseSetupFunction",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole",
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:41:25] Managed policy used by RDS for monitoring.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "monitoring.rds.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole",
              ],
            ],
          },
        ],
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-test-clus--1fe64ffd",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole",
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:41:25] Managed policy used by RDS for monitoring.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/test-cluster-enhanced-monitoring-role/arn",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole",
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:41:25] Managed policy used by RDS for monitoring.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/test-cluster-enhanced-monitoring-role/id",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "RoleId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole",
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/aurora-pgvector/index.ts:41:25] Managed policy used by RDS for monitoring.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/test-cluster-enhanced-monitoring-role/name",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "LogExport::postgresql",
              ],
              "id": "AwsSolutions-RDS16",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:250:25] Remediated through property override. Log export for postgresql is enabled.",
            },
            {
              "applies_to": [
                "LogExport::postgresql",
              ],
              "id": "NIST.800.53.R5-RDSLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:250:25] Remediated through property override. Log export for postgresql is enabled.",
            },
            {
              "applies_to": [
                "LogExport::postgresql",
              ],
              "id": "HIPAA.Security-RDSLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:250:25] Remediated through property override. Log export for postgresql is enabled.",
            },
            {
              "applies_to": [
                "LogExport::postgresql",
              ],
              "id": "PCI.DSS.321-RDSLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:250:25] Remediated through property override. Log export for postgresql is enabled.",
            },
            {
              "id": "AwsSolutions-RDS6",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:250:25] Remediated through property override.",
            },
            {
              "id": "AwsSolutions-RDS11",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:250:25] Remediated through property override.",
            },
            {
              "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "PCI.DSS.321-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "HIPAA.Security-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "PCI.DSS.321-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "BackupRetentionPeriod": 20,
        "CopyTagsToSnapshot": true,
        "DBClusterIdentifier": "test-org-test-env-test-domain-test-gaia-main-test-cluster",
        "DBClusterParameterGroupName": "default.aurora-postgresql15",
        "DBSubnetGroupName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "DeletionProtection": true,
        "EnableCloudwatchLogsExports": [
          "postgresql",
        ],
        "EnableIAMDatabaseAuthentication": true,
        "Engine": "aurora-postgresql",
        "EngineVersion": "15.3",
        "KmsKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "MasterUserPassword": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              ":SecretString:username::}}",
            ],
          ],
        },
        "Port": 15530,
        "ServerlessV2ScalingConfiguration": {
          "MaxCapacity": 4,
          "MinCapacity": 0.5,
        },
        "StorageEncrypted": true,
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcSecurityGroupIds": [
          "sg-46576878787",
        ],
      },
      "Type": "AWS::RDS::DBCluster",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "PCI.DSS.321-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "HIPAA.Security-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "PCI.DSS.321-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Location": {
          "ApplicationId": {
            "Fn::FindInMap": [
              "REPLACED-CFN-LOGICAL-ID",
              {
                "Ref": "AWS::Partition",
              },
              "applicationId",
            ],
          },
          "SemanticVersion": {
            "Fn::FindInMap": [
              "REPLACED-CFN-LOGICAL-ID",
              {
                "Ref": "AWS::Partition",
              },
              "semanticVersion",
            ],
          },
        },
        "Parameters": {
          "endpoint": {
            "Fn::Join": [
              "",
              [
                "https://secretsmanager.",
                {
                  "Ref": "AWS::Region",
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix",
                },
              ],
            ],
          },
          "excludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@"\\",
          "functionName": "REPLACED-CFN-LOGICAL-ID",
          "kmsKeyArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "vpcSecurityGroupIds": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "GroupId",
            ],
          },
          "vpcSubnetIds": "subnet2",
        },
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
      },
      "Type": "AWS::Serverless::Application",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "PCI.DSS.321-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "HIPAA.Security-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "PCI.DSS.321-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "GroupDescription": "test-org-test-env-test-domain-test-gaia-main/gaia/RagEngines/AuroraPgVector/aurora-postgres-pgvector/RotationSingleUser/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "XXXXXXXX",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "PCI.DSS.321-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "HIPAA.Security-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "PCI.DSS.321-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "SecretId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "TargetId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "TargetType": "AWS::RDS::DBCluster",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "PCI.DSS.321-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "HIPAA.Security-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "PCI.DSS.321-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ResourcePolicy": {
          "Statement": [
            {
              "Action": "secretsmanager:DeleteSecret",
              "Effect": "Deny",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "SecretId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SecretsManager::ResourcePolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "PCI.DSS.321-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "HIPAA.Security-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "PCI.DSS.321-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "RotationLambdaARN": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Outputs.RotationLambdaARN",
          ],
        },
        "RotationRules": {
          "ScheduleExpression": "rate(60 days)",
        },
        "SecretId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SecretsManager::RotationSchedule",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "PCI.DSS.321-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "HIPAA.Security-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "PCI.DSS.321-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Generated by the CDK for stack: ",
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": {
          "ExcludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@"\\",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{"username":"postgres"}",
        },
        "KmsKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "PCI.DSS.321-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "HIPAA.Security-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "PCI.DSS.321-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "DBSubnetGroupDescription": "Subnets for aurora-postgres-pgvector database",
        "SubnetIds": [
          "subnet2",
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "PCI.DSS.321-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "HIPAA.Security-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "PCI.DSS.321-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "DBClusterIdentifier": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "DBInstanceClass": "db.serverless",
        "Engine": "aurora-postgresql",
        "MonitoringInterval": 60,
        "MonitoringRoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "PromotionTier": 2,
        "PubliclyAccessible": false,
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "PCI.DSS.321-RDSEnhancedMonitoringEnabled",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Monitoring role required and monitoring intervals set with a minimum default.",
            },
            {
              "id": "HIPAA.Security-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "PCI.DSS.321-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInstancePublicAccess",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Deployed within private subnets and vpc along with iam auth enforced and security group.",
            },
            {
              "id": "NIST.800.53.R5-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "HIPAA.Security-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "PCI.DSS.321-RDSInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/rds-constructs/lib/serverless-cluster.ts:252:25] Instance is serverless and has a backup retention policy defaulting to 1.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "DBClusterIdentifier": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "DBInstanceClass": "db.serverless",
        "Engine": "aurora-postgresql",
        "MonitoringInterval": 60,
        "MonitoringRoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "PromotionTier": 0,
        "PubliclyAccessible": false,
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AliasName": "alias/test-org-test-env-test-domain-test-gaia-main-test-org-test-env-test-domain-test-gaia-main-dataimportqueueskey",
        "TargetKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::KMS::Alias",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "EnableKeyRotation": true,
        "Enabled": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "s3.amazonaws.com",
              },
              "Resource": "*",
            },
            {
              "Action": [
                "kms:GenerateDataKey*",
                "kms:Decrypt",
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": "s3.amazonaws.com",
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SQS3",
              "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "QueueName": "test-org-test-env-test-domain-test-gaia-main-dataimportworkflowdlq",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VisibilityTimeout": 900,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SQS3",
              "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sqs:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": "*",
              "Sid": "EnforceSSL",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Log stream generated at deployment time by AWS batch and ecr get authorization only supports * for resource",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Log stream generated at deployment time by AWS batch and ecr get authorization only supports * for resource",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:200:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/aws/batch/job:*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":repository/",
                    {
                      "Fn::Sub": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:215:25] Events handled by upstream dynamodb service, resource unknown at deployment time",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:215:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:215:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:215:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ContainerProperties": {
          "Environment": [
            {
              "Name": "AWS_DEFAULT_REGION",
              "Value": {
                "Ref": "AWS::Region",
              },
            },
            {
              "Name": "CONFIG_PARAMETER_NAME",
              "Value": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Name": "API_KEYS_SECRETS_ARN",
              "Value": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Name": "AURORA_DB_SECRET_ID",
              "Value": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Name": "PROCESSING_BUCKET_NAME",
              "Value": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Name": "WORKSPACES_TABLE_NAME",
              "Value": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Name": "WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME",
              "Value": "by_object_type_idx",
            },
            {
              "Name": "DOCUMENTS_TABLE_NAME",
              "Value": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Name": "DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME",
              "Value": "by_compound_key_idx",
            },
            {
              "Name": "SAGEMAKER_RAG_MODELS_ENDPOINT",
              "Value": "",
            },
          ],
          "ExecutionRoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "Image": {
            "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:1926f20a316e4252bd0d1a6138474d4c92abaf5d5d9dc706ab5d11da46f8ba01",
          },
          "JobRoleArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "LinuxParameters": {
            "Tmpfs": [
              {
                "ContainerPath": "/tmp",
                "MountOptions": [
                  "rw",
                ],
                "Size": 10240,
              },
            ],
          },
          "ReadonlyRootFilesystem": true,
          "ResourceRequirements": [
            {
              "Type": "MEMORY",
              "Value": "2048",
            },
            {
              "Type": "VCPU",
              "Value": "2",
            },
          ],
          "User": "worker",
        },
        "PlatformCapabilities": [
          "EC2",
        ],
        "RetryStrategy": {},
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Timeout": {
          "AttemptDurationSeconds": 1800,
        },
        "Type": "container",
      },
      "Type": "AWS::Batch::JobDefinition",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Cluster unknown at runtime.  Created during deployment and strictly used for AWS Batch job",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.  Resources actions for ECS only support widlcard log group name not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
              ],
            ],
          },
        ],
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-fileimportjobrole",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Cluster unknown at runtime.  Created during deployment and strictly used for AWS Batch job",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.  Resources actions for ECS only support widlcard log group name not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "bedrock:InvokeModel",
                "bedrock:InvokeModelWithResponseStream",
              ],
              "Condition": {
                "StringEquals": {
                  "aws:RequestedRegion": "ca-central-1",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Cluster unknown at runtime.  Created during deployment and strictly used for AWS Batch job",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.  Resources actions for ECS only support widlcard log group name not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/fileimportjobrole/arn",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Cluster unknown at runtime.  Created during deployment and strictly used for AWS Batch job",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.  Resources actions for ECS only support widlcard log group name not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/fileimportjobrole/id",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "RoleId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Cluster unknown at runtime.  Created during deployment and strictly used for AWS Batch job",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.  Resources actions for ECS only support widlcard log group name not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:169:25] Inline policy maintained by MDAA framework.  Wildcard is towards bedrock but service enabled on region level controls are in place.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/role/fileimportjobrole/name",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ComputeEnvironmentOrder": [
          {
            "ComputeEnvironment": {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "ComputeEnvironmentArn",
              ],
            },
            "Order": 1,
          },
        ],
        "Priority": 1,
        "State": "ENABLED",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
      },
      "Type": "AWS::Batch::JobQueue",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "LaunchTemplateData": {
          "MetadataOptions": {
            "HttpTokens": "required",
          },
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "mdaa_cdk_app",
                  "Value": "gaia",
                },
                {
                  "Key": "mdaa_domain",
                  "Value": "test-domain",
                },
                {
                  "Key": "mdaa_env",
                  "Value": "test-env",
                },
                {
                  "Key": "mdaa_module_name",
                  "Value": "test-gaia-main",
                },
                {
                  "Key": "mdaa_org",
                  "Value": "test-org",
                },
                {
                  "Key": "Name",
                  "Value": "test-org-test-env-test-domain-test-gaia-main/gaia/RagEngines/DataImport/FileImportBatchJob/LaunchTemplate",
                },
              ],
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "mdaa_cdk_app",
                  "Value": "gaia",
                },
                {
                  "Key": "mdaa_domain",
                  "Value": "test-domain",
                },
                {
                  "Key": "mdaa_env",
                  "Value": "test-env",
                },
                {
                  "Key": "mdaa_module_name",
                  "Value": "test-gaia-main",
                },
                {
                  "Key": "mdaa_org",
                  "Value": "test-org",
                },
                {
                  "Key": "Name",
                  "Value": "test-org-test-env-test-domain-test-gaia-main/gaia/RagEngines/DataImport/FileImportBatchJob/LaunchTemplate",
                },
              ],
            },
          ],
        },
        "TagSpecifications": [
          {
            "ResourceType": "launch-template",
            "Tags": [
              {
                "Key": "mdaa_cdk_app",
                "Value": "gaia",
              },
              {
                "Key": "mdaa_domain",
                "Value": "test-domain",
              },
              {
                "Key": "mdaa_env",
                "Value": "test-env",
              },
              {
                "Key": "mdaa_module_name",
                "Value": "test-gaia-main",
              },
              {
                "Key": "mdaa_org",
                "Value": "test-org",
              },
              {
                "Key": "Name",
                "Value": "test-org-test-env-test-domain-test-gaia-main/gaia/RagEngines/DataImport/FileImportBatchJob/LaunchTemplate",
              },
            ],
          },
        ],
      },
      "Type": "AWS::EC2::LaunchTemplate",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:158:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ComputeResources": {
          "AllocationStrategy": "BEST_FIT_PROGRESSIVE",
          "InstanceRole": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "InstanceTypes": [
            "c5.xlarge",
            "optimal",
          ],
          "LaunchTemplate": {
            "LaunchTemplateId": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          },
          "MaxvCpus": 4,
          "MinvCpus": 0,
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "GroupId",
              ],
            },
          ],
          "Subnets": [
            "subnet1",
          ],
          "Tags": {
            "mdaa_cdk_app": "gaia",
            "mdaa_domain": "test-domain",
            "mdaa_env": "test-env",
            "mdaa_module_name": "test-gaia-main",
            "mdaa_org": "test-org",
          },
          "Type": "EC2",
          "UpdateToLatestImageVersion": true,
        },
        "ReplaceComputeEnvironment": true,
        "State": "ENABLED",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "managed",
        "UpdatePolicy": {
          "JobExecutionTimeoutMinutes": 30,
        },
      },
      "Type": "AWS::Batch::ComputeEnvironment",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:158:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:158:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-batch-job.ts:158:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "GroupDescription": "test-org-test-env-test-domain-test-gaia-main/gaia/RagEngines/DataImport/FileImportBatchJob/ManagedEc2EcsComputeEnvironment/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "XXXXXXXX",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Events handled by upstream dynamodb service, resource unknown at deployment time",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"SetProcessing","States":{"SetProcessing":{"Next":"FileImportJob","Type":"Task","ResultPath":null,"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"document_id":{"S.$":"$.document_id"}},"TableName":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":statusValue":{"S":"processing"}},"UpdateExpression":"set #status=:statusValue"}},"FileImportJob":{"Next":"SetProcessed","Type":"Task","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::batch:submitJob.sync","Parameters":{"JobDefinition":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","JobName.$":"States.Format('FileImport-{}-{}', $.workspace_id, $.document_id)","JobQueue":"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "JobQueueArn",
                ],
              },
              "","ContainerOverrides":{"Environment":[{"Name":"WORKSPACE_ID","Value.$":"$.workspace_id"},{"Name":"DOCUMENT_ID","Value.$":"$.document_id"},{"Name":"INPUT_BUCKET_NAME","Value.$":"$.input_bucket_name"},{"Name":"INPUT_OBJECT_KEY","Value.$":"$.input_object_key"},{"Name":"PROCESSING_BUCKET_NAME","Value.$":"$.processing_bucket_name"},{"Name":"PROCESSING_OBJECT_KEY","Value.$":"$.processing_object_key"}]}},"ResultPath":"$.job"},"SetProcessed":{"Next":"Success","Type":"Task","ResultPath":null,"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"document_id":{"S.$":"$.document_id"}},"TableName":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":statusValue":{"S":"processed"}},"UpdateExpression":"set #status=:statusValue"}},"Success":{"Type":"Succeed"}},"TimeoutSeconds":43200,"Comment":"File import workflow"}",
            ],
          ],
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "Level": "ALL",
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "TracingConfiguration": {
          "Enabled": true,
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Events handled by upstream dynamodb service, resource unknown at deployment time",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "states.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Events handled by upstream dynamodb service, resource unknown at deployment time",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/file-import-workflow.ts:142:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "dynamodb:UpdateItem",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "events:CreateRule",
                "events:PutRule",
                "events:PutTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "batch:SubmitJob",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "JobQueueArn",
                  ],
                },
                {
                  "Ref": "REPLACED-CFN-LOGICAL-ID",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "LogGroupName": "/aws/stepfunction/test-org-test-env-test-domain-test-gaia-main-file-import",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "QueueName": "test-org-test-env-test-domain-test-gaia-main-vectordbdataingestion",
        "RedrivePolicy": {
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "maxReceiveCount": 3,
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VisibilityTimeout": 900,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sqs:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": "*",
              "Sid": "EnforceSSL",
            },
            {
              "Action": [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
              ],
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "s3.amazonaws.com",
              },
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-S1",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "NIST.800.53.R5-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "HIPAA.Security-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "PCI.DSS.321-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "NIST.800.53.R5-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:116:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "HIPAA.Security-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:116:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "PCI.DSS.321-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:116:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": {
                "KMSMasterKeyID": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "BucketName": "test-org-test-env-test-domain-test-gaia-main-test-org--46817329",
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-S1",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "NIST.800.53.R5-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "HIPAA.Security-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "PCI.DSS.321-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "NIST.800.53.R5-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:116:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "HIPAA.Security-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:116:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "PCI.DSS.321-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:116:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Bucket": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-server-side-encryption": "AES256",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "REPLACED-CFN-LOGICAL-ID",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "DenyAES",
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringNotLikeIfExists": {
                  "s3:x-amz-server-side-encryption-aws-kms-key-id": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "REPLACED-CFN-LOGICAL-ID",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "ForceKMS",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-S1",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "NIST.800.53.R5-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "HIPAA.Security-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "PCI.DSS.321-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "NIST.800.53.R5-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:87:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "HIPAA.Security-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:87:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "PCI.DSS.321-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:87:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AccelerateConfiguration": {
          "AccelerationStatus": "Enabled",
        },
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": {
                "KMSMasterKeyID": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "BucketName": "test-org-test-env-test-domain-test-gaia-main-test-org--5febe857",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*",
              ],
              "AllowedMethods": [
                "PUT",
                "POST",
                "GET",
                "HEAD",
              ],
              "AllowedOrigins": [
                "*",
              ],
              "ExposedHeaders": [
                "ETag",
              ],
              "MaxAge": 3000,
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "BucketName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Managed": true,
        "NotificationConfiguration": {
          "QueueConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*",
              ],
              "QueueArn": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Events": [
                "s3:ObjectRemoved:*",
              ],
              "QueueArn": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "SkipDestinationValidation": false,
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-S1",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "NIST.800.53.R5-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "HIPAA.Security-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "PCI.DSS.321-S3BucketLoggingEnabled",
              "reason": "[MDAA:@aws-mdaa/s3-constructs/lib/index.ts:145:25] Server access logs do not support KMS on targets. MDAA uses CloudTrail data events instead.",
            },
            {
              "id": "NIST.800.53.R5-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:87:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "HIPAA.Security-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:87:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "PCI.DSS.321-S3BucketReplicationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:87:25] MDAA does not enforce bucket replication.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Bucket": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-server-side-encryption": "AES256",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "REPLACED-CFN-LOGICAL-ID",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "DenyAES",
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringNotLikeIfExists": {
                  "s3:x-amz-server-side-encryption-aws-kms-key-id": {
                    "Fn::GetAtt": [
                      "REPLACED-CFN-LOGICAL-ID",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "REPLACED-CFN-LOGICAL-ID",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "ForceKMS",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] Function is S3 Event handler. S3 service will provide concurrency and anti-hammering protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] Function is S3 Event handler. S3 service will provide concurrency and anti-hammering protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] Function is S3 Event handler. S3 service will provide concurrency and anti-hammering protections.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] X-Ray actions only accept wildcard and s3 operations restricted to kms key and s3 buckets managed by stack",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Architectures": [
          "x86_64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Environment": {
          "Variables": {
            "API_KEYS_SECRETS_ARN": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "CONFIG_PARAMETER_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "DEFAULT_KENDRA_S3_DATA_SOURCE_BUCKET_NAME": "",
            "DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME": "by_compound_key_idx",
            "DOCUMENTS_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "FILE_IMPORT_WORKFLOW_ARN": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "LOG_LEVEL": "INFO",
            "POWERTOOLS_DEV": "true",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "POWERTOOLS_SERVICE_NAME": "chatbot",
            "PROCESSING_BUCKET_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "SAGEMAKER_RAG_MODELS_ENDPOINT": "",
            "UPLOAD_BUCKET_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
            "WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME": "by_object_type_idx",
            "WORKSPACES_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-gaia-main-vectordbd--58bb4080",
        "Handler": "index.lambda_handler",
        "Layers": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":lambda:",
                {
                  "Ref": "AWS::Region",
                },
                ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
              ],
            ],
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 900,
        "TracingConfig": {
          "Mode": "Active",
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            "subnet1",
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SQS3",
              "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "QueueName": "test-org-test-env-test-domain-test-gaia-main-uploadhandlerdlq",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SQS3",
              "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sqs:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": "*",
              "Sid": "EnforceSSL",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] X-Ray actions only accept wildcard and s3 operations restricted to kms key and s3 buckets managed by stack",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-vectordbda--ff1800a",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] X-Ray actions only accept wildcard and s3 operations restricted to kms key and s3 buckets managed by stack",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:267:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sqs:SendMessage",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] Function is S3 Event handler. S3 service will provide concurrency and anti-hammering protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] Function is S3 Event handler. S3 service will provide concurrency and anti-hammering protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] Function is S3 Event handler. S3 service will provide concurrency and anti-hammering protections.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/index.ts:219:25] X-Ray actions only accept wildcard and s3 operations restricted to kms key and s3 buckets managed by stack",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "GroupDescription": "Automatic security group for Lambda Function testorgtestenvtestdomaintestgaiamaingaiaRagEnginesDataImportUploadHandlerAFCA9513",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "XXXXXXXX",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "EventSourceArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "FunctionName": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Permissions are restrictive to stack resources. Processing s3 bucket managed and deployed by stack, not known at deployment.  KMS key resource deployed and managed by stack, not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"SetProcessing","States":{"SetProcessing":{"Next":"Done?","Type":"Task","ResultPath":null,"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"document_id":{"S.$":"$.document_id"}},"TableName":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":statusValue":{"S":"processing"}},"UpdateExpression":"set #status=:statusValue"}},"Done?":{"Type":"Choice","Choices":[{"Variable":"$.done","BooleanEquals":false,"Next":"WebsiteParser"}],"Default":"SetProcessed"},"WebsiteParser":{"Next":"Done?","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.parsingResult","Next":"HandleError"}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"HandleError":{"Next":"Fail","Type":"Task","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"document_id":{"S.$":"$.document_id"}},"TableName":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":error":{"S":"error"}},"UpdateExpression":"set #status = :error"}},"Fail":{"Type":"Fail","Cause":"Import failed"},"SetProcessed":{"Next":"Success","Type":"Task","ResultPath":null,"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"document_id":{"S.$":"$.document_id"}},"TableName":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":statusValue":{"S":"processed"}},"UpdateExpression":"set #status=:statusValue"}},"Success":{"Type":"Succeed"}},"TimeoutSeconds":7200,"Comment":"Website crawling workflow"}",
            ],
          ],
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "Level": "ALL",
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "TracingConfiguration": {
          "Enabled": true,
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Permissions are restrictive to stack resources. Processing s3 bucket managed and deployed by stack, not known at deployment.  KMS key resource deployed and managed by stack, not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "dynamodb:UpdateItem",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "events:CreateRule",
                "events:PutRule",
                "events:PutTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Permissions are restrictive to stack resources. Processing s3 bucket managed and deployed by stack, not known at deployment.  KMS key resource deployed and managed by stack, not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:280:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "states.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "LogGroupName": "/aws/stepfunction/test-org-test-env-test-domain-test-gaia-main-website-crawling",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:98:25] Function will be throttled by upstream services.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:98:25] Function will be throttled by upstream services.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:98:25] Function will be throttled by upstream services.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Managed policies are restrictive, logs group resource unknown at deployment and only used during deployment",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Policy restricted to stack managed processing bucket and embedding model invoke endpoint unknown at deployment",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Architectures": [
          "x86_64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Environment": {
          "Variables": {
            "API_KEYS_SECRETS_ARN": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "AURORA_DB_SECRET_ID": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "CONFIG_PARAMETER_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME": "by_compound_key_idx",
            "DOCUMENTS_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "LOG_LEVEL": "INFO",
            "POWERTOOLS_DEV": "true",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "POWERTOOLS_SERVICE_NAME": "chatbot",
            "PROCESSING_BUCKET_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "SAGEMAKER_RAG_MODELS_ENDPOINT": "",
            "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
            "WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME": "by_object_type_idx",
            "WORKSPACES_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-gaia-main-websitepar-500d4f83",
        "Handler": "index.lambda_handler",
        "Layers": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":lambda:",
                {
                  "Ref": "AWS::Region",
                },
                ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
              ],
            ],
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 900,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            "subnet1",
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SQS3",
              "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "QueueName": "test-org-test-env-test-domain-test-gaia-main-websiteparserfunctiondlq",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SQS3",
              "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sqs:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": "*",
              "Sid": "EnforceSSL",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Managed policies are restrictive, logs group resource unknown at deployment and only used during deployment",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.  Resources actions for ECS only support widlcard log group name not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Inline policy maintained by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Inline policy maintained by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Inline policy maintained by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSLambdaExecute",
              ],
            ],
          },
        ],
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-websitepa--1dc6a987",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Managed policies are restrictive, logs group resource unknown at deployment and only used during deployment",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] AmazonEC2ContainerServiceforEC2Role is restrictive enough.  Resources actions for ECS only support widlcard log group name not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Inline policy maintained by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Inline policy maintained by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:240:25] Inline policy maintained by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-websiteparserfunction*",
                  ],
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-websiteparserfunction*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sqs:SendMessage",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "bedrock:InvokeModel",
                "bedrock:InvokeModelWithResponseStream",
              ],
              "Condition": {
                "StringEquals": {
                  "aws:RequestedRegion": "ca-central-1",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:98:25] Function will be throttled by upstream services.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:98:25] Function will be throttled by upstream services.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:98:25] Function will be throttled by upstream services.",
            },
            {
              "id": "AwsSolutions-IAM4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Managed policies are restrictive, logs group resource unknown at deployment and only used during deployment",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Policy restricted to stack managed processing bucket and embedding model invoke endpoint unknown at deployment",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/data-import/website-crawling-workflow.ts:260:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "GroupDescription": "Automatic security group for Lambda Function testorgtestenvtestdomaintestgaiamaingaiaRagEnginesDataImportWebsiteCrawlingWorkflowWebsiteParserFunction5B3C69E9",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "XXXXXXXX",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "HIPAA.Security-DynamoDBInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
            },
            {
              "id": "PCI.DSS.321-DynamoDBInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
            },
            {
              "id": "NIST.800.53.R5-DynamoDBInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
            },
            {
              "id": "NIST.800.53.R5-DynamoDBAutoScalingEnabled",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
            },
            {
              "id": "HIPAA.Security-DynamoDBAutoScalingEnabled",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
            },
            {
              "id": "PCI.DSS.321-DynamoDBAutoScalingEnabled",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "workspace_id",
            "AttributeType": "S",
          },
          {
            "AttributeName": "document_id",
            "AttributeType": "S",
          },
          {
            "AttributeName": "compound_sort_key",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "DeletionProtectionEnabled": true,
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "by_compound_key_idx",
            "KeySchema": [
              {
                "AttributeName": "workspace_id",
                "KeyType": "HASH",
              },
              {
                "AttributeName": "compound_sort_key",
                "KeyType": "RANGE",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "workspace_id",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "document_id",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
        "TableName": "test-org-test-env-test-domain-test-gaia-main-test-org-test-env-test-domain-test-gaia-main-documents",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "HIPAA.Security-DynamoDBInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
            },
            {
              "id": "PCI.DSS.321-DynamoDBInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
            },
            {
              "id": "NIST.800.53.R5-DynamoDBInBackupPlan",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of AWS Backup",
            },
            {
              "id": "NIST.800.53.R5-DynamoDBAutoScalingEnabled",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
            },
            {
              "id": "HIPAA.Security-DynamoDBAutoScalingEnabled",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
            },
            {
              "id": "PCI.DSS.321-DynamoDBAutoScalingEnabled",
              "reason": "[MDAA:@aws-mdaa/ddb-constructs/lib/index.ts:161:25] MDAA does not enforce use of Auto Scaling on Provisioned Capacity tables.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "workspace_id",
            "AttributeType": "S",
          },
          {
            "AttributeName": "object_type",
            "AttributeType": "S",
          },
          {
            "AttributeName": "created_at",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "DeletionProtectionEnabled": true,
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "by_object_type_idx",
            "KeySchema": [
              {
                "AttributeName": "object_type",
                "KeyType": "HASH",
              },
              {
                "AttributeName": "created_at",
                "KeyType": "RANGE",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "workspace_id",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "object_type",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
        "TableName": "test-org-test-env-test-domain-test-gaia-main-test-org-test-env-test-domain-test-gaia-main-workspaces",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Invoke function restricted to delete workspace lambda.  The lambda arn is not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"SetDeleting","States":{"SetDeleting":{"Next":"Delete","Type":"Task","ResultPath":null,"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"object_type":{"S":"workspace"}},"TableName":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":statusValue":{"S":"deleting"}},"UpdateExpression":"set #status=:statusValue"}},"Delete":{"Next":"Success","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.deleteResult","Next":"HandleError"}],"Type":"Task","ResultPath":"$.deleteResult","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"Success":{"Type":"Succeed"},"HandleError":{"Next":"Fail","Type":"Task","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:updateItem","Parameters":{"Key":{"workspace_id":{"S.$":"$.workspace_id"},"object_type":{"S":"workspace"}},"TableName":"",
              {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
              "","ExpressionAttributeNames":{"#status":"status"},"ExpressionAttributeValues":{":error":{"S":"error"}},"UpdateExpression":"set #status = :error"}},"Fail":{"Type":"Fail","Cause":"Workspace deletion failed"}},"TimeoutSeconds":300,"Comment":"Delete Workspace Workflow"}",
            ],
          ],
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "Level": "ALL",
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "TracingConfiguration": {
          "Enabled": true,
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Permissions are restrictive to stack resources. Processing s3 bucket managed and deployed by stack, not known at deployment.  KMS key resource deployed and managed by stack, not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-deletework-189ed109",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] LogStream names dynamically generated by Lambda. Wildcard limited to log stream name.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/lambda-constructs/lib/role.ts:143:25] Inline policy is specific to this role and its custom resource.",
            },
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Permissions are restrictive to stack resources. Processing s3 bucket managed and deployed by stack, not known at deployment.  KMS key resource deployed and managed by stack, not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:201:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-delete-workspace-handler*",
                  ],
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:*:*:log-group:/aws/lambda/test-org-test-env-test-domain-test-gaia-main-delete-workspace-handler*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sqs:SendMessage",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked synchronously.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Architectures": [
          "x86_64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::GetAtt": [
              "REPLACED-CFN-LOGICAL-ID",
              "Arn",
            ],
          },
        },
        "Environment": {
          "Variables": {
            "AURORA_DB_SECRET_ID": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "DEFAULT_KENDRA_S3_DATA_SOURCE_BUCKET_NAME": "",
            "DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME": "by_compound_key_idx",
            "DOCUMENTS_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "LOG_LEVEL": "INFO",
            "POWERTOOLS_DEV": "true",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "POWERTOOLS_SERVICE_NAME": "chatbot",
            "PROCESSING_BUCKET_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "UPLOAD_BUCKET_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
            "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
            "WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME": "by_object_type_idx",
            "WORKSPACES_TABLE_NAME": {
              "Ref": "REPLACED-CFN-LOGICAL-ID",
            },
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-gaia-main-delete-wor-3a31bf9f",
        "Handler": "index.lambda_handler",
        "Layers": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":lambda:",
                {
                  "Ref": "AWS::Region",
                },
                ":017000801446:layer:AWSLambdaPowertoolsPythonV2:46",
              ],
            ],
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 900,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "REPLACED-CFN-LOGICAL-ID",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            "subnet1",
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked synchronously.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:95:25] Function is API implementation and will be invoked via API Gateway with WAF protections.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "GroupDescription": "Automatic security group for Lambda Function testorgtestenvtestdomaintestgaiamaingaiaRagEnginesWorkspacesDeleteWorkspaceDeleteWorkspaceFunctionE9966F28",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "VpcId": "XXXXXXXX",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SQS3",
              "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "QueueName": "test-org-test-env-test-domain-test-gaia-main-deleteworkspacehandlerhandlerdlq",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SQS3",
              "reason": "[MDAA:@aws-mdaa/sqs-constructs/lib/index.ts:243:25] Queue is a DLQ.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sqs:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": "*",
              "Sid": "EnforceSSL",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod",
              "reason": "[MDAA:@aws-mdaa/cloudwatch-constructs/lib/loggroup.ts:52:27] LogGroup retention is set to RetentionDays.INFINITE.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "LogGroupName": "/aws/stepfunction/test-org-test-env-test-domain-test-gaia-main-delete-workspace",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Invoke function restricted to delete workspace lambda.  The lambda arn is not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "states.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Invoke function restricted to delete workspace lambda.  The lambda arn is not known at deployment time.",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/rag-engines/workspaces/delete-workspace.ts:216:25] Inline policy managed by MDAA framework.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "dynamodb:UpdateItem",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    {
                      "Ref": "REPLACED-CFN-LOGICAL-ID",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "REPLACED-CFN-LOGICAL-ID",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "REPLACED-CFN-LOGICAL-ID",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SMG4",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:230:25] Key entry is managed via the console and ties to 3rd party api keys, no support for automatic rotation",
            },
            {
              "id": "NIST.800.53.R5-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:230:25] Key entry is managed via the console and ties to 3rd party api keys, no support for automatic rotation",
            },
            {
              "id": "HIPAA.Security-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:230:25] Key entry is managed via the console and ties to 3rd party api keys, no support for automatic rotation",
            },
            {
              "id": "PCI.DSS.321-SecretsManagerRotationEnabled",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:230:25] Key entry is managed via the console and ties to 3rd party api keys, no support for automatic rotation",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "KmsKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "SecretString": "{}",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "CompatibleArchitectures": [
          "x86_64",
        ],
        "CompatibleRuntimes": [
          "python3.12",
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
      },
      "Type": "AWS::Lambda::LayerVersion",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": "{"dataAdminRoles":[{"name":"Admin"}],"prefix":"testing","bedrock":{"enabled":true,"region":"ca-central-1"},"llms":{"sagemaker":[]},"rag":{"engines":{"sagemaker":{"instanceType":"ml.inf1.xlarge"},"aurora":{"minCapacity":0.5,"maxCapacity":4},"knowledgeBase":{}},"embeddingsModels":[{"provider":"bedrock","name":"amazon.titan-embed-text-v2:0","dimensions":1024,"isDefault":true}],"crossEncoderModels":[]},"auth":{"authType":"email_pass","cognitoDomain":"some-unique-pool-domain-name"},"setApiGateWayAccountCloudwatchRole":true,"skipApiGatewayDefaultWaf":true,"vpc":{"vpcId":"XXXXXXXX","appSecurityGroupId":"sg-12345351356","appSubnets":["subnet1"],"dataSecurityGroupId":"sg-46576878787","dataSubnets":["subnet2"]}}",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestgaiamaingaiaLangchainInterfaceRequestHandlerSecurityGroup5E6C1EA1:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Endpoint.Port",
          ],
        },
        "GroupId": "sg-46576878787",
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestgaiamaingaiaRagEnginesAuroraPgVectoraurorapostgrespgvectorRotationSingleUserSecurityGroup556DFF62:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Endpoint.Port",
          ],
        },
        "GroupId": "sg-46576878787",
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestgaiamaingaiaRagEnginesDataImportFileImportBatchJobManagedEc2EcsComputeEnvironmentSecurityGroupD29E3A16:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Endpoint.Port",
          ],
        },
        "GroupId": "sg-46576878787",
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestgaiamaingaiaRagEnginesDataImportWebsiteCrawlingWorkflowWebsiteParserFunctionSecurityGroupF7AFE404:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Endpoint.Port",
          ],
        },
        "GroupId": "sg-46576878787",
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestgaiamaingaiaRagEnginesWorkspacesDeleteWorkspaceDeleteWorkspaceFunctionSecurityGroup1ABD4790:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Endpoint.Port",
          ],
        },
        "GroupId": "sg-46576878787",
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "from testorgtestenvtestdomaintestgaiamaingaiaSharedDefaultAppSecurityGroupE9EF71A3:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Endpoint.Port",
          ],
        },
        "GroupId": "sg-46576878787",
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "sg-12345351356",
        "ToPort": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "CompatibleArchitectures": [
          "x86_64",
        ],
        "CompatibleRuntimes": [
          "python3.12",
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
      },
      "Type": "AWS::Lambda::LayerVersion",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "NIST.800.53.R5-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:146:25] Function is for Secrets Manager rotation and error handling will be handled by Secrets Manager.",
            },
            {
              "id": "NIST.800.53.R5-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:146:25] Function is for Secrets Manager rotation and will only execute once a month. Reserved concurrency not appropriate.",
            },
            {
              "id": "HIPAA.Security-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:146:25] Function is for Secrets Manager rotation and error handling will be handled by Secrets Manager.",
            },
            {
              "id": "HIPAA.Security-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:146:25] Function is for Secrets Manager rotation and will only execute once a month. Reserved concurrency not appropriate.",
            },
            {
              "id": "PCI.DSS.321-LambdaDLQ",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:146:25] Function is for Secrets Manager rotation and error handling will be handled by Secrets Manager.",
            },
            {
              "id": "PCI.DSS.321-LambdaConcurrency",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:146:25] Function is for Secrets Manager rotation and will only execute once a month. Reserved concurrency not appropriate.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Architectures": [
          "x86_64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Environment": {
          "Variables": {
            "USER_AGENT_STRING": "AWSSOLUTION/SO0320/v1.0.0",
          },
        },
        "FunctionName": "test-org-test-env-test-domain-test-gaia-main-gaiasecre--7bc3525d",
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
        "Timeout": 600,
        "TracingConfig": {
          "Mode": "Active",
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-12345351356",
          ],
          "SubnetIds": [
            "subnet1",
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Principal": "secretsmanager.amazonaws.com",
      },
      "Type": "AWS::Lambda::Permission",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Secret resource not known ahead of time, role is for a secret rotation lambda managed by secrets manager",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:ec2:<AWS::Region>:<AWS::AccountId>:network-interface/*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Network interfaces to be created are unknown",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "test-org-test-env-test-domain-test-gaia-main-gaiasecre--52818f43",
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Secret resource not known ahead of time, role is for a secret rotation lambda managed by secrets manager",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:ec2:<AWS::Region>:<AWS::AccountId>:network-interface/*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Network interfaces to be created are unknown",
            },
            {
              "id": "NIST.800.53.R5-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "HIPAA.Security-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "PCI.DSS.321-IAMNoInlinePolicy",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/shared/index.ts:202:25] Inline policy is specific to this role and function.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "secretsmanager:PutSecretValue",
                "secretsmanager:UpdateSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": [
                "secretsmanager:DescribeSecret",
                "secretsmanager:GetSecretValue",
                "secretsmanager:PutSecretValue",
                "secretsmanager:UpdateSecretVersionStage",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "REPLACED-CFN-LOGICAL-ID",
              },
            },
            {
              "Action": "secretsmanager:GetRandomPassword",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "REPLACED-CFN-LOGICAL-ID",
        "Roles": [
          {
            "Ref": "REPLACED-CFN-LOGICAL-ID",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "GenerateSecretString": {
          "ExcludePunctuation": true,
          "GenerateStringKey": "headerValue",
          "SecretStringTemplate": "{}",
        },
        "KmsKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/origin/verify/secret/arn",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "ResourcePolicy": {
          "Statement": [
            {
              "Action": "secretsmanager:DeleteSecret",
              "Effect": "Deny",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "SecretId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SecretsManager::ResourcePolicy",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DependsOn": [
        "REPLACED-CFN-LOGICAL-ID",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "RotationLambdaARN": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
        "RotationRules": {
          "ScheduleExpression": "rate(30 days)",
        },
        "SecretId": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SecretsManager::RotationSchedule",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "EnableKeyRotation": true,
        "Enabled": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncryptFrom",
                "kms:ReEncryptTo",
                "kms:GenerateDataKey",
                "kms:GenerateDataKeyWithoutPlaintext",
                "kms:GenerateDataKeyPair",
                "kms:GenerateDataKeyPairWithoutPlaintext",
              ],
              "Condition": {
                "ArnEquals": {
                  "kms:EncryptionContext:aws:logs:arn": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:*",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "logs.",
                      {
                        "Ref": "AWS::Region",
                      },
                      ".amazonaws.com",
                    ],
                  ],
                },
              },
              "Resource": "*",
              "Sid": "CloudWatchLogsEncryption",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": [
                "kms:CreateGrant",
                "kms:DescribeKey",
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": "kms:Decrypt",
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": "kms:Decrypt",
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": "logs.amazonaws.com",
              },
              "Resource": "*",
            },
            {
              "Action": "kms:Decrypt",
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": "kms:Decrypt",
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": "kms:Decrypt",
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": "kms:Decrypt",
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": "kms:Decrypt",
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey",
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": "sns.amazonaws.com",
              },
              "Resource": "*",
            },
            {
              "Action": "kms:Decrypt",
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "REPLACED-CFN-LOGICAL-ID",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "mdaa_cdk_app",
            "Value": "gaia",
          },
          {
            "Key": "mdaa_domain",
            "Value": "test-domain",
          },
          {
            "Key": "mdaa_env",
            "Value": "test-env",
          },
          {
            "Key": "mdaa_module_name",
            "Value": "test-gaia-main",
          },
          {
            "Key": "mdaa_org",
            "Value": "test-org",
          },
        ],
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "AliasName": "alias/test-org-test-env-test-domain-test-gaia-main",
        "TargetKeyId": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::KMS::Alias",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/kms/arn",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "REPLACED-CFN-LOGICAL-ID",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "REPLACED-CFN-LOGICAL-ID": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "[MDAA:@aws-mdaa/ai/gaia-l3-construct/lib/gaia-l3-construct.ts:146:25] GAIA designed for Python 3.11.",
            },
          ],
        },
      },
      "Properties": {
        "Name": "/test-org/test-domain/test-gaia-main/kms/id",
        "Tags": {
          "mdaa_cdk_app": "gaia",
          "mdaa_domain": "test-domain",
          "mdaa_env": "test-env",
          "mdaa_module_name": "test-gaia-main",
          "mdaa_org": "test-org",
        },
        "Type": "String",
        "Value": {
          "Ref": "REPLACED-CFN-LOGICAL-ID",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
  "Transform": "AWS::Serverless-2016-10-31",
}
`;
